
/**
 * Client
**/

import * as runtime from './runtime/client.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Authenticator
 * 
 */
export type Authenticator = $Result.DefaultSelection<Prisma.$AuthenticatorPayload>
/**
 * Model Church
 * 
 */
export type Church = $Result.DefaultSelection<Prisma.$ChurchPayload>
/**
 * Model ChurchMember
 * 
 */
export type ChurchMember = $Result.DefaultSelection<Prisma.$ChurchMemberPayload>
/**
 * Model Ministry
 * 
 */
export type Ministry = $Result.DefaultSelection<Prisma.$MinistryPayload>
/**
 * Model MinistryMember
 * 
 */
export type MinistryMember = $Result.DefaultSelection<Prisma.$MinistryMemberPayload>
/**
 * Model ChurchNotice
 * 
 */
export type ChurchNotice = $Result.DefaultSelection<Prisma.$ChurchNoticePayload>
/**
 * Model MinistryNotice
 * 
 */
export type MinistryNotice = $Result.DefaultSelection<Prisma.$MinistryNoticePayload>
/**
 * Model MinistryEvent
 * 
 */
export type MinistryEvent = $Result.DefaultSelection<Prisma.$MinistryEventPayload>
/**
 * Model MinistryAnnouncement
 * 
 */
export type MinistryAnnouncement = $Result.DefaultSelection<Prisma.$MinistryAnnouncementPayload>
/**
 * Model MinistrySchedule
 * 
 */
export type MinistrySchedule = $Result.DefaultSelection<Prisma.$MinistrySchedulePayload>
/**
 * Model ChurchFeed
 * 
 */
export type ChurchFeed = $Result.DefaultSelection<Prisma.$ChurchFeedPayload>
/**
 * Model FeedImage
 * 
 */
export type FeedImage = $Result.DefaultSelection<Prisma.$FeedImagePayload>
/**
 * Model FeedLike
 * 
 */
export type FeedLike = $Result.DefaultSelection<Prisma.$FeedLikePayload>
/**
 * Model FeedComment
 * 
 */
export type FeedComment = $Result.DefaultSelection<Prisma.$FeedCommentPayload>
/**
 * Model MinistryPosition
 * 
 */
export type MinistryPosition = $Result.DefaultSelection<Prisma.$MinistryPositionPayload>
/**
 * Model MinistryFile
 * 
 */
export type MinistryFile = $Result.DefaultSelection<Prisma.$MinistryFilePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ChurchRole: {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  PENDING: 'PENDING'
};

export type ChurchRole = (typeof ChurchRole)[keyof typeof ChurchRole]


export const Role: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MinistryRole: {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  PENDING: 'PENDING'
};

export type MinistryRole = (typeof MinistryRole)[keyof typeof MinistryRole]

}

export type ChurchRole = $Enums.ChurchRole

export const ChurchRole: typeof $Enums.ChurchRole

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type MinistryRole = $Enums.MinistryRole

export const MinistryRole: typeof $Enums.MinistryRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.authenticator`: Exposes CRUD operations for the **Authenticator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authenticators
    * const authenticators = await prisma.authenticator.findMany()
    * ```
    */
  get authenticator(): Prisma.AuthenticatorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.church`: Exposes CRUD operations for the **Church** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Churches
    * const churches = await prisma.church.findMany()
    * ```
    */
  get church(): Prisma.ChurchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchMember`: Exposes CRUD operations for the **ChurchMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchMembers
    * const churchMembers = await prisma.churchMember.findMany()
    * ```
    */
  get churchMember(): Prisma.ChurchMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministry`: Exposes CRUD operations for the **Ministry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ministries
    * const ministries = await prisma.ministry.findMany()
    * ```
    */
  get ministry(): Prisma.MinistryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministryMember`: Exposes CRUD operations for the **MinistryMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistryMembers
    * const ministryMembers = await prisma.ministryMember.findMany()
    * ```
    */
  get ministryMember(): Prisma.MinistryMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchNotice`: Exposes CRUD operations for the **ChurchNotice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchNotices
    * const churchNotices = await prisma.churchNotice.findMany()
    * ```
    */
  get churchNotice(): Prisma.ChurchNoticeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministryNotice`: Exposes CRUD operations for the **MinistryNotice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistryNotices
    * const ministryNotices = await prisma.ministryNotice.findMany()
    * ```
    */
  get ministryNotice(): Prisma.MinistryNoticeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministryEvent`: Exposes CRUD operations for the **MinistryEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistryEvents
    * const ministryEvents = await prisma.ministryEvent.findMany()
    * ```
    */
  get ministryEvent(): Prisma.MinistryEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministryAnnouncement`: Exposes CRUD operations for the **MinistryAnnouncement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistryAnnouncements
    * const ministryAnnouncements = await prisma.ministryAnnouncement.findMany()
    * ```
    */
  get ministryAnnouncement(): Prisma.MinistryAnnouncementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministrySchedule`: Exposes CRUD operations for the **MinistrySchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistrySchedules
    * const ministrySchedules = await prisma.ministrySchedule.findMany()
    * ```
    */
  get ministrySchedule(): Prisma.MinistryScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.churchFeed`: Exposes CRUD operations for the **ChurchFeed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChurchFeeds
    * const churchFeeds = await prisma.churchFeed.findMany()
    * ```
    */
  get churchFeed(): Prisma.ChurchFeedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedImage`: Exposes CRUD operations for the **FeedImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedImages
    * const feedImages = await prisma.feedImage.findMany()
    * ```
    */
  get feedImage(): Prisma.FeedImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedLike`: Exposes CRUD operations for the **FeedLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedLikes
    * const feedLikes = await prisma.feedLike.findMany()
    * ```
    */
  get feedLike(): Prisma.FeedLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedComment`: Exposes CRUD operations for the **FeedComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedComments
    * const feedComments = await prisma.feedComment.findMany()
    * ```
    */
  get feedComment(): Prisma.FeedCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministryPosition`: Exposes CRUD operations for the **MinistryPosition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistryPositions
    * const ministryPositions = await prisma.ministryPosition.findMany()
    * ```
    */
  get ministryPosition(): Prisma.MinistryPositionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ministryFile`: Exposes CRUD operations for the **MinistryFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MinistryFiles
    * const ministryFiles = await prisma.ministryFile.findMany()
    * ```
    */
  get ministryFile(): Prisma.MinistryFileDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Authenticator: 'Authenticator',
    Church: 'Church',
    ChurchMember: 'ChurchMember',
    Ministry: 'Ministry',
    MinistryMember: 'MinistryMember',
    ChurchNotice: 'ChurchNotice',
    MinistryNotice: 'MinistryNotice',
    MinistryEvent: 'MinistryEvent',
    MinistryAnnouncement: 'MinistryAnnouncement',
    MinistrySchedule: 'MinistrySchedule',
    ChurchFeed: 'ChurchFeed',
    FeedImage: 'FeedImage',
    FeedLike: 'FeedLike',
    FeedComment: 'FeedComment',
    MinistryPosition: 'MinistryPosition',
    MinistryFile: 'MinistryFile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "verificationToken" | "authenticator" | "church" | "churchMember" | "ministry" | "ministryMember" | "churchNotice" | "ministryNotice" | "ministryEvent" | "ministryAnnouncement" | "ministrySchedule" | "churchFeed" | "feedImage" | "feedLike" | "feedComment" | "ministryPosition" | "ministryFile"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Authenticator: {
        payload: Prisma.$AuthenticatorPayload<ExtArgs>
        fields: Prisma.AuthenticatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthenticatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthenticatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          findFirst: {
            args: Prisma.AuthenticatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthenticatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          findMany: {
            args: Prisma.AuthenticatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[]
          }
          create: {
            args: Prisma.AuthenticatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          createMany: {
            args: Prisma.AuthenticatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthenticatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[]
          }
          delete: {
            args: Prisma.AuthenticatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          update: {
            args: Prisma.AuthenticatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          deleteMany: {
            args: Prisma.AuthenticatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthenticatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthenticatorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[]
          }
          upsert: {
            args: Prisma.AuthenticatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          aggregate: {
            args: Prisma.AuthenticatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthenticator>
          }
          groupBy: {
            args: Prisma.AuthenticatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthenticatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthenticatorCountArgs<ExtArgs>
            result: $Utils.Optional<AuthenticatorCountAggregateOutputType> | number
          }
        }
      }
      Church: {
        payload: Prisma.$ChurchPayload<ExtArgs>
        fields: Prisma.ChurchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          findFirst: {
            args: Prisma.ChurchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          findMany: {
            args: Prisma.ChurchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>[]
          }
          create: {
            args: Prisma.ChurchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          createMany: {
            args: Prisma.ChurchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>[]
          }
          delete: {
            args: Prisma.ChurchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          update: {
            args: Prisma.ChurchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          deleteMany: {
            args: Prisma.ChurchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>[]
          }
          upsert: {
            args: Prisma.ChurchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchPayload>
          }
          aggregate: {
            args: Prisma.ChurchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurch>
          }
          groupBy: {
            args: Prisma.ChurchGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchCountAggregateOutputType> | number
          }
        }
      }
      ChurchMember: {
        payload: Prisma.$ChurchMemberPayload<ExtArgs>
        fields: Prisma.ChurchMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>
          }
          findFirst: {
            args: Prisma.ChurchMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>
          }
          findMany: {
            args: Prisma.ChurchMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>[]
          }
          create: {
            args: Prisma.ChurchMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>
          }
          createMany: {
            args: Prisma.ChurchMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>[]
          }
          delete: {
            args: Prisma.ChurchMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>
          }
          update: {
            args: Prisma.ChurchMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>
          }
          deleteMany: {
            args: Prisma.ChurchMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>[]
          }
          upsert: {
            args: Prisma.ChurchMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchMemberPayload>
          }
          aggregate: {
            args: Prisma.ChurchMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchMember>
          }
          groupBy: {
            args: Prisma.ChurchMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchMemberCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchMemberCountAggregateOutputType> | number
          }
        }
      }
      Ministry: {
        payload: Prisma.$MinistryPayload<ExtArgs>
        fields: Prisma.MinistryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>
          }
          findFirst: {
            args: Prisma.MinistryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>
          }
          findMany: {
            args: Prisma.MinistryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>[]
          }
          create: {
            args: Prisma.MinistryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>
          }
          createMany: {
            args: Prisma.MinistryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>[]
          }
          delete: {
            args: Prisma.MinistryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>
          }
          update: {
            args: Prisma.MinistryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>
          }
          deleteMany: {
            args: Prisma.MinistryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>[]
          }
          upsert: {
            args: Prisma.MinistryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPayload>
          }
          aggregate: {
            args: Prisma.MinistryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistry>
          }
          groupBy: {
            args: Prisma.MinistryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryCountAggregateOutputType> | number
          }
        }
      }
      MinistryMember: {
        payload: Prisma.$MinistryMemberPayload<ExtArgs>
        fields: Prisma.MinistryMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>
          }
          findFirst: {
            args: Prisma.MinistryMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>
          }
          findMany: {
            args: Prisma.MinistryMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>[]
          }
          create: {
            args: Prisma.MinistryMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>
          }
          createMany: {
            args: Prisma.MinistryMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>[]
          }
          delete: {
            args: Prisma.MinistryMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>
          }
          update: {
            args: Prisma.MinistryMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>
          }
          deleteMany: {
            args: Prisma.MinistryMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>[]
          }
          upsert: {
            args: Prisma.MinistryMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryMemberPayload>
          }
          aggregate: {
            args: Prisma.MinistryMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistryMember>
          }
          groupBy: {
            args: Prisma.MinistryMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryMemberCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryMemberCountAggregateOutputType> | number
          }
        }
      }
      ChurchNotice: {
        payload: Prisma.$ChurchNoticePayload<ExtArgs>
        fields: Prisma.ChurchNoticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchNoticeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchNoticeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>
          }
          findFirst: {
            args: Prisma.ChurchNoticeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchNoticeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>
          }
          findMany: {
            args: Prisma.ChurchNoticeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>[]
          }
          create: {
            args: Prisma.ChurchNoticeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>
          }
          createMany: {
            args: Prisma.ChurchNoticeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchNoticeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>[]
          }
          delete: {
            args: Prisma.ChurchNoticeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>
          }
          update: {
            args: Prisma.ChurchNoticeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>
          }
          deleteMany: {
            args: Prisma.ChurchNoticeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchNoticeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchNoticeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>[]
          }
          upsert: {
            args: Prisma.ChurchNoticeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchNoticePayload>
          }
          aggregate: {
            args: Prisma.ChurchNoticeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchNotice>
          }
          groupBy: {
            args: Prisma.ChurchNoticeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchNoticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchNoticeCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchNoticeCountAggregateOutputType> | number
          }
        }
      }
      MinistryNotice: {
        payload: Prisma.$MinistryNoticePayload<ExtArgs>
        fields: Prisma.MinistryNoticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryNoticeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryNoticeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>
          }
          findFirst: {
            args: Prisma.MinistryNoticeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryNoticeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>
          }
          findMany: {
            args: Prisma.MinistryNoticeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>[]
          }
          create: {
            args: Prisma.MinistryNoticeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>
          }
          createMany: {
            args: Prisma.MinistryNoticeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryNoticeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>[]
          }
          delete: {
            args: Prisma.MinistryNoticeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>
          }
          update: {
            args: Prisma.MinistryNoticeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>
          }
          deleteMany: {
            args: Prisma.MinistryNoticeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryNoticeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryNoticeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>[]
          }
          upsert: {
            args: Prisma.MinistryNoticeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryNoticePayload>
          }
          aggregate: {
            args: Prisma.MinistryNoticeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistryNotice>
          }
          groupBy: {
            args: Prisma.MinistryNoticeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryNoticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryNoticeCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryNoticeCountAggregateOutputType> | number
          }
        }
      }
      MinistryEvent: {
        payload: Prisma.$MinistryEventPayload<ExtArgs>
        fields: Prisma.MinistryEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>
          }
          findFirst: {
            args: Prisma.MinistryEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>
          }
          findMany: {
            args: Prisma.MinistryEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>[]
          }
          create: {
            args: Prisma.MinistryEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>
          }
          createMany: {
            args: Prisma.MinistryEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>[]
          }
          delete: {
            args: Prisma.MinistryEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>
          }
          update: {
            args: Prisma.MinistryEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>
          }
          deleteMany: {
            args: Prisma.MinistryEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>[]
          }
          upsert: {
            args: Prisma.MinistryEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryEventPayload>
          }
          aggregate: {
            args: Prisma.MinistryEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistryEvent>
          }
          groupBy: {
            args: Prisma.MinistryEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryEventCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryEventCountAggregateOutputType> | number
          }
        }
      }
      MinistryAnnouncement: {
        payload: Prisma.$MinistryAnnouncementPayload<ExtArgs>
        fields: Prisma.MinistryAnnouncementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryAnnouncementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryAnnouncementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>
          }
          findFirst: {
            args: Prisma.MinistryAnnouncementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryAnnouncementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>
          }
          findMany: {
            args: Prisma.MinistryAnnouncementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>[]
          }
          create: {
            args: Prisma.MinistryAnnouncementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>
          }
          createMany: {
            args: Prisma.MinistryAnnouncementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryAnnouncementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>[]
          }
          delete: {
            args: Prisma.MinistryAnnouncementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>
          }
          update: {
            args: Prisma.MinistryAnnouncementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>
          }
          deleteMany: {
            args: Prisma.MinistryAnnouncementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryAnnouncementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryAnnouncementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>[]
          }
          upsert: {
            args: Prisma.MinistryAnnouncementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryAnnouncementPayload>
          }
          aggregate: {
            args: Prisma.MinistryAnnouncementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistryAnnouncement>
          }
          groupBy: {
            args: Prisma.MinistryAnnouncementGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryAnnouncementGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryAnnouncementCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryAnnouncementCountAggregateOutputType> | number
          }
        }
      }
      MinistrySchedule: {
        payload: Prisma.$MinistrySchedulePayload<ExtArgs>
        fields: Prisma.MinistryScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>
          }
          findFirst: {
            args: Prisma.MinistryScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>
          }
          findMany: {
            args: Prisma.MinistryScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>[]
          }
          create: {
            args: Prisma.MinistryScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>
          }
          createMany: {
            args: Prisma.MinistryScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>[]
          }
          delete: {
            args: Prisma.MinistryScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>
          }
          update: {
            args: Prisma.MinistryScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>
          }
          deleteMany: {
            args: Prisma.MinistryScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>[]
          }
          upsert: {
            args: Prisma.MinistryScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistrySchedulePayload>
          }
          aggregate: {
            args: Prisma.MinistryScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistrySchedule>
          }
          groupBy: {
            args: Prisma.MinistryScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryScheduleCountAggregateOutputType> | number
          }
        }
      }
      ChurchFeed: {
        payload: Prisma.$ChurchFeedPayload<ExtArgs>
        fields: Prisma.ChurchFeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChurchFeedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChurchFeedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>
          }
          findFirst: {
            args: Prisma.ChurchFeedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChurchFeedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>
          }
          findMany: {
            args: Prisma.ChurchFeedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>[]
          }
          create: {
            args: Prisma.ChurchFeedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>
          }
          createMany: {
            args: Prisma.ChurchFeedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChurchFeedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>[]
          }
          delete: {
            args: Prisma.ChurchFeedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>
          }
          update: {
            args: Prisma.ChurchFeedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>
          }
          deleteMany: {
            args: Prisma.ChurchFeedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChurchFeedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChurchFeedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>[]
          }
          upsert: {
            args: Prisma.ChurchFeedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChurchFeedPayload>
          }
          aggregate: {
            args: Prisma.ChurchFeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChurchFeed>
          }
          groupBy: {
            args: Prisma.ChurchFeedGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChurchFeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChurchFeedCountArgs<ExtArgs>
            result: $Utils.Optional<ChurchFeedCountAggregateOutputType> | number
          }
        }
      }
      FeedImage: {
        payload: Prisma.$FeedImagePayload<ExtArgs>
        fields: Prisma.FeedImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>
          }
          findFirst: {
            args: Prisma.FeedImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>
          }
          findMany: {
            args: Prisma.FeedImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>[]
          }
          create: {
            args: Prisma.FeedImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>
          }
          createMany: {
            args: Prisma.FeedImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>[]
          }
          delete: {
            args: Prisma.FeedImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>
          }
          update: {
            args: Prisma.FeedImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>
          }
          deleteMany: {
            args: Prisma.FeedImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>[]
          }
          upsert: {
            args: Prisma.FeedImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedImagePayload>
          }
          aggregate: {
            args: Prisma.FeedImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedImage>
          }
          groupBy: {
            args: Prisma.FeedImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedImageCountArgs<ExtArgs>
            result: $Utils.Optional<FeedImageCountAggregateOutputType> | number
          }
        }
      }
      FeedLike: {
        payload: Prisma.$FeedLikePayload<ExtArgs>
        fields: Prisma.FeedLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>
          }
          findFirst: {
            args: Prisma.FeedLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>
          }
          findMany: {
            args: Prisma.FeedLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>[]
          }
          create: {
            args: Prisma.FeedLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>
          }
          createMany: {
            args: Prisma.FeedLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>[]
          }
          delete: {
            args: Prisma.FeedLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>
          }
          update: {
            args: Prisma.FeedLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>
          }
          deleteMany: {
            args: Prisma.FeedLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>[]
          }
          upsert: {
            args: Prisma.FeedLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLikePayload>
          }
          aggregate: {
            args: Prisma.FeedLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedLike>
          }
          groupBy: {
            args: Prisma.FeedLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedLikeCountArgs<ExtArgs>
            result: $Utils.Optional<FeedLikeCountAggregateOutputType> | number
          }
        }
      }
      FeedComment: {
        payload: Prisma.$FeedCommentPayload<ExtArgs>
        fields: Prisma.FeedCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>
          }
          findFirst: {
            args: Prisma.FeedCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>
          }
          findMany: {
            args: Prisma.FeedCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>[]
          }
          create: {
            args: Prisma.FeedCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>
          }
          createMany: {
            args: Prisma.FeedCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>[]
          }
          delete: {
            args: Prisma.FeedCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>
          }
          update: {
            args: Prisma.FeedCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>
          }
          deleteMany: {
            args: Prisma.FeedCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>[]
          }
          upsert: {
            args: Prisma.FeedCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedCommentPayload>
          }
          aggregate: {
            args: Prisma.FeedCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedComment>
          }
          groupBy: {
            args: Prisma.FeedCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedCommentCountArgs<ExtArgs>
            result: $Utils.Optional<FeedCommentCountAggregateOutputType> | number
          }
        }
      }
      MinistryPosition: {
        payload: Prisma.$MinistryPositionPayload<ExtArgs>
        fields: Prisma.MinistryPositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryPositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryPositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>
          }
          findFirst: {
            args: Prisma.MinistryPositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryPositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>
          }
          findMany: {
            args: Prisma.MinistryPositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>[]
          }
          create: {
            args: Prisma.MinistryPositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>
          }
          createMany: {
            args: Prisma.MinistryPositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryPositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>[]
          }
          delete: {
            args: Prisma.MinistryPositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>
          }
          update: {
            args: Prisma.MinistryPositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>
          }
          deleteMany: {
            args: Prisma.MinistryPositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryPositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryPositionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>[]
          }
          upsert: {
            args: Prisma.MinistryPositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryPositionPayload>
          }
          aggregate: {
            args: Prisma.MinistryPositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistryPosition>
          }
          groupBy: {
            args: Prisma.MinistryPositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryPositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryPositionCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryPositionCountAggregateOutputType> | number
          }
        }
      }
      MinistryFile: {
        payload: Prisma.$MinistryFilePayload<ExtArgs>
        fields: Prisma.MinistryFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MinistryFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MinistryFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>
          }
          findFirst: {
            args: Prisma.MinistryFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MinistryFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>
          }
          findMany: {
            args: Prisma.MinistryFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>[]
          }
          create: {
            args: Prisma.MinistryFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>
          }
          createMany: {
            args: Prisma.MinistryFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MinistryFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>[]
          }
          delete: {
            args: Prisma.MinistryFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>
          }
          update: {
            args: Prisma.MinistryFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>
          }
          deleteMany: {
            args: Prisma.MinistryFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MinistryFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MinistryFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>[]
          }
          upsert: {
            args: Prisma.MinistryFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MinistryFilePayload>
          }
          aggregate: {
            args: Prisma.MinistryFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMinistryFile>
          }
          groupBy: {
            args: Prisma.MinistryFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<MinistryFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.MinistryFileCountArgs<ExtArgs>
            result: $Utils.Optional<MinistryFileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    authenticator?: AuthenticatorOmit
    church?: ChurchOmit
    churchMember?: ChurchMemberOmit
    ministry?: MinistryOmit
    ministryMember?: MinistryMemberOmit
    churchNotice?: ChurchNoticeOmit
    ministryNotice?: MinistryNoticeOmit
    ministryEvent?: MinistryEventOmit
    ministryAnnouncement?: MinistryAnnouncementOmit
    ministrySchedule?: MinistryScheduleOmit
    churchFeed?: ChurchFeedOmit
    feedImage?: FeedImageOmit
    feedLike?: FeedLikeOmit
    feedComment?: FeedCommentOmit
    ministryPosition?: MinistryPositionOmit
    ministryFile?: MinistryFileOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    Authenticator: number
    churches: number
    ministries: number
    schedules: number
    ministryNotices: number
    feeds: number
    likes: number
    comments: number
    uploadedFiles: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    Authenticator?: boolean | UserCountOutputTypeCountAuthenticatorArgs
    churches?: boolean | UserCountOutputTypeCountChurchesArgs
    ministries?: boolean | UserCountOutputTypeCountMinistriesArgs
    schedules?: boolean | UserCountOutputTypeCountSchedulesArgs
    ministryNotices?: boolean | UserCountOutputTypeCountMinistryNoticesArgs
    feeds?: boolean | UserCountOutputTypeCountFeedsArgs
    likes?: boolean | UserCountOutputTypeCountLikesArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    uploadedFiles?: boolean | UserCountOutputTypeCountUploadedFilesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthenticatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthenticatorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChurchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMinistriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMinistryNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryNoticeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchFeedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryFileWhereInput
  }


  /**
   * Count Type ChurchCountOutputType
   */

  export type ChurchCountOutputType = {
    members: number
    ministries: number
    notices: number
    feeds: number
  }

  export type ChurchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | ChurchCountOutputTypeCountMembersArgs
    ministries?: boolean | ChurchCountOutputTypeCountMinistriesArgs
    notices?: boolean | ChurchCountOutputTypeCountNoticesArgs
    feeds?: boolean | ChurchCountOutputTypeCountFeedsArgs
  }

  // Custom InputTypes
  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchCountOutputType
     */
    select?: ChurchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchMemberWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountMinistriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchNoticeWhereInput
  }

  /**
   * ChurchCountOutputType without action
   */
  export type ChurchCountOutputTypeCountFeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchFeedWhereInput
  }


  /**
   * Count Type MinistryCountOutputType
   */

  export type MinistryCountOutputType = {
    members: number
    notices: number
    schedules: number
    announcements: number
    positions: number
    files: number
  }

  export type MinistryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | MinistryCountOutputTypeCountMembersArgs
    notices?: boolean | MinistryCountOutputTypeCountNoticesArgs
    schedules?: boolean | MinistryCountOutputTypeCountSchedulesArgs
    announcements?: boolean | MinistryCountOutputTypeCountAnnouncementsArgs
    positions?: boolean | MinistryCountOutputTypeCountPositionsArgs
    files?: boolean | MinistryCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryCountOutputType
     */
    select?: MinistryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryMemberWhereInput
  }

  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeCountNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryNoticeWhereInput
  }

  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryScheduleWhereInput
  }

  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeCountAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryAnnouncementWhereInput
  }

  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeCountPositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryPositionWhereInput
  }

  /**
   * MinistryCountOutputType without action
   */
  export type MinistryCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryFileWhereInput
  }


  /**
   * Count Type MinistryNoticeCountOutputType
   */

  export type MinistryNoticeCountOutputType = {
    events: number
  }

  export type MinistryNoticeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | MinistryNoticeCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * MinistryNoticeCountOutputType without action
   */
  export type MinistryNoticeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNoticeCountOutputType
     */
    select?: MinistryNoticeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MinistryNoticeCountOutputType without action
   */
  export type MinistryNoticeCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryEventWhereInput
  }


  /**
   * Count Type ChurchFeedCountOutputType
   */

  export type ChurchFeedCountOutputType = {
    images: number
    likes: number
    comments: number
  }

  export type ChurchFeedCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | ChurchFeedCountOutputTypeCountImagesArgs
    likes?: boolean | ChurchFeedCountOutputTypeCountLikesArgs
    comments?: boolean | ChurchFeedCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * ChurchFeedCountOutputType without action
   */
  export type ChurchFeedCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeedCountOutputType
     */
    select?: ChurchFeedCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChurchFeedCountOutputType without action
   */
  export type ChurchFeedCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedImageWhereInput
  }

  /**
   * ChurchFeedCountOutputType without action
   */
  export type ChurchFeedCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedLikeWhereInput
  }

  /**
   * ChurchFeedCountOutputType without action
   */
  export type ChurchFeedCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedCommentWhereInput
  }


  /**
   * Count Type MinistryPositionCountOutputType
   */

  export type MinistryPositionCountOutputType = {
    schedules: number
  }

  export type MinistryPositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | MinistryPositionCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * MinistryPositionCountOutputType without action
   */
  export type MinistryPositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPositionCountOutputType
     */
    select?: MinistryPositionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MinistryPositionCountOutputType without action
   */
  export type MinistryPositionCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryScheduleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    Authenticator?: boolean | User$AuthenticatorArgs<ExtArgs>
    churches?: boolean | User$churchesArgs<ExtArgs>
    ministries?: boolean | User$ministriesArgs<ExtArgs>
    schedules?: boolean | User$schedulesArgs<ExtArgs>
    ministryNotices?: boolean | User$ministryNoticesArgs<ExtArgs>
    feeds?: boolean | User$feedsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    Authenticator?: boolean | User$AuthenticatorArgs<ExtArgs>
    churches?: boolean | User$churchesArgs<ExtArgs>
    ministries?: boolean | User$ministriesArgs<ExtArgs>
    schedules?: boolean | User$schedulesArgs<ExtArgs>
    ministryNotices?: boolean | User$ministryNoticesArgs<ExtArgs>
    feeds?: boolean | User$feedsArgs<ExtArgs>
    likes?: boolean | User$likesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      Authenticator: Prisma.$AuthenticatorPayload<ExtArgs>[]
      churches: Prisma.$ChurchMemberPayload<ExtArgs>[]
      ministries: Prisma.$MinistryMemberPayload<ExtArgs>[]
      schedules: Prisma.$MinistrySchedulePayload<ExtArgs>[]
      ministryNotices: Prisma.$MinistryNoticePayload<ExtArgs>[]
      feeds: Prisma.$ChurchFeedPayload<ExtArgs>[]
      likes: Prisma.$FeedLikePayload<ExtArgs>[]
      comments: Prisma.$FeedCommentPayload<ExtArgs>[]
      uploadedFiles: Prisma.$MinistryFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Authenticator<T extends User$AuthenticatorArgs<ExtArgs> = {}>(args?: Subset<T, User$AuthenticatorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    churches<T extends User$churchesArgs<ExtArgs> = {}>(args?: Subset<T, User$churchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ministries<T extends User$ministriesArgs<ExtArgs> = {}>(args?: Subset<T, User$ministriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends User$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ministryNotices<T extends User$ministryNoticesArgs<ExtArgs> = {}>(args?: Subset<T, User$ministryNoticesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feeds<T extends User$feedsArgs<ExtArgs> = {}>(args?: Subset<T, User$feedsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends User$likesArgs<ExtArgs> = {}>(args?: Subset<T, User$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedFiles<T extends User$uploadedFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.Authenticator
   */
  export type User$AuthenticatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    where?: AuthenticatorWhereInput
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    cursor?: AuthenticatorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * User.churches
   */
  export type User$churchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    where?: ChurchMemberWhereInput
    orderBy?: ChurchMemberOrderByWithRelationInput | ChurchMemberOrderByWithRelationInput[]
    cursor?: ChurchMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchMemberScalarFieldEnum | ChurchMemberScalarFieldEnum[]
  }

  /**
   * User.ministries
   */
  export type User$ministriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    where?: MinistryMemberWhereInput
    orderBy?: MinistryMemberOrderByWithRelationInput | MinistryMemberOrderByWithRelationInput[]
    cursor?: MinistryMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryMemberScalarFieldEnum | MinistryMemberScalarFieldEnum[]
  }

  /**
   * User.schedules
   */
  export type User$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    where?: MinistryScheduleWhereInput
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    cursor?: MinistryScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryScheduleScalarFieldEnum | MinistryScheduleScalarFieldEnum[]
  }

  /**
   * User.ministryNotices
   */
  export type User$ministryNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    where?: MinistryNoticeWhereInput
    orderBy?: MinistryNoticeOrderByWithRelationInput | MinistryNoticeOrderByWithRelationInput[]
    cursor?: MinistryNoticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryNoticeScalarFieldEnum | MinistryNoticeScalarFieldEnum[]
  }

  /**
   * User.feeds
   */
  export type User$feedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    where?: ChurchFeedWhereInput
    orderBy?: ChurchFeedOrderByWithRelationInput | ChurchFeedOrderByWithRelationInput[]
    cursor?: ChurchFeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchFeedScalarFieldEnum | ChurchFeedScalarFieldEnum[]
  }

  /**
   * User.likes
   */
  export type User$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    where?: FeedLikeWhereInput
    orderBy?: FeedLikeOrderByWithRelationInput | FeedLikeOrderByWithRelationInput[]
    cursor?: FeedLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedLikeScalarFieldEnum | FeedLikeScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    where?: FeedCommentWhereInput
    orderBy?: FeedCommentOrderByWithRelationInput | FeedCommentOrderByWithRelationInput[]
    cursor?: FeedCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedCommentScalarFieldEnum | FeedCommentScalarFieldEnum[]
  }

  /**
   * User.uploadedFiles
   */
  export type User$uploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    where?: MinistryFileWhereInput
    orderBy?: MinistryFileOrderByWithRelationInput | MinistryFileOrderByWithRelationInput[]
    cursor?: MinistryFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryFileScalarFieldEnum | MinistryFileScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const accountWithUserIdOnly = await prisma.account.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `userId`
     * const accountWithUserIdOnly = await prisma.account.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `userId`
     * const accountWithUserIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    sessionToken: number
    userId: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    sessionToken: string
    userId: string
    expires: Date
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sessionToken" | "userId" | "expires" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sessionToken: string
      userId: string
      expires: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.findMany({ select: { sessionToken: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.createManyAndReturn({
     *   select: { sessionToken: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.updateManyAndReturn({
     *   select: { sessionToken: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Authenticator
   */

  export type AggregateAuthenticator = {
    _count: AuthenticatorCountAggregateOutputType | null
    _avg: AuthenticatorAvgAggregateOutputType | null
    _sum: AuthenticatorSumAggregateOutputType | null
    _min: AuthenticatorMinAggregateOutputType | null
    _max: AuthenticatorMaxAggregateOutputType | null
  }

  export type AuthenticatorAvgAggregateOutputType = {
    counter: number | null
  }

  export type AuthenticatorSumAggregateOutputType = {
    counter: number | null
  }

  export type AuthenticatorMinAggregateOutputType = {
    credentialID: string | null
    userId: string | null
    providerAccountId: string | null
    credentialPublicKey: string | null
    counter: number | null
    credentialDeviceType: string | null
    credentialBackedUp: boolean | null
    transports: string | null
  }

  export type AuthenticatorMaxAggregateOutputType = {
    credentialID: string | null
    userId: string | null
    providerAccountId: string | null
    credentialPublicKey: string | null
    counter: number | null
    credentialDeviceType: string | null
    credentialBackedUp: boolean | null
    transports: string | null
  }

  export type AuthenticatorCountAggregateOutputType = {
    credentialID: number
    userId: number
    providerAccountId: number
    credentialPublicKey: number
    counter: number
    credentialDeviceType: number
    credentialBackedUp: number
    transports: number
    _all: number
  }


  export type AuthenticatorAvgAggregateInputType = {
    counter?: true
  }

  export type AuthenticatorSumAggregateInputType = {
    counter?: true
  }

  export type AuthenticatorMinAggregateInputType = {
    credentialID?: true
    userId?: true
    providerAccountId?: true
    credentialPublicKey?: true
    counter?: true
    credentialDeviceType?: true
    credentialBackedUp?: true
    transports?: true
  }

  export type AuthenticatorMaxAggregateInputType = {
    credentialID?: true
    userId?: true
    providerAccountId?: true
    credentialPublicKey?: true
    counter?: true
    credentialDeviceType?: true
    credentialBackedUp?: true
    transports?: true
  }

  export type AuthenticatorCountAggregateInputType = {
    credentialID?: true
    userId?: true
    providerAccountId?: true
    credentialPublicKey?: true
    counter?: true
    credentialDeviceType?: true
    credentialBackedUp?: true
    transports?: true
    _all?: true
  }

  export type AuthenticatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authenticator to aggregate.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authenticators
    **/
    _count?: true | AuthenticatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthenticatorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthenticatorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthenticatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthenticatorMaxAggregateInputType
  }

  export type GetAuthenticatorAggregateType<T extends AuthenticatorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthenticator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthenticator[P]>
      : GetScalarType<T[P], AggregateAuthenticator[P]>
  }




  export type AuthenticatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthenticatorWhereInput
    orderBy?: AuthenticatorOrderByWithAggregationInput | AuthenticatorOrderByWithAggregationInput[]
    by: AuthenticatorScalarFieldEnum[] | AuthenticatorScalarFieldEnum
    having?: AuthenticatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthenticatorCountAggregateInputType | true
    _avg?: AuthenticatorAvgAggregateInputType
    _sum?: AuthenticatorSumAggregateInputType
    _min?: AuthenticatorMinAggregateInputType
    _max?: AuthenticatorMaxAggregateInputType
  }

  export type AuthenticatorGroupByOutputType = {
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports: string | null
    _count: AuthenticatorCountAggregateOutputType | null
    _avg: AuthenticatorAvgAggregateOutputType | null
    _sum: AuthenticatorSumAggregateOutputType | null
    _min: AuthenticatorMinAggregateOutputType | null
    _max: AuthenticatorMaxAggregateOutputType | null
  }

  type GetAuthenticatorGroupByPayload<T extends AuthenticatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthenticatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthenticatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
        }
      >
    >


  export type AuthenticatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authenticator"]>

  export type AuthenticatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authenticator"]>

  export type AuthenticatorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authenticator"]>

  export type AuthenticatorSelectScalar = {
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
  }

  export type AuthenticatorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"credentialID" | "userId" | "providerAccountId" | "credentialPublicKey" | "counter" | "credentialDeviceType" | "credentialBackedUp" | "transports", ExtArgs["result"]["authenticator"]>
  export type AuthenticatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuthenticatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuthenticatorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuthenticatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Authenticator"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      credentialID: string
      userId: string
      providerAccountId: string
      credentialPublicKey: string
      counter: number
      credentialDeviceType: string
      credentialBackedUp: boolean
      transports: string | null
    }, ExtArgs["result"]["authenticator"]>
    composites: {}
  }

  type AuthenticatorGetPayload<S extends boolean | null | undefined | AuthenticatorDefaultArgs> = $Result.GetResult<Prisma.$AuthenticatorPayload, S>

  type AuthenticatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthenticatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthenticatorCountAggregateInputType | true
    }

  export interface AuthenticatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Authenticator'], meta: { name: 'Authenticator' } }
    /**
     * Find zero or one Authenticator that matches the filter.
     * @param {AuthenticatorFindUniqueArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthenticatorFindUniqueArgs>(args: SelectSubset<T, AuthenticatorFindUniqueArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Authenticator that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthenticatorFindUniqueOrThrowArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthenticatorFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthenticatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Authenticator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindFirstArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthenticatorFindFirstArgs>(args?: SelectSubset<T, AuthenticatorFindFirstArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Authenticator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindFirstOrThrowArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthenticatorFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthenticatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Authenticators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authenticators
     * const authenticators = await prisma.authenticator.findMany()
     * 
     * // Get first 10 Authenticators
     * const authenticators = await prisma.authenticator.findMany({ take: 10 })
     * 
     * // Only select the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.findMany({ select: { credentialID: true } })
     * 
     */
    findMany<T extends AuthenticatorFindManyArgs>(args?: SelectSubset<T, AuthenticatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Authenticator.
     * @param {AuthenticatorCreateArgs} args - Arguments to create a Authenticator.
     * @example
     * // Create one Authenticator
     * const Authenticator = await prisma.authenticator.create({
     *   data: {
     *     // ... data to create a Authenticator
     *   }
     * })
     * 
     */
    create<T extends AuthenticatorCreateArgs>(args: SelectSubset<T, AuthenticatorCreateArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Authenticators.
     * @param {AuthenticatorCreateManyArgs} args - Arguments to create many Authenticators.
     * @example
     * // Create many Authenticators
     * const authenticator = await prisma.authenticator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthenticatorCreateManyArgs>(args?: SelectSubset<T, AuthenticatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Authenticators and returns the data saved in the database.
     * @param {AuthenticatorCreateManyAndReturnArgs} args - Arguments to create many Authenticators.
     * @example
     * // Create many Authenticators
     * const authenticator = await prisma.authenticator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Authenticators and only return the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.createManyAndReturn({
     *   select: { credentialID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthenticatorCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthenticatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Authenticator.
     * @param {AuthenticatorDeleteArgs} args - Arguments to delete one Authenticator.
     * @example
     * // Delete one Authenticator
     * const Authenticator = await prisma.authenticator.delete({
     *   where: {
     *     // ... filter to delete one Authenticator
     *   }
     * })
     * 
     */
    delete<T extends AuthenticatorDeleteArgs>(args: SelectSubset<T, AuthenticatorDeleteArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Authenticator.
     * @param {AuthenticatorUpdateArgs} args - Arguments to update one Authenticator.
     * @example
     * // Update one Authenticator
     * const authenticator = await prisma.authenticator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthenticatorUpdateArgs>(args: SelectSubset<T, AuthenticatorUpdateArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Authenticators.
     * @param {AuthenticatorDeleteManyArgs} args - Arguments to filter Authenticators to delete.
     * @example
     * // Delete a few Authenticators
     * const { count } = await prisma.authenticator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthenticatorDeleteManyArgs>(args?: SelectSubset<T, AuthenticatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authenticators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authenticators
     * const authenticator = await prisma.authenticator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthenticatorUpdateManyArgs>(args: SelectSubset<T, AuthenticatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authenticators and returns the data updated in the database.
     * @param {AuthenticatorUpdateManyAndReturnArgs} args - Arguments to update many Authenticators.
     * @example
     * // Update many Authenticators
     * const authenticator = await prisma.authenticator.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Authenticators and only return the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.updateManyAndReturn({
     *   select: { credentialID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthenticatorUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthenticatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Authenticator.
     * @param {AuthenticatorUpsertArgs} args - Arguments to update or create a Authenticator.
     * @example
     * // Update or create a Authenticator
     * const authenticator = await prisma.authenticator.upsert({
     *   create: {
     *     // ... data to create a Authenticator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authenticator we want to update
     *   }
     * })
     */
    upsert<T extends AuthenticatorUpsertArgs>(args: SelectSubset<T, AuthenticatorUpsertArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Authenticators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorCountArgs} args - Arguments to filter Authenticators to count.
     * @example
     * // Count the number of Authenticators
     * const count = await prisma.authenticator.count({
     *   where: {
     *     // ... the filter for the Authenticators we want to count
     *   }
     * })
    **/
    count<T extends AuthenticatorCountArgs>(
      args?: Subset<T, AuthenticatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthenticatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authenticator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthenticatorAggregateArgs>(args: Subset<T, AuthenticatorAggregateArgs>): Prisma.PrismaPromise<GetAuthenticatorAggregateType<T>>

    /**
     * Group by Authenticator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthenticatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthenticatorGroupByArgs['orderBy'] }
        : { orderBy?: AuthenticatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthenticatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthenticatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Authenticator model
   */
  readonly fields: AuthenticatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Authenticator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthenticatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Authenticator model
   */
  interface AuthenticatorFieldRefs {
    readonly credentialID: FieldRef<"Authenticator", 'String'>
    readonly userId: FieldRef<"Authenticator", 'String'>
    readonly providerAccountId: FieldRef<"Authenticator", 'String'>
    readonly credentialPublicKey: FieldRef<"Authenticator", 'String'>
    readonly counter: FieldRef<"Authenticator", 'Int'>
    readonly credentialDeviceType: FieldRef<"Authenticator", 'String'>
    readonly credentialBackedUp: FieldRef<"Authenticator", 'Boolean'>
    readonly transports: FieldRef<"Authenticator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Authenticator findUnique
   */
  export type AuthenticatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator findUniqueOrThrow
   */
  export type AuthenticatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator findFirst
   */
  export type AuthenticatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authenticators.
     */
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * Authenticator findFirstOrThrow
   */
  export type AuthenticatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authenticators.
     */
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * Authenticator findMany
   */
  export type AuthenticatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticators to fetch.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * Authenticator create
   */
  export type AuthenticatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Authenticator.
     */
    data: XOR<AuthenticatorCreateInput, AuthenticatorUncheckedCreateInput>
  }

  /**
   * Authenticator createMany
   */
  export type AuthenticatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Authenticators.
     */
    data: AuthenticatorCreateManyInput | AuthenticatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Authenticator createManyAndReturn
   */
  export type AuthenticatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * The data used to create many Authenticators.
     */
    data: AuthenticatorCreateManyInput | AuthenticatorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Authenticator update
   */
  export type AuthenticatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Authenticator.
     */
    data: XOR<AuthenticatorUpdateInput, AuthenticatorUncheckedUpdateInput>
    /**
     * Choose, which Authenticator to update.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator updateMany
   */
  export type AuthenticatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Authenticators.
     */
    data: XOR<AuthenticatorUpdateManyMutationInput, AuthenticatorUncheckedUpdateManyInput>
    /**
     * Filter which Authenticators to update
     */
    where?: AuthenticatorWhereInput
    /**
     * Limit how many Authenticators to update.
     */
    limit?: number
  }

  /**
   * Authenticator updateManyAndReturn
   */
  export type AuthenticatorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * The data used to update Authenticators.
     */
    data: XOR<AuthenticatorUpdateManyMutationInput, AuthenticatorUncheckedUpdateManyInput>
    /**
     * Filter which Authenticators to update
     */
    where?: AuthenticatorWhereInput
    /**
     * Limit how many Authenticators to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Authenticator upsert
   */
  export type AuthenticatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Authenticator to update in case it exists.
     */
    where: AuthenticatorWhereUniqueInput
    /**
     * In case the Authenticator found by the `where` argument doesn't exist, create a new Authenticator with this data.
     */
    create: XOR<AuthenticatorCreateInput, AuthenticatorUncheckedCreateInput>
    /**
     * In case the Authenticator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthenticatorUpdateInput, AuthenticatorUncheckedUpdateInput>
  }

  /**
   * Authenticator delete
   */
  export type AuthenticatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter which Authenticator to delete.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator deleteMany
   */
  export type AuthenticatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authenticators to delete
     */
    where?: AuthenticatorWhereInput
    /**
     * Limit how many Authenticators to delete.
     */
    limit?: number
  }

  /**
   * Authenticator without action
   */
  export type AuthenticatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Authenticator
     */
    omit?: AuthenticatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
  }


  /**
   * Model Church
   */

  export type AggregateChurch = {
    _count: ChurchCountAggregateOutputType | null
    _min: ChurchMinAggregateOutputType | null
    _max: ChurchMaxAggregateOutputType | null
  }

  export type ChurchMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    description: string | null
    image: string | null
    instagram: string | null
    youtube: string | null
    homepage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    description: string | null
    image: string | null
    instagram: string | null
    youtube: string | null
    homepage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchCountAggregateOutputType = {
    id: number
    name: number
    address: number
    description: number
    image: number
    instagram: number
    youtube: number
    homepage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChurchMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    image?: true
    instagram?: true
    youtube?: true
    homepage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    image?: true
    instagram?: true
    youtube?: true
    homepage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    image?: true
    instagram?: true
    youtube?: true
    homepage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChurchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Church to aggregate.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Churches
    **/
    _count?: true | ChurchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchMaxAggregateInputType
  }

  export type GetChurchAggregateType<T extends ChurchAggregateArgs> = {
        [P in keyof T & keyof AggregateChurch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurch[P]>
      : GetScalarType<T[P], AggregateChurch[P]>
  }




  export type ChurchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchWhereInput
    orderBy?: ChurchOrderByWithAggregationInput | ChurchOrderByWithAggregationInput[]
    by: ChurchScalarFieldEnum[] | ChurchScalarFieldEnum
    having?: ChurchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchCountAggregateInputType | true
    _min?: ChurchMinAggregateInputType
    _max?: ChurchMaxAggregateInputType
  }

  export type ChurchGroupByOutputType = {
    id: string
    name: string
    address: string | null
    description: string | null
    image: string | null
    instagram: string | null
    youtube: string | null
    homepage: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChurchCountAggregateOutputType | null
    _min: ChurchMinAggregateOutputType | null
    _max: ChurchMaxAggregateOutputType | null
  }

  type GetChurchGroupByPayload<T extends ChurchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchGroupByOutputType[P]>
        }
      >
    >


  export type ChurchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    image?: boolean
    instagram?: boolean
    youtube?: boolean
    homepage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Church$membersArgs<ExtArgs>
    ministries?: boolean | Church$ministriesArgs<ExtArgs>
    notices?: boolean | Church$noticesArgs<ExtArgs>
    feeds?: boolean | Church$feedsArgs<ExtArgs>
    _count?: boolean | ChurchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["church"]>

  export type ChurchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    image?: boolean
    instagram?: boolean
    youtube?: boolean
    homepage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["church"]>

  export type ChurchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    image?: boolean
    instagram?: boolean
    youtube?: boolean
    homepage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["church"]>

  export type ChurchSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    image?: boolean
    instagram?: boolean
    youtube?: boolean
    homepage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChurchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "description" | "image" | "instagram" | "youtube" | "homepage" | "createdAt" | "updatedAt", ExtArgs["result"]["church"]>
  export type ChurchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Church$membersArgs<ExtArgs>
    ministries?: boolean | Church$ministriesArgs<ExtArgs>
    notices?: boolean | Church$noticesArgs<ExtArgs>
    feeds?: boolean | Church$feedsArgs<ExtArgs>
    _count?: boolean | ChurchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChurchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChurchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChurchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Church"
    objects: {
      members: Prisma.$ChurchMemberPayload<ExtArgs>[]
      ministries: Prisma.$MinistryPayload<ExtArgs>[]
      notices: Prisma.$ChurchNoticePayload<ExtArgs>[]
      feeds: Prisma.$ChurchFeedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      description: string | null
      image: string | null
      instagram: string | null
      youtube: string | null
      homepage: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["church"]>
    composites: {}
  }

  type ChurchGetPayload<S extends boolean | null | undefined | ChurchDefaultArgs> = $Result.GetResult<Prisma.$ChurchPayload, S>

  type ChurchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchCountAggregateInputType | true
    }

  export interface ChurchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Church'], meta: { name: 'Church' } }
    /**
     * Find zero or one Church that matches the filter.
     * @param {ChurchFindUniqueArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchFindUniqueArgs>(args: SelectSubset<T, ChurchFindUniqueArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Church that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchFindUniqueOrThrowArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Church that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFindFirstArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchFindFirstArgs>(args?: SelectSubset<T, ChurchFindFirstArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Church that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFindFirstOrThrowArgs} args - Arguments to find a Church
     * @example
     * // Get one Church
     * const church = await prisma.church.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Churches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Churches
     * const churches = await prisma.church.findMany()
     * 
     * // Get first 10 Churches
     * const churches = await prisma.church.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchWithIdOnly = await prisma.church.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchFindManyArgs>(args?: SelectSubset<T, ChurchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Church.
     * @param {ChurchCreateArgs} args - Arguments to create a Church.
     * @example
     * // Create one Church
     * const Church = await prisma.church.create({
     *   data: {
     *     // ... data to create a Church
     *   }
     * })
     * 
     */
    create<T extends ChurchCreateArgs>(args: SelectSubset<T, ChurchCreateArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Churches.
     * @param {ChurchCreateManyArgs} args - Arguments to create many Churches.
     * @example
     * // Create many Churches
     * const church = await prisma.church.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchCreateManyArgs>(args?: SelectSubset<T, ChurchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Churches and returns the data saved in the database.
     * @param {ChurchCreateManyAndReturnArgs} args - Arguments to create many Churches.
     * @example
     * // Create many Churches
     * const church = await prisma.church.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Churches and only return the `id`
     * const churchWithIdOnly = await prisma.church.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Church.
     * @param {ChurchDeleteArgs} args - Arguments to delete one Church.
     * @example
     * // Delete one Church
     * const Church = await prisma.church.delete({
     *   where: {
     *     // ... filter to delete one Church
     *   }
     * })
     * 
     */
    delete<T extends ChurchDeleteArgs>(args: SelectSubset<T, ChurchDeleteArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Church.
     * @param {ChurchUpdateArgs} args - Arguments to update one Church.
     * @example
     * // Update one Church
     * const church = await prisma.church.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchUpdateArgs>(args: SelectSubset<T, ChurchUpdateArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Churches.
     * @param {ChurchDeleteManyArgs} args - Arguments to filter Churches to delete.
     * @example
     * // Delete a few Churches
     * const { count } = await prisma.church.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchDeleteManyArgs>(args?: SelectSubset<T, ChurchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Churches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Churches
     * const church = await prisma.church.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchUpdateManyArgs>(args: SelectSubset<T, ChurchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Churches and returns the data updated in the database.
     * @param {ChurchUpdateManyAndReturnArgs} args - Arguments to update many Churches.
     * @example
     * // Update many Churches
     * const church = await prisma.church.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Churches and only return the `id`
     * const churchWithIdOnly = await prisma.church.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Church.
     * @param {ChurchUpsertArgs} args - Arguments to update or create a Church.
     * @example
     * // Update or create a Church
     * const church = await prisma.church.upsert({
     *   create: {
     *     // ... data to create a Church
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Church we want to update
     *   }
     * })
     */
    upsert<T extends ChurchUpsertArgs>(args: SelectSubset<T, ChurchUpsertArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Churches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchCountArgs} args - Arguments to filter Churches to count.
     * @example
     * // Count the number of Churches
     * const count = await prisma.church.count({
     *   where: {
     *     // ... the filter for the Churches we want to count
     *   }
     * })
    **/
    count<T extends ChurchCountArgs>(
      args?: Subset<T, ChurchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Church.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchAggregateArgs>(args: Subset<T, ChurchAggregateArgs>): Prisma.PrismaPromise<GetChurchAggregateType<T>>

    /**
     * Group by Church.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchGroupByArgs['orderBy'] }
        : { orderBy?: ChurchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Church model
   */
  readonly fields: ChurchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Church.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Church$membersArgs<ExtArgs> = {}>(args?: Subset<T, Church$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ministries<T extends Church$ministriesArgs<ExtArgs> = {}>(args?: Subset<T, Church$ministriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notices<T extends Church$noticesArgs<ExtArgs> = {}>(args?: Subset<T, Church$noticesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feeds<T extends Church$feedsArgs<ExtArgs> = {}>(args?: Subset<T, Church$feedsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Church model
   */
  interface ChurchFieldRefs {
    readonly id: FieldRef<"Church", 'String'>
    readonly name: FieldRef<"Church", 'String'>
    readonly address: FieldRef<"Church", 'String'>
    readonly description: FieldRef<"Church", 'String'>
    readonly image: FieldRef<"Church", 'String'>
    readonly instagram: FieldRef<"Church", 'String'>
    readonly youtube: FieldRef<"Church", 'String'>
    readonly homepage: FieldRef<"Church", 'String'>
    readonly createdAt: FieldRef<"Church", 'DateTime'>
    readonly updatedAt: FieldRef<"Church", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Church findUnique
   */
  export type ChurchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church findUniqueOrThrow
   */
  export type ChurchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church findFirst
   */
  export type ChurchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Churches.
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Churches.
     */
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Church findFirstOrThrow
   */
  export type ChurchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Church to fetch.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Churches.
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Churches.
     */
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Church findMany
   */
  export type ChurchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter, which Churches to fetch.
     */
    where?: ChurchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Churches to fetch.
     */
    orderBy?: ChurchOrderByWithRelationInput | ChurchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Churches.
     */
    cursor?: ChurchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Churches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Churches.
     */
    skip?: number
    distinct?: ChurchScalarFieldEnum | ChurchScalarFieldEnum[]
  }

  /**
   * Church create
   */
  export type ChurchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * The data needed to create a Church.
     */
    data: XOR<ChurchCreateInput, ChurchUncheckedCreateInput>
  }

  /**
   * Church createMany
   */
  export type ChurchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Churches.
     */
    data: ChurchCreateManyInput | ChurchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Church createManyAndReturn
   */
  export type ChurchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * The data used to create many Churches.
     */
    data: ChurchCreateManyInput | ChurchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Church update
   */
  export type ChurchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * The data needed to update a Church.
     */
    data: XOR<ChurchUpdateInput, ChurchUncheckedUpdateInput>
    /**
     * Choose, which Church to update.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church updateMany
   */
  export type ChurchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Churches.
     */
    data: XOR<ChurchUpdateManyMutationInput, ChurchUncheckedUpdateManyInput>
    /**
     * Filter which Churches to update
     */
    where?: ChurchWhereInput
    /**
     * Limit how many Churches to update.
     */
    limit?: number
  }

  /**
   * Church updateManyAndReturn
   */
  export type ChurchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * The data used to update Churches.
     */
    data: XOR<ChurchUpdateManyMutationInput, ChurchUncheckedUpdateManyInput>
    /**
     * Filter which Churches to update
     */
    where?: ChurchWhereInput
    /**
     * Limit how many Churches to update.
     */
    limit?: number
  }

  /**
   * Church upsert
   */
  export type ChurchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * The filter to search for the Church to update in case it exists.
     */
    where: ChurchWhereUniqueInput
    /**
     * In case the Church found by the `where` argument doesn't exist, create a new Church with this data.
     */
    create: XOR<ChurchCreateInput, ChurchUncheckedCreateInput>
    /**
     * In case the Church was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchUpdateInput, ChurchUncheckedUpdateInput>
  }

  /**
   * Church delete
   */
  export type ChurchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
    /**
     * Filter which Church to delete.
     */
    where: ChurchWhereUniqueInput
  }

  /**
   * Church deleteMany
   */
  export type ChurchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Churches to delete
     */
    where?: ChurchWhereInput
    /**
     * Limit how many Churches to delete.
     */
    limit?: number
  }

  /**
   * Church.members
   */
  export type Church$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    where?: ChurchMemberWhereInput
    orderBy?: ChurchMemberOrderByWithRelationInput | ChurchMemberOrderByWithRelationInput[]
    cursor?: ChurchMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchMemberScalarFieldEnum | ChurchMemberScalarFieldEnum[]
  }

  /**
   * Church.ministries
   */
  export type Church$ministriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    where?: MinistryWhereInput
    orderBy?: MinistryOrderByWithRelationInput | MinistryOrderByWithRelationInput[]
    cursor?: MinistryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * Church.notices
   */
  export type Church$noticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    where?: ChurchNoticeWhereInput
    orderBy?: ChurchNoticeOrderByWithRelationInput | ChurchNoticeOrderByWithRelationInput[]
    cursor?: ChurchNoticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchNoticeScalarFieldEnum | ChurchNoticeScalarFieldEnum[]
  }

  /**
   * Church.feeds
   */
  export type Church$feedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    where?: ChurchFeedWhereInput
    orderBy?: ChurchFeedOrderByWithRelationInput | ChurchFeedOrderByWithRelationInput[]
    cursor?: ChurchFeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChurchFeedScalarFieldEnum | ChurchFeedScalarFieldEnum[]
  }

  /**
   * Church without action
   */
  export type ChurchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Church
     */
    select?: ChurchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Church
     */
    omit?: ChurchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchInclude<ExtArgs> | null
  }


  /**
   * Model ChurchMember
   */

  export type AggregateChurchMember = {
    _count: ChurchMemberCountAggregateOutputType | null
    _min: ChurchMemberMinAggregateOutputType | null
    _max: ChurchMemberMaxAggregateOutputType | null
  }

  export type ChurchMemberMinAggregateOutputType = {
    id: string | null
    role: $Enums.ChurchRole | null
    userId: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchMemberMaxAggregateOutputType = {
    id: string | null
    role: $Enums.ChurchRole | null
    userId: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchMemberCountAggregateOutputType = {
    id: number
    role: number
    userId: number
    churchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChurchMemberMinAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchMemberMaxAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchMemberCountAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChurchMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchMember to aggregate.
     */
    where?: ChurchMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchMembers to fetch.
     */
    orderBy?: ChurchMemberOrderByWithRelationInput | ChurchMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchMembers
    **/
    _count?: true | ChurchMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchMemberMaxAggregateInputType
  }

  export type GetChurchMemberAggregateType<T extends ChurchMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchMember[P]>
      : GetScalarType<T[P], AggregateChurchMember[P]>
  }




  export type ChurchMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchMemberWhereInput
    orderBy?: ChurchMemberOrderByWithAggregationInput | ChurchMemberOrderByWithAggregationInput[]
    by: ChurchMemberScalarFieldEnum[] | ChurchMemberScalarFieldEnum
    having?: ChurchMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchMemberCountAggregateInputType | true
    _min?: ChurchMemberMinAggregateInputType
    _max?: ChurchMemberMaxAggregateInputType
  }

  export type ChurchMemberGroupByOutputType = {
    id: string
    role: $Enums.ChurchRole
    userId: string
    churchId: string
    createdAt: Date
    updatedAt: Date
    _count: ChurchMemberCountAggregateOutputType | null
    _min: ChurchMemberMinAggregateOutputType | null
    _max: ChurchMemberMaxAggregateOutputType | null
  }

  type GetChurchMemberGroupByPayload<T extends ChurchMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchMemberGroupByOutputType[P]>
        }
      >
    >


  export type ChurchMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchMember"]>

  export type ChurchMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchMember"]>

  export type ChurchMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchMember"]>

  export type ChurchMemberSelectScalar = {
    id?: boolean
    role?: boolean
    userId?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChurchMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "userId" | "churchId" | "createdAt" | "updatedAt", ExtArgs["result"]["churchMember"]>
  export type ChurchMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }
  export type ChurchMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }
  export type ChurchMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }

  export type $ChurchMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      church: Prisma.$ChurchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.ChurchRole
      userId: string
      churchId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["churchMember"]>
    composites: {}
  }

  type ChurchMemberGetPayload<S extends boolean | null | undefined | ChurchMemberDefaultArgs> = $Result.GetResult<Prisma.$ChurchMemberPayload, S>

  type ChurchMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchMemberCountAggregateInputType | true
    }

  export interface ChurchMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchMember'], meta: { name: 'ChurchMember' } }
    /**
     * Find zero or one ChurchMember that matches the filter.
     * @param {ChurchMemberFindUniqueArgs} args - Arguments to find a ChurchMember
     * @example
     * // Get one ChurchMember
     * const churchMember = await prisma.churchMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchMemberFindUniqueArgs>(args: SelectSubset<T, ChurchMemberFindUniqueArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChurchMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchMemberFindUniqueOrThrowArgs} args - Arguments to find a ChurchMember
     * @example
     * // Get one ChurchMember
     * const churchMember = await prisma.churchMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChurchMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberFindFirstArgs} args - Arguments to find a ChurchMember
     * @example
     * // Get one ChurchMember
     * const churchMember = await prisma.churchMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchMemberFindFirstArgs>(args?: SelectSubset<T, ChurchMemberFindFirstArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChurchMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberFindFirstOrThrowArgs} args - Arguments to find a ChurchMember
     * @example
     * // Get one ChurchMember
     * const churchMember = await prisma.churchMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChurchMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchMembers
     * const churchMembers = await prisma.churchMember.findMany()
     * 
     * // Get first 10 ChurchMembers
     * const churchMembers = await prisma.churchMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchMemberWithIdOnly = await prisma.churchMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchMemberFindManyArgs>(args?: SelectSubset<T, ChurchMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChurchMember.
     * @param {ChurchMemberCreateArgs} args - Arguments to create a ChurchMember.
     * @example
     * // Create one ChurchMember
     * const ChurchMember = await prisma.churchMember.create({
     *   data: {
     *     // ... data to create a ChurchMember
     *   }
     * })
     * 
     */
    create<T extends ChurchMemberCreateArgs>(args: SelectSubset<T, ChurchMemberCreateArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChurchMembers.
     * @param {ChurchMemberCreateManyArgs} args - Arguments to create many ChurchMembers.
     * @example
     * // Create many ChurchMembers
     * const churchMember = await prisma.churchMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchMemberCreateManyArgs>(args?: SelectSubset<T, ChurchMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchMembers and returns the data saved in the database.
     * @param {ChurchMemberCreateManyAndReturnArgs} args - Arguments to create many ChurchMembers.
     * @example
     * // Create many ChurchMembers
     * const churchMember = await prisma.churchMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchMembers and only return the `id`
     * const churchMemberWithIdOnly = await prisma.churchMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChurchMember.
     * @param {ChurchMemberDeleteArgs} args - Arguments to delete one ChurchMember.
     * @example
     * // Delete one ChurchMember
     * const ChurchMember = await prisma.churchMember.delete({
     *   where: {
     *     // ... filter to delete one ChurchMember
     *   }
     * })
     * 
     */
    delete<T extends ChurchMemberDeleteArgs>(args: SelectSubset<T, ChurchMemberDeleteArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChurchMember.
     * @param {ChurchMemberUpdateArgs} args - Arguments to update one ChurchMember.
     * @example
     * // Update one ChurchMember
     * const churchMember = await prisma.churchMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchMemberUpdateArgs>(args: SelectSubset<T, ChurchMemberUpdateArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChurchMembers.
     * @param {ChurchMemberDeleteManyArgs} args - Arguments to filter ChurchMembers to delete.
     * @example
     * // Delete a few ChurchMembers
     * const { count } = await prisma.churchMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchMemberDeleteManyArgs>(args?: SelectSubset<T, ChurchMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchMembers
     * const churchMember = await prisma.churchMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchMemberUpdateManyArgs>(args: SelectSubset<T, ChurchMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchMembers and returns the data updated in the database.
     * @param {ChurchMemberUpdateManyAndReturnArgs} args - Arguments to update many ChurchMembers.
     * @example
     * // Update many ChurchMembers
     * const churchMember = await prisma.churchMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchMembers and only return the `id`
     * const churchMemberWithIdOnly = await prisma.churchMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChurchMember.
     * @param {ChurchMemberUpsertArgs} args - Arguments to update or create a ChurchMember.
     * @example
     * // Update or create a ChurchMember
     * const churchMember = await prisma.churchMember.upsert({
     *   create: {
     *     // ... data to create a ChurchMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchMember we want to update
     *   }
     * })
     */
    upsert<T extends ChurchMemberUpsertArgs>(args: SelectSubset<T, ChurchMemberUpsertArgs<ExtArgs>>): Prisma__ChurchMemberClient<$Result.GetResult<Prisma.$ChurchMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChurchMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberCountArgs} args - Arguments to filter ChurchMembers to count.
     * @example
     * // Count the number of ChurchMembers
     * const count = await prisma.churchMember.count({
     *   where: {
     *     // ... the filter for the ChurchMembers we want to count
     *   }
     * })
    **/
    count<T extends ChurchMemberCountArgs>(
      args?: Subset<T, ChurchMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchMemberAggregateArgs>(args: Subset<T, ChurchMemberAggregateArgs>): Prisma.PrismaPromise<GetChurchMemberAggregateType<T>>

    /**
     * Group by ChurchMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchMemberGroupByArgs['orderBy'] }
        : { orderBy?: ChurchMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchMember model
   */
  readonly fields: ChurchMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    church<T extends ChurchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchDefaultArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchMember model
   */
  interface ChurchMemberFieldRefs {
    readonly id: FieldRef<"ChurchMember", 'String'>
    readonly role: FieldRef<"ChurchMember", 'ChurchRole'>
    readonly userId: FieldRef<"ChurchMember", 'String'>
    readonly churchId: FieldRef<"ChurchMember", 'String'>
    readonly createdAt: FieldRef<"ChurchMember", 'DateTime'>
    readonly updatedAt: FieldRef<"ChurchMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChurchMember findUnique
   */
  export type ChurchMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * Filter, which ChurchMember to fetch.
     */
    where: ChurchMemberWhereUniqueInput
  }

  /**
   * ChurchMember findUniqueOrThrow
   */
  export type ChurchMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * Filter, which ChurchMember to fetch.
     */
    where: ChurchMemberWhereUniqueInput
  }

  /**
   * ChurchMember findFirst
   */
  export type ChurchMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * Filter, which ChurchMember to fetch.
     */
    where?: ChurchMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchMembers to fetch.
     */
    orderBy?: ChurchMemberOrderByWithRelationInput | ChurchMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchMembers.
     */
    cursor?: ChurchMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchMembers.
     */
    distinct?: ChurchMemberScalarFieldEnum | ChurchMemberScalarFieldEnum[]
  }

  /**
   * ChurchMember findFirstOrThrow
   */
  export type ChurchMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * Filter, which ChurchMember to fetch.
     */
    where?: ChurchMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchMembers to fetch.
     */
    orderBy?: ChurchMemberOrderByWithRelationInput | ChurchMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchMembers.
     */
    cursor?: ChurchMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchMembers.
     */
    distinct?: ChurchMemberScalarFieldEnum | ChurchMemberScalarFieldEnum[]
  }

  /**
   * ChurchMember findMany
   */
  export type ChurchMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * Filter, which ChurchMembers to fetch.
     */
    where?: ChurchMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchMembers to fetch.
     */
    orderBy?: ChurchMemberOrderByWithRelationInput | ChurchMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchMembers.
     */
    cursor?: ChurchMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchMembers.
     */
    skip?: number
    distinct?: ChurchMemberScalarFieldEnum | ChurchMemberScalarFieldEnum[]
  }

  /**
   * ChurchMember create
   */
  export type ChurchMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchMember.
     */
    data: XOR<ChurchMemberCreateInput, ChurchMemberUncheckedCreateInput>
  }

  /**
   * ChurchMember createMany
   */
  export type ChurchMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchMembers.
     */
    data: ChurchMemberCreateManyInput | ChurchMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchMember createManyAndReturn
   */
  export type ChurchMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchMembers.
     */
    data: ChurchMemberCreateManyInput | ChurchMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchMember update
   */
  export type ChurchMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchMember.
     */
    data: XOR<ChurchMemberUpdateInput, ChurchMemberUncheckedUpdateInput>
    /**
     * Choose, which ChurchMember to update.
     */
    where: ChurchMemberWhereUniqueInput
  }

  /**
   * ChurchMember updateMany
   */
  export type ChurchMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchMembers.
     */
    data: XOR<ChurchMemberUpdateManyMutationInput, ChurchMemberUncheckedUpdateManyInput>
    /**
     * Filter which ChurchMembers to update
     */
    where?: ChurchMemberWhereInput
    /**
     * Limit how many ChurchMembers to update.
     */
    limit?: number
  }

  /**
   * ChurchMember updateManyAndReturn
   */
  export type ChurchMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * The data used to update ChurchMembers.
     */
    data: XOR<ChurchMemberUpdateManyMutationInput, ChurchMemberUncheckedUpdateManyInput>
    /**
     * Filter which ChurchMembers to update
     */
    where?: ChurchMemberWhereInput
    /**
     * Limit how many ChurchMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchMember upsert
   */
  export type ChurchMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchMember to update in case it exists.
     */
    where: ChurchMemberWhereUniqueInput
    /**
     * In case the ChurchMember found by the `where` argument doesn't exist, create a new ChurchMember with this data.
     */
    create: XOR<ChurchMemberCreateInput, ChurchMemberUncheckedCreateInput>
    /**
     * In case the ChurchMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchMemberUpdateInput, ChurchMemberUncheckedUpdateInput>
  }

  /**
   * ChurchMember delete
   */
  export type ChurchMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
    /**
     * Filter which ChurchMember to delete.
     */
    where: ChurchMemberWhereUniqueInput
  }

  /**
   * ChurchMember deleteMany
   */
  export type ChurchMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchMembers to delete
     */
    where?: ChurchMemberWhereInput
    /**
     * Limit how many ChurchMembers to delete.
     */
    limit?: number
  }

  /**
   * ChurchMember without action
   */
  export type ChurchMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchMember
     */
    select?: ChurchMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchMember
     */
    omit?: ChurchMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchMemberInclude<ExtArgs> | null
  }


  /**
   * Model Ministry
   */

  export type AggregateMinistry = {
    _count: MinistryCountAggregateOutputType | null
    _min: MinistryMinAggregateOutputType | null
    _max: MinistryMaxAggregateOutputType | null
  }

  export type MinistryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    churchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MinistryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MinistryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ministry to aggregate.
     */
    where?: MinistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ministries to fetch.
     */
    orderBy?: MinistryOrderByWithRelationInput | MinistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ministries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ministries
    **/
    _count?: true | MinistryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryMaxAggregateInputType
  }

  export type GetMinistryAggregateType<T extends MinistryAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistry[P]>
      : GetScalarType<T[P], AggregateMinistry[P]>
  }




  export type MinistryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryWhereInput
    orderBy?: MinistryOrderByWithAggregationInput | MinistryOrderByWithAggregationInput[]
    by: MinistryScalarFieldEnum[] | MinistryScalarFieldEnum
    having?: MinistryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryCountAggregateInputType | true
    _min?: MinistryMinAggregateInputType
    _max?: MinistryMaxAggregateInputType
  }

  export type MinistryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    churchId: string
    createdAt: Date
    updatedAt: Date
    _count: MinistryCountAggregateOutputType | null
    _min: MinistryMinAggregateOutputType | null
    _max: MinistryMaxAggregateOutputType | null
  }

  type GetMinistryGroupByPayload<T extends MinistryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryGroupByOutputType[P]>
        }
      >
    >


  export type MinistrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    members?: boolean | Ministry$membersArgs<ExtArgs>
    notices?: boolean | Ministry$noticesArgs<ExtArgs>
    schedules?: boolean | Ministry$schedulesArgs<ExtArgs>
    announcements?: boolean | Ministry$announcementsArgs<ExtArgs>
    positions?: boolean | Ministry$positionsArgs<ExtArgs>
    files?: boolean | Ministry$filesArgs<ExtArgs>
    _count?: boolean | MinistryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministry"]>

  export type MinistrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministry"]>

  export type MinistrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministry"]>

  export type MinistrySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MinistryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "churchId" | "createdAt" | "updatedAt", ExtArgs["result"]["ministry"]>
  export type MinistryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    members?: boolean | Ministry$membersArgs<ExtArgs>
    notices?: boolean | Ministry$noticesArgs<ExtArgs>
    schedules?: boolean | Ministry$schedulesArgs<ExtArgs>
    announcements?: boolean | Ministry$announcementsArgs<ExtArgs>
    positions?: boolean | Ministry$positionsArgs<ExtArgs>
    files?: boolean | Ministry$filesArgs<ExtArgs>
    _count?: boolean | MinistryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MinistryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }
  export type MinistryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }

  export type $MinistryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ministry"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs>
      members: Prisma.$MinistryMemberPayload<ExtArgs>[]
      notices: Prisma.$MinistryNoticePayload<ExtArgs>[]
      schedules: Prisma.$MinistrySchedulePayload<ExtArgs>[]
      announcements: Prisma.$MinistryAnnouncementPayload<ExtArgs>[]
      positions: Prisma.$MinistryPositionPayload<ExtArgs>[]
      files: Prisma.$MinistryFilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      churchId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ministry"]>
    composites: {}
  }

  type MinistryGetPayload<S extends boolean | null | undefined | MinistryDefaultArgs> = $Result.GetResult<Prisma.$MinistryPayload, S>

  type MinistryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryCountAggregateInputType | true
    }

  export interface MinistryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ministry'], meta: { name: 'Ministry' } }
    /**
     * Find zero or one Ministry that matches the filter.
     * @param {MinistryFindUniqueArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryFindUniqueArgs>(args: SelectSubset<T, MinistryFindUniqueArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ministry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryFindUniqueOrThrowArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ministry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFindFirstArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryFindFirstArgs>(args?: SelectSubset<T, MinistryFindFirstArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ministry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFindFirstOrThrowArgs} args - Arguments to find a Ministry
     * @example
     * // Get one Ministry
     * const ministry = await prisma.ministry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ministries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ministries
     * const ministries = await prisma.ministry.findMany()
     * 
     * // Get first 10 Ministries
     * const ministries = await prisma.ministry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryWithIdOnly = await prisma.ministry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryFindManyArgs>(args?: SelectSubset<T, MinistryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ministry.
     * @param {MinistryCreateArgs} args - Arguments to create a Ministry.
     * @example
     * // Create one Ministry
     * const Ministry = await prisma.ministry.create({
     *   data: {
     *     // ... data to create a Ministry
     *   }
     * })
     * 
     */
    create<T extends MinistryCreateArgs>(args: SelectSubset<T, MinistryCreateArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ministries.
     * @param {MinistryCreateManyArgs} args - Arguments to create many Ministries.
     * @example
     * // Create many Ministries
     * const ministry = await prisma.ministry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryCreateManyArgs>(args?: SelectSubset<T, MinistryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ministries and returns the data saved in the database.
     * @param {MinistryCreateManyAndReturnArgs} args - Arguments to create many Ministries.
     * @example
     * // Create many Ministries
     * const ministry = await prisma.ministry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ministries and only return the `id`
     * const ministryWithIdOnly = await prisma.ministry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ministry.
     * @param {MinistryDeleteArgs} args - Arguments to delete one Ministry.
     * @example
     * // Delete one Ministry
     * const Ministry = await prisma.ministry.delete({
     *   where: {
     *     // ... filter to delete one Ministry
     *   }
     * })
     * 
     */
    delete<T extends MinistryDeleteArgs>(args: SelectSubset<T, MinistryDeleteArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ministry.
     * @param {MinistryUpdateArgs} args - Arguments to update one Ministry.
     * @example
     * // Update one Ministry
     * const ministry = await prisma.ministry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryUpdateArgs>(args: SelectSubset<T, MinistryUpdateArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ministries.
     * @param {MinistryDeleteManyArgs} args - Arguments to filter Ministries to delete.
     * @example
     * // Delete a few Ministries
     * const { count } = await prisma.ministry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryDeleteManyArgs>(args?: SelectSubset<T, MinistryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ministries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ministries
     * const ministry = await prisma.ministry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryUpdateManyArgs>(args: SelectSubset<T, MinistryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ministries and returns the data updated in the database.
     * @param {MinistryUpdateManyAndReturnArgs} args - Arguments to update many Ministries.
     * @example
     * // Update many Ministries
     * const ministry = await prisma.ministry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ministries and only return the `id`
     * const ministryWithIdOnly = await prisma.ministry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ministry.
     * @param {MinistryUpsertArgs} args - Arguments to update or create a Ministry.
     * @example
     * // Update or create a Ministry
     * const ministry = await prisma.ministry.upsert({
     *   create: {
     *     // ... data to create a Ministry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ministry we want to update
     *   }
     * })
     */
    upsert<T extends MinistryUpsertArgs>(args: SelectSubset<T, MinistryUpsertArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ministries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryCountArgs} args - Arguments to filter Ministries to count.
     * @example
     * // Count the number of Ministries
     * const count = await prisma.ministry.count({
     *   where: {
     *     // ... the filter for the Ministries we want to count
     *   }
     * })
    **/
    count<T extends MinistryCountArgs>(
      args?: Subset<T, MinistryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ministry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryAggregateArgs>(args: Subset<T, MinistryAggregateArgs>): Prisma.PrismaPromise<GetMinistryAggregateType<T>>

    /**
     * Group by Ministry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryGroupByArgs['orderBy'] }
        : { orderBy?: MinistryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ministry model
   */
  readonly fields: MinistryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ministry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends ChurchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchDefaultArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Ministry$membersArgs<ExtArgs> = {}>(args?: Subset<T, Ministry$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notices<T extends Ministry$noticesArgs<ExtArgs> = {}>(args?: Subset<T, Ministry$noticesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends Ministry$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Ministry$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    announcements<T extends Ministry$announcementsArgs<ExtArgs> = {}>(args?: Subset<T, Ministry$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    positions<T extends Ministry$positionsArgs<ExtArgs> = {}>(args?: Subset<T, Ministry$positionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Ministry$filesArgs<ExtArgs> = {}>(args?: Subset<T, Ministry$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ministry model
   */
  interface MinistryFieldRefs {
    readonly id: FieldRef<"Ministry", 'String'>
    readonly name: FieldRef<"Ministry", 'String'>
    readonly description: FieldRef<"Ministry", 'String'>
    readonly churchId: FieldRef<"Ministry", 'String'>
    readonly createdAt: FieldRef<"Ministry", 'DateTime'>
    readonly updatedAt: FieldRef<"Ministry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ministry findUnique
   */
  export type MinistryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * Filter, which Ministry to fetch.
     */
    where: MinistryWhereUniqueInput
  }

  /**
   * Ministry findUniqueOrThrow
   */
  export type MinistryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * Filter, which Ministry to fetch.
     */
    where: MinistryWhereUniqueInput
  }

  /**
   * Ministry findFirst
   */
  export type MinistryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * Filter, which Ministry to fetch.
     */
    where?: MinistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ministries to fetch.
     */
    orderBy?: MinistryOrderByWithRelationInput | MinistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ministries.
     */
    cursor?: MinistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ministries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ministries.
     */
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * Ministry findFirstOrThrow
   */
  export type MinistryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * Filter, which Ministry to fetch.
     */
    where?: MinistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ministries to fetch.
     */
    orderBy?: MinistryOrderByWithRelationInput | MinistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ministries.
     */
    cursor?: MinistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ministries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ministries.
     */
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * Ministry findMany
   */
  export type MinistryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * Filter, which Ministries to fetch.
     */
    where?: MinistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ministries to fetch.
     */
    orderBy?: MinistryOrderByWithRelationInput | MinistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ministries.
     */
    cursor?: MinistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ministries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ministries.
     */
    skip?: number
    distinct?: MinistryScalarFieldEnum | MinistryScalarFieldEnum[]
  }

  /**
   * Ministry create
   */
  export type MinistryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * The data needed to create a Ministry.
     */
    data: XOR<MinistryCreateInput, MinistryUncheckedCreateInput>
  }

  /**
   * Ministry createMany
   */
  export type MinistryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ministries.
     */
    data: MinistryCreateManyInput | MinistryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ministry createManyAndReturn
   */
  export type MinistryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * The data used to create many Ministries.
     */
    data: MinistryCreateManyInput | MinistryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ministry update
   */
  export type MinistryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * The data needed to update a Ministry.
     */
    data: XOR<MinistryUpdateInput, MinistryUncheckedUpdateInput>
    /**
     * Choose, which Ministry to update.
     */
    where: MinistryWhereUniqueInput
  }

  /**
   * Ministry updateMany
   */
  export type MinistryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ministries.
     */
    data: XOR<MinistryUpdateManyMutationInput, MinistryUncheckedUpdateManyInput>
    /**
     * Filter which Ministries to update
     */
    where?: MinistryWhereInput
    /**
     * Limit how many Ministries to update.
     */
    limit?: number
  }

  /**
   * Ministry updateManyAndReturn
   */
  export type MinistryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * The data used to update Ministries.
     */
    data: XOR<MinistryUpdateManyMutationInput, MinistryUncheckedUpdateManyInput>
    /**
     * Filter which Ministries to update
     */
    where?: MinistryWhereInput
    /**
     * Limit how many Ministries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ministry upsert
   */
  export type MinistryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * The filter to search for the Ministry to update in case it exists.
     */
    where: MinistryWhereUniqueInput
    /**
     * In case the Ministry found by the `where` argument doesn't exist, create a new Ministry with this data.
     */
    create: XOR<MinistryCreateInput, MinistryUncheckedCreateInput>
    /**
     * In case the Ministry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryUpdateInput, MinistryUncheckedUpdateInput>
  }

  /**
   * Ministry delete
   */
  export type MinistryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
    /**
     * Filter which Ministry to delete.
     */
    where: MinistryWhereUniqueInput
  }

  /**
   * Ministry deleteMany
   */
  export type MinistryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ministries to delete
     */
    where?: MinistryWhereInput
    /**
     * Limit how many Ministries to delete.
     */
    limit?: number
  }

  /**
   * Ministry.members
   */
  export type Ministry$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    where?: MinistryMemberWhereInput
    orderBy?: MinistryMemberOrderByWithRelationInput | MinistryMemberOrderByWithRelationInput[]
    cursor?: MinistryMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryMemberScalarFieldEnum | MinistryMemberScalarFieldEnum[]
  }

  /**
   * Ministry.notices
   */
  export type Ministry$noticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    where?: MinistryNoticeWhereInput
    orderBy?: MinistryNoticeOrderByWithRelationInput | MinistryNoticeOrderByWithRelationInput[]
    cursor?: MinistryNoticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryNoticeScalarFieldEnum | MinistryNoticeScalarFieldEnum[]
  }

  /**
   * Ministry.schedules
   */
  export type Ministry$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    where?: MinistryScheduleWhereInput
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    cursor?: MinistryScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryScheduleScalarFieldEnum | MinistryScheduleScalarFieldEnum[]
  }

  /**
   * Ministry.announcements
   */
  export type Ministry$announcementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    where?: MinistryAnnouncementWhereInput
    orderBy?: MinistryAnnouncementOrderByWithRelationInput | MinistryAnnouncementOrderByWithRelationInput[]
    cursor?: MinistryAnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryAnnouncementScalarFieldEnum | MinistryAnnouncementScalarFieldEnum[]
  }

  /**
   * Ministry.positions
   */
  export type Ministry$positionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    where?: MinistryPositionWhereInput
    orderBy?: MinistryPositionOrderByWithRelationInput | MinistryPositionOrderByWithRelationInput[]
    cursor?: MinistryPositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryPositionScalarFieldEnum | MinistryPositionScalarFieldEnum[]
  }

  /**
   * Ministry.files
   */
  export type Ministry$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    where?: MinistryFileWhereInput
    orderBy?: MinistryFileOrderByWithRelationInput | MinistryFileOrderByWithRelationInput[]
    cursor?: MinistryFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryFileScalarFieldEnum | MinistryFileScalarFieldEnum[]
  }

  /**
   * Ministry without action
   */
  export type MinistryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ministry
     */
    select?: MinistrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ministry
     */
    omit?: MinistryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryInclude<ExtArgs> | null
  }


  /**
   * Model MinistryMember
   */

  export type AggregateMinistryMember = {
    _count: MinistryMemberCountAggregateOutputType | null
    _min: MinistryMemberMinAggregateOutputType | null
    _max: MinistryMemberMaxAggregateOutputType | null
  }

  export type MinistryMemberMinAggregateOutputType = {
    id: string | null
    role: $Enums.MinistryRole | null
    userId: string | null
    ministryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryMemberMaxAggregateOutputType = {
    id: string | null
    role: $Enums.MinistryRole | null
    userId: string | null
    ministryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryMemberCountAggregateOutputType = {
    id: number
    role: number
    userId: number
    ministryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MinistryMemberMinAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    ministryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryMemberMaxAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    ministryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryMemberCountAggregateInputType = {
    id?: true
    role?: true
    userId?: true
    ministryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MinistryMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryMember to aggregate.
     */
    where?: MinistryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryMembers to fetch.
     */
    orderBy?: MinistryMemberOrderByWithRelationInput | MinistryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistryMembers
    **/
    _count?: true | MinistryMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryMemberMaxAggregateInputType
  }

  export type GetMinistryMemberAggregateType<T extends MinistryMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistryMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistryMember[P]>
      : GetScalarType<T[P], AggregateMinistryMember[P]>
  }




  export type MinistryMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryMemberWhereInput
    orderBy?: MinistryMemberOrderByWithAggregationInput | MinistryMemberOrderByWithAggregationInput[]
    by: MinistryMemberScalarFieldEnum[] | MinistryMemberScalarFieldEnum
    having?: MinistryMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryMemberCountAggregateInputType | true
    _min?: MinistryMemberMinAggregateInputType
    _max?: MinistryMemberMaxAggregateInputType
  }

  export type MinistryMemberGroupByOutputType = {
    id: string
    role: $Enums.MinistryRole
    userId: string
    ministryId: string
    createdAt: Date
    updatedAt: Date
    _count: MinistryMemberCountAggregateOutputType | null
    _min: MinistryMemberMinAggregateOutputType | null
    _max: MinistryMemberMaxAggregateOutputType | null
  }

  type GetMinistryMemberGroupByPayload<T extends MinistryMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryMemberGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryMemberGroupByOutputType[P]>
        }
      >
    >


  export type MinistryMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryMember"]>

  export type MinistryMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryMember"]>

  export type MinistryMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    userId?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryMember"]>

  export type MinistryMemberSelectScalar = {
    id?: boolean
    role?: boolean
    userId?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MinistryMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "userId" | "ministryId" | "createdAt" | "updatedAt", ExtArgs["result"]["ministryMember"]>
  export type MinistryMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }
  export type MinistryMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }
  export type MinistryMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }

  export type $MinistryMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistryMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      ministry: Prisma.$MinistryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.MinistryRole
      userId: string
      ministryId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ministryMember"]>
    composites: {}
  }

  type MinistryMemberGetPayload<S extends boolean | null | undefined | MinistryMemberDefaultArgs> = $Result.GetResult<Prisma.$MinistryMemberPayload, S>

  type MinistryMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryMemberCountAggregateInputType | true
    }

  export interface MinistryMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistryMember'], meta: { name: 'MinistryMember' } }
    /**
     * Find zero or one MinistryMember that matches the filter.
     * @param {MinistryMemberFindUniqueArgs} args - Arguments to find a MinistryMember
     * @example
     * // Get one MinistryMember
     * const ministryMember = await prisma.ministryMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryMemberFindUniqueArgs>(args: SelectSubset<T, MinistryMemberFindUniqueArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistryMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryMemberFindUniqueOrThrowArgs} args - Arguments to find a MinistryMember
     * @example
     * // Get one MinistryMember
     * const ministryMember = await prisma.ministryMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberFindFirstArgs} args - Arguments to find a MinistryMember
     * @example
     * // Get one MinistryMember
     * const ministryMember = await prisma.ministryMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryMemberFindFirstArgs>(args?: SelectSubset<T, MinistryMemberFindFirstArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberFindFirstOrThrowArgs} args - Arguments to find a MinistryMember
     * @example
     * // Get one MinistryMember
     * const ministryMember = await prisma.ministryMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistryMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistryMembers
     * const ministryMembers = await prisma.ministryMember.findMany()
     * 
     * // Get first 10 MinistryMembers
     * const ministryMembers = await prisma.ministryMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryMemberWithIdOnly = await prisma.ministryMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryMemberFindManyArgs>(args?: SelectSubset<T, MinistryMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistryMember.
     * @param {MinistryMemberCreateArgs} args - Arguments to create a MinistryMember.
     * @example
     * // Create one MinistryMember
     * const MinistryMember = await prisma.ministryMember.create({
     *   data: {
     *     // ... data to create a MinistryMember
     *   }
     * })
     * 
     */
    create<T extends MinistryMemberCreateArgs>(args: SelectSubset<T, MinistryMemberCreateArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistryMembers.
     * @param {MinistryMemberCreateManyArgs} args - Arguments to create many MinistryMembers.
     * @example
     * // Create many MinistryMembers
     * const ministryMember = await prisma.ministryMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryMemberCreateManyArgs>(args?: SelectSubset<T, MinistryMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistryMembers and returns the data saved in the database.
     * @param {MinistryMemberCreateManyAndReturnArgs} args - Arguments to create many MinistryMembers.
     * @example
     * // Create many MinistryMembers
     * const ministryMember = await prisma.ministryMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistryMembers and only return the `id`
     * const ministryMemberWithIdOnly = await prisma.ministryMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistryMember.
     * @param {MinistryMemberDeleteArgs} args - Arguments to delete one MinistryMember.
     * @example
     * // Delete one MinistryMember
     * const MinistryMember = await prisma.ministryMember.delete({
     *   where: {
     *     // ... filter to delete one MinistryMember
     *   }
     * })
     * 
     */
    delete<T extends MinistryMemberDeleteArgs>(args: SelectSubset<T, MinistryMemberDeleteArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistryMember.
     * @param {MinistryMemberUpdateArgs} args - Arguments to update one MinistryMember.
     * @example
     * // Update one MinistryMember
     * const ministryMember = await prisma.ministryMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryMemberUpdateArgs>(args: SelectSubset<T, MinistryMemberUpdateArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistryMembers.
     * @param {MinistryMemberDeleteManyArgs} args - Arguments to filter MinistryMembers to delete.
     * @example
     * // Delete a few MinistryMembers
     * const { count } = await prisma.ministryMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryMemberDeleteManyArgs>(args?: SelectSubset<T, MinistryMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistryMembers
     * const ministryMember = await prisma.ministryMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryMemberUpdateManyArgs>(args: SelectSubset<T, MinistryMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryMembers and returns the data updated in the database.
     * @param {MinistryMemberUpdateManyAndReturnArgs} args - Arguments to update many MinistryMembers.
     * @example
     * // Update many MinistryMembers
     * const ministryMember = await prisma.ministryMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistryMembers and only return the `id`
     * const ministryMemberWithIdOnly = await prisma.ministryMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistryMember.
     * @param {MinistryMemberUpsertArgs} args - Arguments to update or create a MinistryMember.
     * @example
     * // Update or create a MinistryMember
     * const ministryMember = await prisma.ministryMember.upsert({
     *   create: {
     *     // ... data to create a MinistryMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistryMember we want to update
     *   }
     * })
     */
    upsert<T extends MinistryMemberUpsertArgs>(args: SelectSubset<T, MinistryMemberUpsertArgs<ExtArgs>>): Prisma__MinistryMemberClient<$Result.GetResult<Prisma.$MinistryMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistryMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberCountArgs} args - Arguments to filter MinistryMembers to count.
     * @example
     * // Count the number of MinistryMembers
     * const count = await prisma.ministryMember.count({
     *   where: {
     *     // ... the filter for the MinistryMembers we want to count
     *   }
     * })
    **/
    count<T extends MinistryMemberCountArgs>(
      args?: Subset<T, MinistryMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistryMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryMemberAggregateArgs>(args: Subset<T, MinistryMemberAggregateArgs>): Prisma.PrismaPromise<GetMinistryMemberAggregateType<T>>

    /**
     * Group by MinistryMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryMemberGroupByArgs['orderBy'] }
        : { orderBy?: MinistryMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistryMember model
   */
  readonly fields: MinistryMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistryMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ministry<T extends MinistryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryDefaultArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistryMember model
   */
  interface MinistryMemberFieldRefs {
    readonly id: FieldRef<"MinistryMember", 'String'>
    readonly role: FieldRef<"MinistryMember", 'MinistryRole'>
    readonly userId: FieldRef<"MinistryMember", 'String'>
    readonly ministryId: FieldRef<"MinistryMember", 'String'>
    readonly createdAt: FieldRef<"MinistryMember", 'DateTime'>
    readonly updatedAt: FieldRef<"MinistryMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MinistryMember findUnique
   */
  export type MinistryMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * Filter, which MinistryMember to fetch.
     */
    where: MinistryMemberWhereUniqueInput
  }

  /**
   * MinistryMember findUniqueOrThrow
   */
  export type MinistryMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * Filter, which MinistryMember to fetch.
     */
    where: MinistryMemberWhereUniqueInput
  }

  /**
   * MinistryMember findFirst
   */
  export type MinistryMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * Filter, which MinistryMember to fetch.
     */
    where?: MinistryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryMembers to fetch.
     */
    orderBy?: MinistryMemberOrderByWithRelationInput | MinistryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryMembers.
     */
    cursor?: MinistryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryMembers.
     */
    distinct?: MinistryMemberScalarFieldEnum | MinistryMemberScalarFieldEnum[]
  }

  /**
   * MinistryMember findFirstOrThrow
   */
  export type MinistryMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * Filter, which MinistryMember to fetch.
     */
    where?: MinistryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryMembers to fetch.
     */
    orderBy?: MinistryMemberOrderByWithRelationInput | MinistryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryMembers.
     */
    cursor?: MinistryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryMembers.
     */
    distinct?: MinistryMemberScalarFieldEnum | MinistryMemberScalarFieldEnum[]
  }

  /**
   * MinistryMember findMany
   */
  export type MinistryMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * Filter, which MinistryMembers to fetch.
     */
    where?: MinistryMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryMembers to fetch.
     */
    orderBy?: MinistryMemberOrderByWithRelationInput | MinistryMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistryMembers.
     */
    cursor?: MinistryMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryMembers.
     */
    skip?: number
    distinct?: MinistryMemberScalarFieldEnum | MinistryMemberScalarFieldEnum[]
  }

  /**
   * MinistryMember create
   */
  export type MinistryMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistryMember.
     */
    data: XOR<MinistryMemberCreateInput, MinistryMemberUncheckedCreateInput>
  }

  /**
   * MinistryMember createMany
   */
  export type MinistryMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistryMembers.
     */
    data: MinistryMemberCreateManyInput | MinistryMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistryMember createManyAndReturn
   */
  export type MinistryMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * The data used to create many MinistryMembers.
     */
    data: MinistryMemberCreateManyInput | MinistryMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryMember update
   */
  export type MinistryMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistryMember.
     */
    data: XOR<MinistryMemberUpdateInput, MinistryMemberUncheckedUpdateInput>
    /**
     * Choose, which MinistryMember to update.
     */
    where: MinistryMemberWhereUniqueInput
  }

  /**
   * MinistryMember updateMany
   */
  export type MinistryMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistryMembers.
     */
    data: XOR<MinistryMemberUpdateManyMutationInput, MinistryMemberUncheckedUpdateManyInput>
    /**
     * Filter which MinistryMembers to update
     */
    where?: MinistryMemberWhereInput
    /**
     * Limit how many MinistryMembers to update.
     */
    limit?: number
  }

  /**
   * MinistryMember updateManyAndReturn
   */
  export type MinistryMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * The data used to update MinistryMembers.
     */
    data: XOR<MinistryMemberUpdateManyMutationInput, MinistryMemberUncheckedUpdateManyInput>
    /**
     * Filter which MinistryMembers to update
     */
    where?: MinistryMemberWhereInput
    /**
     * Limit how many MinistryMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryMember upsert
   */
  export type MinistryMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistryMember to update in case it exists.
     */
    where: MinistryMemberWhereUniqueInput
    /**
     * In case the MinistryMember found by the `where` argument doesn't exist, create a new MinistryMember with this data.
     */
    create: XOR<MinistryMemberCreateInput, MinistryMemberUncheckedCreateInput>
    /**
     * In case the MinistryMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryMemberUpdateInput, MinistryMemberUncheckedUpdateInput>
  }

  /**
   * MinistryMember delete
   */
  export type MinistryMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
    /**
     * Filter which MinistryMember to delete.
     */
    where: MinistryMemberWhereUniqueInput
  }

  /**
   * MinistryMember deleteMany
   */
  export type MinistryMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryMembers to delete
     */
    where?: MinistryMemberWhereInput
    /**
     * Limit how many MinistryMembers to delete.
     */
    limit?: number
  }

  /**
   * MinistryMember without action
   */
  export type MinistryMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryMember
     */
    select?: MinistryMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryMember
     */
    omit?: MinistryMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryMemberInclude<ExtArgs> | null
  }


  /**
   * Model ChurchNotice
   */

  export type AggregateChurchNotice = {
    _count: ChurchNoticeCountAggregateOutputType | null
    _min: ChurchNoticeMinAggregateOutputType | null
    _max: ChurchNoticeMaxAggregateOutputType | null
  }

  export type ChurchNoticeMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isImportant: boolean | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchNoticeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isImportant: boolean | null
    churchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchNoticeCountAggregateOutputType = {
    id: number
    title: number
    content: number
    isImportant: number
    churchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChurchNoticeMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isImportant?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchNoticeMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isImportant?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchNoticeCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isImportant?: true
    churchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChurchNoticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchNotice to aggregate.
     */
    where?: ChurchNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchNotices to fetch.
     */
    orderBy?: ChurchNoticeOrderByWithRelationInput | ChurchNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchNotices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchNotices
    **/
    _count?: true | ChurchNoticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchNoticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchNoticeMaxAggregateInputType
  }

  export type GetChurchNoticeAggregateType<T extends ChurchNoticeAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchNotice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchNotice[P]>
      : GetScalarType<T[P], AggregateChurchNotice[P]>
  }




  export type ChurchNoticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchNoticeWhereInput
    orderBy?: ChurchNoticeOrderByWithAggregationInput | ChurchNoticeOrderByWithAggregationInput[]
    by: ChurchNoticeScalarFieldEnum[] | ChurchNoticeScalarFieldEnum
    having?: ChurchNoticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchNoticeCountAggregateInputType | true
    _min?: ChurchNoticeMinAggregateInputType
    _max?: ChurchNoticeMaxAggregateInputType
  }

  export type ChurchNoticeGroupByOutputType = {
    id: string
    title: string
    content: string
    isImportant: boolean
    churchId: string
    createdAt: Date
    updatedAt: Date
    _count: ChurchNoticeCountAggregateOutputType | null
    _min: ChurchNoticeMinAggregateOutputType | null
    _max: ChurchNoticeMaxAggregateOutputType | null
  }

  type GetChurchNoticeGroupByPayload<T extends ChurchNoticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchNoticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchNoticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchNoticeGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchNoticeGroupByOutputType[P]>
        }
      >
    >


  export type ChurchNoticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchNotice"]>

  export type ChurchNoticeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchNotice"]>

  export type ChurchNoticeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchNotice"]>

  export type ChurchNoticeSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    churchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChurchNoticeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "isImportant" | "churchId" | "createdAt" | "updatedAt", ExtArgs["result"]["churchNotice"]>
  export type ChurchNoticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }
  export type ChurchNoticeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }
  export type ChurchNoticeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
  }

  export type $ChurchNoticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchNotice"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      isImportant: boolean
      churchId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["churchNotice"]>
    composites: {}
  }

  type ChurchNoticeGetPayload<S extends boolean | null | undefined | ChurchNoticeDefaultArgs> = $Result.GetResult<Prisma.$ChurchNoticePayload, S>

  type ChurchNoticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchNoticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchNoticeCountAggregateInputType | true
    }

  export interface ChurchNoticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchNotice'], meta: { name: 'ChurchNotice' } }
    /**
     * Find zero or one ChurchNotice that matches the filter.
     * @param {ChurchNoticeFindUniqueArgs} args - Arguments to find a ChurchNotice
     * @example
     * // Get one ChurchNotice
     * const churchNotice = await prisma.churchNotice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchNoticeFindUniqueArgs>(args: SelectSubset<T, ChurchNoticeFindUniqueArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChurchNotice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchNoticeFindUniqueOrThrowArgs} args - Arguments to find a ChurchNotice
     * @example
     * // Get one ChurchNotice
     * const churchNotice = await prisma.churchNotice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchNoticeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchNoticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChurchNotice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeFindFirstArgs} args - Arguments to find a ChurchNotice
     * @example
     * // Get one ChurchNotice
     * const churchNotice = await prisma.churchNotice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchNoticeFindFirstArgs>(args?: SelectSubset<T, ChurchNoticeFindFirstArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChurchNotice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeFindFirstOrThrowArgs} args - Arguments to find a ChurchNotice
     * @example
     * // Get one ChurchNotice
     * const churchNotice = await prisma.churchNotice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchNoticeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchNoticeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChurchNotices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchNotices
     * const churchNotices = await prisma.churchNotice.findMany()
     * 
     * // Get first 10 ChurchNotices
     * const churchNotices = await prisma.churchNotice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchNoticeWithIdOnly = await prisma.churchNotice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchNoticeFindManyArgs>(args?: SelectSubset<T, ChurchNoticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChurchNotice.
     * @param {ChurchNoticeCreateArgs} args - Arguments to create a ChurchNotice.
     * @example
     * // Create one ChurchNotice
     * const ChurchNotice = await prisma.churchNotice.create({
     *   data: {
     *     // ... data to create a ChurchNotice
     *   }
     * })
     * 
     */
    create<T extends ChurchNoticeCreateArgs>(args: SelectSubset<T, ChurchNoticeCreateArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChurchNotices.
     * @param {ChurchNoticeCreateManyArgs} args - Arguments to create many ChurchNotices.
     * @example
     * // Create many ChurchNotices
     * const churchNotice = await prisma.churchNotice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchNoticeCreateManyArgs>(args?: SelectSubset<T, ChurchNoticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchNotices and returns the data saved in the database.
     * @param {ChurchNoticeCreateManyAndReturnArgs} args - Arguments to create many ChurchNotices.
     * @example
     * // Create many ChurchNotices
     * const churchNotice = await prisma.churchNotice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchNotices and only return the `id`
     * const churchNoticeWithIdOnly = await prisma.churchNotice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchNoticeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchNoticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChurchNotice.
     * @param {ChurchNoticeDeleteArgs} args - Arguments to delete one ChurchNotice.
     * @example
     * // Delete one ChurchNotice
     * const ChurchNotice = await prisma.churchNotice.delete({
     *   where: {
     *     // ... filter to delete one ChurchNotice
     *   }
     * })
     * 
     */
    delete<T extends ChurchNoticeDeleteArgs>(args: SelectSubset<T, ChurchNoticeDeleteArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChurchNotice.
     * @param {ChurchNoticeUpdateArgs} args - Arguments to update one ChurchNotice.
     * @example
     * // Update one ChurchNotice
     * const churchNotice = await prisma.churchNotice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchNoticeUpdateArgs>(args: SelectSubset<T, ChurchNoticeUpdateArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChurchNotices.
     * @param {ChurchNoticeDeleteManyArgs} args - Arguments to filter ChurchNotices to delete.
     * @example
     * // Delete a few ChurchNotices
     * const { count } = await prisma.churchNotice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchNoticeDeleteManyArgs>(args?: SelectSubset<T, ChurchNoticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchNotices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchNotices
     * const churchNotice = await prisma.churchNotice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchNoticeUpdateManyArgs>(args: SelectSubset<T, ChurchNoticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchNotices and returns the data updated in the database.
     * @param {ChurchNoticeUpdateManyAndReturnArgs} args - Arguments to update many ChurchNotices.
     * @example
     * // Update many ChurchNotices
     * const churchNotice = await prisma.churchNotice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchNotices and only return the `id`
     * const churchNoticeWithIdOnly = await prisma.churchNotice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchNoticeUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchNoticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChurchNotice.
     * @param {ChurchNoticeUpsertArgs} args - Arguments to update or create a ChurchNotice.
     * @example
     * // Update or create a ChurchNotice
     * const churchNotice = await prisma.churchNotice.upsert({
     *   create: {
     *     // ... data to create a ChurchNotice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchNotice we want to update
     *   }
     * })
     */
    upsert<T extends ChurchNoticeUpsertArgs>(args: SelectSubset<T, ChurchNoticeUpsertArgs<ExtArgs>>): Prisma__ChurchNoticeClient<$Result.GetResult<Prisma.$ChurchNoticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChurchNotices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeCountArgs} args - Arguments to filter ChurchNotices to count.
     * @example
     * // Count the number of ChurchNotices
     * const count = await prisma.churchNotice.count({
     *   where: {
     *     // ... the filter for the ChurchNotices we want to count
     *   }
     * })
    **/
    count<T extends ChurchNoticeCountArgs>(
      args?: Subset<T, ChurchNoticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchNoticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchNotice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchNoticeAggregateArgs>(args: Subset<T, ChurchNoticeAggregateArgs>): Prisma.PrismaPromise<GetChurchNoticeAggregateType<T>>

    /**
     * Group by ChurchNotice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchNoticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchNoticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchNoticeGroupByArgs['orderBy'] }
        : { orderBy?: ChurchNoticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchNoticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchNoticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchNotice model
   */
  readonly fields: ChurchNoticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchNotice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchNoticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends ChurchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchDefaultArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchNotice model
   */
  interface ChurchNoticeFieldRefs {
    readonly id: FieldRef<"ChurchNotice", 'String'>
    readonly title: FieldRef<"ChurchNotice", 'String'>
    readonly content: FieldRef<"ChurchNotice", 'String'>
    readonly isImportant: FieldRef<"ChurchNotice", 'Boolean'>
    readonly churchId: FieldRef<"ChurchNotice", 'String'>
    readonly createdAt: FieldRef<"ChurchNotice", 'DateTime'>
    readonly updatedAt: FieldRef<"ChurchNotice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChurchNotice findUnique
   */
  export type ChurchNoticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchNotice to fetch.
     */
    where: ChurchNoticeWhereUniqueInput
  }

  /**
   * ChurchNotice findUniqueOrThrow
   */
  export type ChurchNoticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchNotice to fetch.
     */
    where: ChurchNoticeWhereUniqueInput
  }

  /**
   * ChurchNotice findFirst
   */
  export type ChurchNoticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchNotice to fetch.
     */
    where?: ChurchNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchNotices to fetch.
     */
    orderBy?: ChurchNoticeOrderByWithRelationInput | ChurchNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchNotices.
     */
    cursor?: ChurchNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchNotices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchNotices.
     */
    distinct?: ChurchNoticeScalarFieldEnum | ChurchNoticeScalarFieldEnum[]
  }

  /**
   * ChurchNotice findFirstOrThrow
   */
  export type ChurchNoticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchNotice to fetch.
     */
    where?: ChurchNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchNotices to fetch.
     */
    orderBy?: ChurchNoticeOrderByWithRelationInput | ChurchNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchNotices.
     */
    cursor?: ChurchNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchNotices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchNotices.
     */
    distinct?: ChurchNoticeScalarFieldEnum | ChurchNoticeScalarFieldEnum[]
  }

  /**
   * ChurchNotice findMany
   */
  export type ChurchNoticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * Filter, which ChurchNotices to fetch.
     */
    where?: ChurchNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchNotices to fetch.
     */
    orderBy?: ChurchNoticeOrderByWithRelationInput | ChurchNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchNotices.
     */
    cursor?: ChurchNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchNotices.
     */
    skip?: number
    distinct?: ChurchNoticeScalarFieldEnum | ChurchNoticeScalarFieldEnum[]
  }

  /**
   * ChurchNotice create
   */
  export type ChurchNoticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchNotice.
     */
    data: XOR<ChurchNoticeCreateInput, ChurchNoticeUncheckedCreateInput>
  }

  /**
   * ChurchNotice createMany
   */
  export type ChurchNoticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchNotices.
     */
    data: ChurchNoticeCreateManyInput | ChurchNoticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchNotice createManyAndReturn
   */
  export type ChurchNoticeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchNotices.
     */
    data: ChurchNoticeCreateManyInput | ChurchNoticeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchNotice update
   */
  export type ChurchNoticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchNotice.
     */
    data: XOR<ChurchNoticeUpdateInput, ChurchNoticeUncheckedUpdateInput>
    /**
     * Choose, which ChurchNotice to update.
     */
    where: ChurchNoticeWhereUniqueInput
  }

  /**
   * ChurchNotice updateMany
   */
  export type ChurchNoticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchNotices.
     */
    data: XOR<ChurchNoticeUpdateManyMutationInput, ChurchNoticeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchNotices to update
     */
    where?: ChurchNoticeWhereInput
    /**
     * Limit how many ChurchNotices to update.
     */
    limit?: number
  }

  /**
   * ChurchNotice updateManyAndReturn
   */
  export type ChurchNoticeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * The data used to update ChurchNotices.
     */
    data: XOR<ChurchNoticeUpdateManyMutationInput, ChurchNoticeUncheckedUpdateManyInput>
    /**
     * Filter which ChurchNotices to update
     */
    where?: ChurchNoticeWhereInput
    /**
     * Limit how many ChurchNotices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchNotice upsert
   */
  export type ChurchNoticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchNotice to update in case it exists.
     */
    where: ChurchNoticeWhereUniqueInput
    /**
     * In case the ChurchNotice found by the `where` argument doesn't exist, create a new ChurchNotice with this data.
     */
    create: XOR<ChurchNoticeCreateInput, ChurchNoticeUncheckedCreateInput>
    /**
     * In case the ChurchNotice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchNoticeUpdateInput, ChurchNoticeUncheckedUpdateInput>
  }

  /**
   * ChurchNotice delete
   */
  export type ChurchNoticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
    /**
     * Filter which ChurchNotice to delete.
     */
    where: ChurchNoticeWhereUniqueInput
  }

  /**
   * ChurchNotice deleteMany
   */
  export type ChurchNoticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchNotices to delete
     */
    where?: ChurchNoticeWhereInput
    /**
     * Limit how many ChurchNotices to delete.
     */
    limit?: number
  }

  /**
   * ChurchNotice without action
   */
  export type ChurchNoticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchNotice
     */
    select?: ChurchNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchNotice
     */
    omit?: ChurchNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchNoticeInclude<ExtArgs> | null
  }


  /**
   * Model MinistryNotice
   */

  export type AggregateMinistryNotice = {
    _count: MinistryNoticeCountAggregateOutputType | null
    _min: MinistryNoticeMinAggregateOutputType | null
    _max: MinistryNoticeMaxAggregateOutputType | null
  }

  export type MinistryNoticeMinAggregateOutputType = {
    id: string | null
    ministryId: string | null
    userId: string | null
    title: string | null
    content: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryNoticeMaxAggregateOutputType = {
    id: string | null
    ministryId: string | null
    userId: string | null
    title: string | null
    content: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryNoticeCountAggregateOutputType = {
    id: number
    ministryId: number
    userId: number
    title: number
    content: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MinistryNoticeMinAggregateInputType = {
    id?: true
    ministryId?: true
    userId?: true
    title?: true
    content?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryNoticeMaxAggregateInputType = {
    id?: true
    ministryId?: true
    userId?: true
    title?: true
    content?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryNoticeCountAggregateInputType = {
    id?: true
    ministryId?: true
    userId?: true
    title?: true
    content?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MinistryNoticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryNotice to aggregate.
     */
    where?: MinistryNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryNotices to fetch.
     */
    orderBy?: MinistryNoticeOrderByWithRelationInput | MinistryNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryNotices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistryNotices
    **/
    _count?: true | MinistryNoticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryNoticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryNoticeMaxAggregateInputType
  }

  export type GetMinistryNoticeAggregateType<T extends MinistryNoticeAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistryNotice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistryNotice[P]>
      : GetScalarType<T[P], AggregateMinistryNotice[P]>
  }




  export type MinistryNoticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryNoticeWhereInput
    orderBy?: MinistryNoticeOrderByWithAggregationInput | MinistryNoticeOrderByWithAggregationInput[]
    by: MinistryNoticeScalarFieldEnum[] | MinistryNoticeScalarFieldEnum
    having?: MinistryNoticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryNoticeCountAggregateInputType | true
    _min?: MinistryNoticeMinAggregateInputType
    _max?: MinistryNoticeMaxAggregateInputType
  }

  export type MinistryNoticeGroupByOutputType = {
    id: string
    ministryId: string
    userId: string
    title: string
    content: string
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    _count: MinistryNoticeCountAggregateOutputType | null
    _min: MinistryNoticeMinAggregateOutputType | null
    _max: MinistryNoticeMaxAggregateOutputType | null
  }

  type GetMinistryNoticeGroupByPayload<T extends MinistryNoticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryNoticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryNoticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryNoticeGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryNoticeGroupByOutputType[P]>
        }
      >
    >


  export type MinistryNoticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    events?: boolean | MinistryNotice$eventsArgs<ExtArgs>
    _count?: boolean | MinistryNoticeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryNotice"]>

  export type MinistryNoticeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryNotice"]>

  export type MinistryNoticeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryNotice"]>

  export type MinistryNoticeSelectScalar = {
    id?: boolean
    ministryId?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MinistryNoticeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ministryId" | "userId" | "title" | "content" | "startDate" | "endDate" | "createdAt" | "updatedAt", ExtArgs["result"]["ministryNotice"]>
  export type MinistryNoticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    events?: boolean | MinistryNotice$eventsArgs<ExtArgs>
    _count?: boolean | MinistryNoticeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MinistryNoticeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MinistryNoticeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MinistryNoticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistryNotice"
    objects: {
      ministry: Prisma.$MinistryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      events: Prisma.$MinistryEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ministryId: string
      userId: string
      title: string
      content: string
      startDate: Date
      endDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ministryNotice"]>
    composites: {}
  }

  type MinistryNoticeGetPayload<S extends boolean | null | undefined | MinistryNoticeDefaultArgs> = $Result.GetResult<Prisma.$MinistryNoticePayload, S>

  type MinistryNoticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryNoticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryNoticeCountAggregateInputType | true
    }

  export interface MinistryNoticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistryNotice'], meta: { name: 'MinistryNotice' } }
    /**
     * Find zero or one MinistryNotice that matches the filter.
     * @param {MinistryNoticeFindUniqueArgs} args - Arguments to find a MinistryNotice
     * @example
     * // Get one MinistryNotice
     * const ministryNotice = await prisma.ministryNotice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryNoticeFindUniqueArgs>(args: SelectSubset<T, MinistryNoticeFindUniqueArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistryNotice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryNoticeFindUniqueOrThrowArgs} args - Arguments to find a MinistryNotice
     * @example
     * // Get one MinistryNotice
     * const ministryNotice = await prisma.ministryNotice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryNoticeFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryNoticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryNotice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeFindFirstArgs} args - Arguments to find a MinistryNotice
     * @example
     * // Get one MinistryNotice
     * const ministryNotice = await prisma.ministryNotice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryNoticeFindFirstArgs>(args?: SelectSubset<T, MinistryNoticeFindFirstArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryNotice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeFindFirstOrThrowArgs} args - Arguments to find a MinistryNotice
     * @example
     * // Get one MinistryNotice
     * const ministryNotice = await prisma.ministryNotice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryNoticeFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryNoticeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistryNotices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistryNotices
     * const ministryNotices = await prisma.ministryNotice.findMany()
     * 
     * // Get first 10 MinistryNotices
     * const ministryNotices = await prisma.ministryNotice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryNoticeWithIdOnly = await prisma.ministryNotice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryNoticeFindManyArgs>(args?: SelectSubset<T, MinistryNoticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistryNotice.
     * @param {MinistryNoticeCreateArgs} args - Arguments to create a MinistryNotice.
     * @example
     * // Create one MinistryNotice
     * const MinistryNotice = await prisma.ministryNotice.create({
     *   data: {
     *     // ... data to create a MinistryNotice
     *   }
     * })
     * 
     */
    create<T extends MinistryNoticeCreateArgs>(args: SelectSubset<T, MinistryNoticeCreateArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistryNotices.
     * @param {MinistryNoticeCreateManyArgs} args - Arguments to create many MinistryNotices.
     * @example
     * // Create many MinistryNotices
     * const ministryNotice = await prisma.ministryNotice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryNoticeCreateManyArgs>(args?: SelectSubset<T, MinistryNoticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistryNotices and returns the data saved in the database.
     * @param {MinistryNoticeCreateManyAndReturnArgs} args - Arguments to create many MinistryNotices.
     * @example
     * // Create many MinistryNotices
     * const ministryNotice = await prisma.ministryNotice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistryNotices and only return the `id`
     * const ministryNoticeWithIdOnly = await prisma.ministryNotice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryNoticeCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryNoticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistryNotice.
     * @param {MinistryNoticeDeleteArgs} args - Arguments to delete one MinistryNotice.
     * @example
     * // Delete one MinistryNotice
     * const MinistryNotice = await prisma.ministryNotice.delete({
     *   where: {
     *     // ... filter to delete one MinistryNotice
     *   }
     * })
     * 
     */
    delete<T extends MinistryNoticeDeleteArgs>(args: SelectSubset<T, MinistryNoticeDeleteArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistryNotice.
     * @param {MinistryNoticeUpdateArgs} args - Arguments to update one MinistryNotice.
     * @example
     * // Update one MinistryNotice
     * const ministryNotice = await prisma.ministryNotice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryNoticeUpdateArgs>(args: SelectSubset<T, MinistryNoticeUpdateArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistryNotices.
     * @param {MinistryNoticeDeleteManyArgs} args - Arguments to filter MinistryNotices to delete.
     * @example
     * // Delete a few MinistryNotices
     * const { count } = await prisma.ministryNotice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryNoticeDeleteManyArgs>(args?: SelectSubset<T, MinistryNoticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryNotices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistryNotices
     * const ministryNotice = await prisma.ministryNotice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryNoticeUpdateManyArgs>(args: SelectSubset<T, MinistryNoticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryNotices and returns the data updated in the database.
     * @param {MinistryNoticeUpdateManyAndReturnArgs} args - Arguments to update many MinistryNotices.
     * @example
     * // Update many MinistryNotices
     * const ministryNotice = await prisma.ministryNotice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistryNotices and only return the `id`
     * const ministryNoticeWithIdOnly = await prisma.ministryNotice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryNoticeUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryNoticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistryNotice.
     * @param {MinistryNoticeUpsertArgs} args - Arguments to update or create a MinistryNotice.
     * @example
     * // Update or create a MinistryNotice
     * const ministryNotice = await prisma.ministryNotice.upsert({
     *   create: {
     *     // ... data to create a MinistryNotice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistryNotice we want to update
     *   }
     * })
     */
    upsert<T extends MinistryNoticeUpsertArgs>(args: SelectSubset<T, MinistryNoticeUpsertArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistryNotices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeCountArgs} args - Arguments to filter MinistryNotices to count.
     * @example
     * // Count the number of MinistryNotices
     * const count = await prisma.ministryNotice.count({
     *   where: {
     *     // ... the filter for the MinistryNotices we want to count
     *   }
     * })
    **/
    count<T extends MinistryNoticeCountArgs>(
      args?: Subset<T, MinistryNoticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryNoticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistryNotice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryNoticeAggregateArgs>(args: Subset<T, MinistryNoticeAggregateArgs>): Prisma.PrismaPromise<GetMinistryNoticeAggregateType<T>>

    /**
     * Group by MinistryNotice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryNoticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryNoticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryNoticeGroupByArgs['orderBy'] }
        : { orderBy?: MinistryNoticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryNoticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryNoticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistryNotice model
   */
  readonly fields: MinistryNoticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistryNotice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryNoticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ministry<T extends MinistryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryDefaultArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    events<T extends MinistryNotice$eventsArgs<ExtArgs> = {}>(args?: Subset<T, MinistryNotice$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistryNotice model
   */
  interface MinistryNoticeFieldRefs {
    readonly id: FieldRef<"MinistryNotice", 'String'>
    readonly ministryId: FieldRef<"MinistryNotice", 'String'>
    readonly userId: FieldRef<"MinistryNotice", 'String'>
    readonly title: FieldRef<"MinistryNotice", 'String'>
    readonly content: FieldRef<"MinistryNotice", 'String'>
    readonly startDate: FieldRef<"MinistryNotice", 'DateTime'>
    readonly endDate: FieldRef<"MinistryNotice", 'DateTime'>
    readonly createdAt: FieldRef<"MinistryNotice", 'DateTime'>
    readonly updatedAt: FieldRef<"MinistryNotice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MinistryNotice findUnique
   */
  export type MinistryNoticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * Filter, which MinistryNotice to fetch.
     */
    where: MinistryNoticeWhereUniqueInput
  }

  /**
   * MinistryNotice findUniqueOrThrow
   */
  export type MinistryNoticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * Filter, which MinistryNotice to fetch.
     */
    where: MinistryNoticeWhereUniqueInput
  }

  /**
   * MinistryNotice findFirst
   */
  export type MinistryNoticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * Filter, which MinistryNotice to fetch.
     */
    where?: MinistryNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryNotices to fetch.
     */
    orderBy?: MinistryNoticeOrderByWithRelationInput | MinistryNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryNotices.
     */
    cursor?: MinistryNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryNotices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryNotices.
     */
    distinct?: MinistryNoticeScalarFieldEnum | MinistryNoticeScalarFieldEnum[]
  }

  /**
   * MinistryNotice findFirstOrThrow
   */
  export type MinistryNoticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * Filter, which MinistryNotice to fetch.
     */
    where?: MinistryNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryNotices to fetch.
     */
    orderBy?: MinistryNoticeOrderByWithRelationInput | MinistryNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryNotices.
     */
    cursor?: MinistryNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryNotices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryNotices.
     */
    distinct?: MinistryNoticeScalarFieldEnum | MinistryNoticeScalarFieldEnum[]
  }

  /**
   * MinistryNotice findMany
   */
  export type MinistryNoticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * Filter, which MinistryNotices to fetch.
     */
    where?: MinistryNoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryNotices to fetch.
     */
    orderBy?: MinistryNoticeOrderByWithRelationInput | MinistryNoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistryNotices.
     */
    cursor?: MinistryNoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryNotices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryNotices.
     */
    skip?: number
    distinct?: MinistryNoticeScalarFieldEnum | MinistryNoticeScalarFieldEnum[]
  }

  /**
   * MinistryNotice create
   */
  export type MinistryNoticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistryNotice.
     */
    data: XOR<MinistryNoticeCreateInput, MinistryNoticeUncheckedCreateInput>
  }

  /**
   * MinistryNotice createMany
   */
  export type MinistryNoticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistryNotices.
     */
    data: MinistryNoticeCreateManyInput | MinistryNoticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistryNotice createManyAndReturn
   */
  export type MinistryNoticeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * The data used to create many MinistryNotices.
     */
    data: MinistryNoticeCreateManyInput | MinistryNoticeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryNotice update
   */
  export type MinistryNoticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistryNotice.
     */
    data: XOR<MinistryNoticeUpdateInput, MinistryNoticeUncheckedUpdateInput>
    /**
     * Choose, which MinistryNotice to update.
     */
    where: MinistryNoticeWhereUniqueInput
  }

  /**
   * MinistryNotice updateMany
   */
  export type MinistryNoticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistryNotices.
     */
    data: XOR<MinistryNoticeUpdateManyMutationInput, MinistryNoticeUncheckedUpdateManyInput>
    /**
     * Filter which MinistryNotices to update
     */
    where?: MinistryNoticeWhereInput
    /**
     * Limit how many MinistryNotices to update.
     */
    limit?: number
  }

  /**
   * MinistryNotice updateManyAndReturn
   */
  export type MinistryNoticeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * The data used to update MinistryNotices.
     */
    data: XOR<MinistryNoticeUpdateManyMutationInput, MinistryNoticeUncheckedUpdateManyInput>
    /**
     * Filter which MinistryNotices to update
     */
    where?: MinistryNoticeWhereInput
    /**
     * Limit how many MinistryNotices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryNotice upsert
   */
  export type MinistryNoticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistryNotice to update in case it exists.
     */
    where: MinistryNoticeWhereUniqueInput
    /**
     * In case the MinistryNotice found by the `where` argument doesn't exist, create a new MinistryNotice with this data.
     */
    create: XOR<MinistryNoticeCreateInput, MinistryNoticeUncheckedCreateInput>
    /**
     * In case the MinistryNotice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryNoticeUpdateInput, MinistryNoticeUncheckedUpdateInput>
  }

  /**
   * MinistryNotice delete
   */
  export type MinistryNoticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
    /**
     * Filter which MinistryNotice to delete.
     */
    where: MinistryNoticeWhereUniqueInput
  }

  /**
   * MinistryNotice deleteMany
   */
  export type MinistryNoticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryNotices to delete
     */
    where?: MinistryNoticeWhereInput
    /**
     * Limit how many MinistryNotices to delete.
     */
    limit?: number
  }

  /**
   * MinistryNotice.events
   */
  export type MinistryNotice$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    where?: MinistryEventWhereInput
    orderBy?: MinistryEventOrderByWithRelationInput | MinistryEventOrderByWithRelationInput[]
    cursor?: MinistryEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryEventScalarFieldEnum | MinistryEventScalarFieldEnum[]
  }

  /**
   * MinistryNotice without action
   */
  export type MinistryNoticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryNotice
     */
    select?: MinistryNoticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryNotice
     */
    omit?: MinistryNoticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryNoticeInclude<ExtArgs> | null
  }


  /**
   * Model MinistryEvent
   */

  export type AggregateMinistryEvent = {
    _count: MinistryEventCountAggregateOutputType | null
    _avg: MinistryEventAvgAggregateOutputType | null
    _sum: MinistryEventSumAggregateOutputType | null
    _min: MinistryEventMinAggregateOutputType | null
    _max: MinistryEventMaxAggregateOutputType | null
  }

  export type MinistryEventAvgAggregateOutputType = {
    maxAttendees: number | null
  }

  export type MinistryEventSumAggregateOutputType = {
    maxAttendees: number | null
  }

  export type MinistryEventMinAggregateOutputType = {
    id: string | null
    noticeId: string | null
    title: string | null
    description: string | null
    location: string | null
    eventDate: Date | null
    startTime: Date | null
    endTime: Date | null
    maxAttendees: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryEventMaxAggregateOutputType = {
    id: string | null
    noticeId: string | null
    title: string | null
    description: string | null
    location: string | null
    eventDate: Date | null
    startTime: Date | null
    endTime: Date | null
    maxAttendees: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryEventCountAggregateOutputType = {
    id: number
    noticeId: number
    title: number
    description: number
    location: number
    eventDate: number
    startTime: number
    endTime: number
    maxAttendees: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MinistryEventAvgAggregateInputType = {
    maxAttendees?: true
  }

  export type MinistryEventSumAggregateInputType = {
    maxAttendees?: true
  }

  export type MinistryEventMinAggregateInputType = {
    id?: true
    noticeId?: true
    title?: true
    description?: true
    location?: true
    eventDate?: true
    startTime?: true
    endTime?: true
    maxAttendees?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryEventMaxAggregateInputType = {
    id?: true
    noticeId?: true
    title?: true
    description?: true
    location?: true
    eventDate?: true
    startTime?: true
    endTime?: true
    maxAttendees?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryEventCountAggregateInputType = {
    id?: true
    noticeId?: true
    title?: true
    description?: true
    location?: true
    eventDate?: true
    startTime?: true
    endTime?: true
    maxAttendees?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MinistryEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryEvent to aggregate.
     */
    where?: MinistryEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryEvents to fetch.
     */
    orderBy?: MinistryEventOrderByWithRelationInput | MinistryEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistryEvents
    **/
    _count?: true | MinistryEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MinistryEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MinistryEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryEventMaxAggregateInputType
  }

  export type GetMinistryEventAggregateType<T extends MinistryEventAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistryEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistryEvent[P]>
      : GetScalarType<T[P], AggregateMinistryEvent[P]>
  }




  export type MinistryEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryEventWhereInput
    orderBy?: MinistryEventOrderByWithAggregationInput | MinistryEventOrderByWithAggregationInput[]
    by: MinistryEventScalarFieldEnum[] | MinistryEventScalarFieldEnum
    having?: MinistryEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryEventCountAggregateInputType | true
    _avg?: MinistryEventAvgAggregateInputType
    _sum?: MinistryEventSumAggregateInputType
    _min?: MinistryEventMinAggregateInputType
    _max?: MinistryEventMaxAggregateInputType
  }

  export type MinistryEventGroupByOutputType = {
    id: string
    noticeId: string
    title: string
    description: string | null
    location: string | null
    eventDate: Date
    startTime: Date
    endTime: Date
    maxAttendees: number | null
    createdAt: Date
    updatedAt: Date
    _count: MinistryEventCountAggregateOutputType | null
    _avg: MinistryEventAvgAggregateOutputType | null
    _sum: MinistryEventSumAggregateOutputType | null
    _min: MinistryEventMinAggregateOutputType | null
    _max: MinistryEventMaxAggregateOutputType | null
  }

  type GetMinistryEventGroupByPayload<T extends MinistryEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryEventGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryEventGroupByOutputType[P]>
        }
      >
    >


  export type MinistryEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticeId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    eventDate?: boolean
    startTime?: boolean
    endTime?: boolean
    maxAttendees?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notice?: boolean | MinistryNoticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryEvent"]>

  export type MinistryEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticeId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    eventDate?: boolean
    startTime?: boolean
    endTime?: boolean
    maxAttendees?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notice?: boolean | MinistryNoticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryEvent"]>

  export type MinistryEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticeId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    eventDate?: boolean
    startTime?: boolean
    endTime?: boolean
    maxAttendees?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notice?: boolean | MinistryNoticeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryEvent"]>

  export type MinistryEventSelectScalar = {
    id?: boolean
    noticeId?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    eventDate?: boolean
    startTime?: boolean
    endTime?: boolean
    maxAttendees?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MinistryEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "noticeId" | "title" | "description" | "location" | "eventDate" | "startTime" | "endTime" | "maxAttendees" | "createdAt" | "updatedAt", ExtArgs["result"]["ministryEvent"]>
  export type MinistryEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notice?: boolean | MinistryNoticeDefaultArgs<ExtArgs>
  }
  export type MinistryEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notice?: boolean | MinistryNoticeDefaultArgs<ExtArgs>
  }
  export type MinistryEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notice?: boolean | MinistryNoticeDefaultArgs<ExtArgs>
  }

  export type $MinistryEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistryEvent"
    objects: {
      notice: Prisma.$MinistryNoticePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      noticeId: string
      title: string
      description: string | null
      location: string | null
      eventDate: Date
      startTime: Date
      endTime: Date
      maxAttendees: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ministryEvent"]>
    composites: {}
  }

  type MinistryEventGetPayload<S extends boolean | null | undefined | MinistryEventDefaultArgs> = $Result.GetResult<Prisma.$MinistryEventPayload, S>

  type MinistryEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryEventCountAggregateInputType | true
    }

  export interface MinistryEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistryEvent'], meta: { name: 'MinistryEvent' } }
    /**
     * Find zero or one MinistryEvent that matches the filter.
     * @param {MinistryEventFindUniqueArgs} args - Arguments to find a MinistryEvent
     * @example
     * // Get one MinistryEvent
     * const ministryEvent = await prisma.ministryEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryEventFindUniqueArgs>(args: SelectSubset<T, MinistryEventFindUniqueArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistryEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryEventFindUniqueOrThrowArgs} args - Arguments to find a MinistryEvent
     * @example
     * // Get one MinistryEvent
     * const ministryEvent = await prisma.ministryEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryEventFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventFindFirstArgs} args - Arguments to find a MinistryEvent
     * @example
     * // Get one MinistryEvent
     * const ministryEvent = await prisma.ministryEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryEventFindFirstArgs>(args?: SelectSubset<T, MinistryEventFindFirstArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventFindFirstOrThrowArgs} args - Arguments to find a MinistryEvent
     * @example
     * // Get one MinistryEvent
     * const ministryEvent = await prisma.ministryEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryEventFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistryEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistryEvents
     * const ministryEvents = await prisma.ministryEvent.findMany()
     * 
     * // Get first 10 MinistryEvents
     * const ministryEvents = await prisma.ministryEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryEventWithIdOnly = await prisma.ministryEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryEventFindManyArgs>(args?: SelectSubset<T, MinistryEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistryEvent.
     * @param {MinistryEventCreateArgs} args - Arguments to create a MinistryEvent.
     * @example
     * // Create one MinistryEvent
     * const MinistryEvent = await prisma.ministryEvent.create({
     *   data: {
     *     // ... data to create a MinistryEvent
     *   }
     * })
     * 
     */
    create<T extends MinistryEventCreateArgs>(args: SelectSubset<T, MinistryEventCreateArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistryEvents.
     * @param {MinistryEventCreateManyArgs} args - Arguments to create many MinistryEvents.
     * @example
     * // Create many MinistryEvents
     * const ministryEvent = await prisma.ministryEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryEventCreateManyArgs>(args?: SelectSubset<T, MinistryEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistryEvents and returns the data saved in the database.
     * @param {MinistryEventCreateManyAndReturnArgs} args - Arguments to create many MinistryEvents.
     * @example
     * // Create many MinistryEvents
     * const ministryEvent = await prisma.ministryEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistryEvents and only return the `id`
     * const ministryEventWithIdOnly = await prisma.ministryEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryEventCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistryEvent.
     * @param {MinistryEventDeleteArgs} args - Arguments to delete one MinistryEvent.
     * @example
     * // Delete one MinistryEvent
     * const MinistryEvent = await prisma.ministryEvent.delete({
     *   where: {
     *     // ... filter to delete one MinistryEvent
     *   }
     * })
     * 
     */
    delete<T extends MinistryEventDeleteArgs>(args: SelectSubset<T, MinistryEventDeleteArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistryEvent.
     * @param {MinistryEventUpdateArgs} args - Arguments to update one MinistryEvent.
     * @example
     * // Update one MinistryEvent
     * const ministryEvent = await prisma.ministryEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryEventUpdateArgs>(args: SelectSubset<T, MinistryEventUpdateArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistryEvents.
     * @param {MinistryEventDeleteManyArgs} args - Arguments to filter MinistryEvents to delete.
     * @example
     * // Delete a few MinistryEvents
     * const { count } = await prisma.ministryEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryEventDeleteManyArgs>(args?: SelectSubset<T, MinistryEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistryEvents
     * const ministryEvent = await prisma.ministryEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryEventUpdateManyArgs>(args: SelectSubset<T, MinistryEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryEvents and returns the data updated in the database.
     * @param {MinistryEventUpdateManyAndReturnArgs} args - Arguments to update many MinistryEvents.
     * @example
     * // Update many MinistryEvents
     * const ministryEvent = await prisma.ministryEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistryEvents and only return the `id`
     * const ministryEventWithIdOnly = await prisma.ministryEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryEventUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistryEvent.
     * @param {MinistryEventUpsertArgs} args - Arguments to update or create a MinistryEvent.
     * @example
     * // Update or create a MinistryEvent
     * const ministryEvent = await prisma.ministryEvent.upsert({
     *   create: {
     *     // ... data to create a MinistryEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistryEvent we want to update
     *   }
     * })
     */
    upsert<T extends MinistryEventUpsertArgs>(args: SelectSubset<T, MinistryEventUpsertArgs<ExtArgs>>): Prisma__MinistryEventClient<$Result.GetResult<Prisma.$MinistryEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistryEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventCountArgs} args - Arguments to filter MinistryEvents to count.
     * @example
     * // Count the number of MinistryEvents
     * const count = await prisma.ministryEvent.count({
     *   where: {
     *     // ... the filter for the MinistryEvents we want to count
     *   }
     * })
    **/
    count<T extends MinistryEventCountArgs>(
      args?: Subset<T, MinistryEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistryEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryEventAggregateArgs>(args: Subset<T, MinistryEventAggregateArgs>): Prisma.PrismaPromise<GetMinistryEventAggregateType<T>>

    /**
     * Group by MinistryEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryEventGroupByArgs['orderBy'] }
        : { orderBy?: MinistryEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistryEvent model
   */
  readonly fields: MinistryEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistryEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notice<T extends MinistryNoticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryNoticeDefaultArgs<ExtArgs>>): Prisma__MinistryNoticeClient<$Result.GetResult<Prisma.$MinistryNoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistryEvent model
   */
  interface MinistryEventFieldRefs {
    readonly id: FieldRef<"MinistryEvent", 'String'>
    readonly noticeId: FieldRef<"MinistryEvent", 'String'>
    readonly title: FieldRef<"MinistryEvent", 'String'>
    readonly description: FieldRef<"MinistryEvent", 'String'>
    readonly location: FieldRef<"MinistryEvent", 'String'>
    readonly eventDate: FieldRef<"MinistryEvent", 'DateTime'>
    readonly startTime: FieldRef<"MinistryEvent", 'DateTime'>
    readonly endTime: FieldRef<"MinistryEvent", 'DateTime'>
    readonly maxAttendees: FieldRef<"MinistryEvent", 'Int'>
    readonly createdAt: FieldRef<"MinistryEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"MinistryEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MinistryEvent findUnique
   */
  export type MinistryEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * Filter, which MinistryEvent to fetch.
     */
    where: MinistryEventWhereUniqueInput
  }

  /**
   * MinistryEvent findUniqueOrThrow
   */
  export type MinistryEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * Filter, which MinistryEvent to fetch.
     */
    where: MinistryEventWhereUniqueInput
  }

  /**
   * MinistryEvent findFirst
   */
  export type MinistryEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * Filter, which MinistryEvent to fetch.
     */
    where?: MinistryEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryEvents to fetch.
     */
    orderBy?: MinistryEventOrderByWithRelationInput | MinistryEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryEvents.
     */
    cursor?: MinistryEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryEvents.
     */
    distinct?: MinistryEventScalarFieldEnum | MinistryEventScalarFieldEnum[]
  }

  /**
   * MinistryEvent findFirstOrThrow
   */
  export type MinistryEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * Filter, which MinistryEvent to fetch.
     */
    where?: MinistryEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryEvents to fetch.
     */
    orderBy?: MinistryEventOrderByWithRelationInput | MinistryEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryEvents.
     */
    cursor?: MinistryEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryEvents.
     */
    distinct?: MinistryEventScalarFieldEnum | MinistryEventScalarFieldEnum[]
  }

  /**
   * MinistryEvent findMany
   */
  export type MinistryEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * Filter, which MinistryEvents to fetch.
     */
    where?: MinistryEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryEvents to fetch.
     */
    orderBy?: MinistryEventOrderByWithRelationInput | MinistryEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistryEvents.
     */
    cursor?: MinistryEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryEvents.
     */
    skip?: number
    distinct?: MinistryEventScalarFieldEnum | MinistryEventScalarFieldEnum[]
  }

  /**
   * MinistryEvent create
   */
  export type MinistryEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistryEvent.
     */
    data: XOR<MinistryEventCreateInput, MinistryEventUncheckedCreateInput>
  }

  /**
   * MinistryEvent createMany
   */
  export type MinistryEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistryEvents.
     */
    data: MinistryEventCreateManyInput | MinistryEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistryEvent createManyAndReturn
   */
  export type MinistryEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * The data used to create many MinistryEvents.
     */
    data: MinistryEventCreateManyInput | MinistryEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryEvent update
   */
  export type MinistryEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistryEvent.
     */
    data: XOR<MinistryEventUpdateInput, MinistryEventUncheckedUpdateInput>
    /**
     * Choose, which MinistryEvent to update.
     */
    where: MinistryEventWhereUniqueInput
  }

  /**
   * MinistryEvent updateMany
   */
  export type MinistryEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistryEvents.
     */
    data: XOR<MinistryEventUpdateManyMutationInput, MinistryEventUncheckedUpdateManyInput>
    /**
     * Filter which MinistryEvents to update
     */
    where?: MinistryEventWhereInput
    /**
     * Limit how many MinistryEvents to update.
     */
    limit?: number
  }

  /**
   * MinistryEvent updateManyAndReturn
   */
  export type MinistryEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * The data used to update MinistryEvents.
     */
    data: XOR<MinistryEventUpdateManyMutationInput, MinistryEventUncheckedUpdateManyInput>
    /**
     * Filter which MinistryEvents to update
     */
    where?: MinistryEventWhereInput
    /**
     * Limit how many MinistryEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryEvent upsert
   */
  export type MinistryEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistryEvent to update in case it exists.
     */
    where: MinistryEventWhereUniqueInput
    /**
     * In case the MinistryEvent found by the `where` argument doesn't exist, create a new MinistryEvent with this data.
     */
    create: XOR<MinistryEventCreateInput, MinistryEventUncheckedCreateInput>
    /**
     * In case the MinistryEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryEventUpdateInput, MinistryEventUncheckedUpdateInput>
  }

  /**
   * MinistryEvent delete
   */
  export type MinistryEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
    /**
     * Filter which MinistryEvent to delete.
     */
    where: MinistryEventWhereUniqueInput
  }

  /**
   * MinistryEvent deleteMany
   */
  export type MinistryEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryEvents to delete
     */
    where?: MinistryEventWhereInput
    /**
     * Limit how many MinistryEvents to delete.
     */
    limit?: number
  }

  /**
   * MinistryEvent without action
   */
  export type MinistryEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryEvent
     */
    select?: MinistryEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryEvent
     */
    omit?: MinistryEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryEventInclude<ExtArgs> | null
  }


  /**
   * Model MinistryAnnouncement
   */

  export type AggregateMinistryAnnouncement = {
    _count: MinistryAnnouncementCountAggregateOutputType | null
    _min: MinistryAnnouncementMinAggregateOutputType | null
    _max: MinistryAnnouncementMaxAggregateOutputType | null
  }

  export type MinistryAnnouncementMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isImportant: boolean | null
    ministryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryAnnouncementMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    isImportant: boolean | null
    ministryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MinistryAnnouncementCountAggregateOutputType = {
    id: number
    title: number
    content: number
    isImportant: number
    ministryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MinistryAnnouncementMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isImportant?: true
    ministryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryAnnouncementMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isImportant?: true
    ministryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MinistryAnnouncementCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    isImportant?: true
    ministryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MinistryAnnouncementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryAnnouncement to aggregate.
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryAnnouncements to fetch.
     */
    orderBy?: MinistryAnnouncementOrderByWithRelationInput | MinistryAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistryAnnouncements
    **/
    _count?: true | MinistryAnnouncementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryAnnouncementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryAnnouncementMaxAggregateInputType
  }

  export type GetMinistryAnnouncementAggregateType<T extends MinistryAnnouncementAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistryAnnouncement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistryAnnouncement[P]>
      : GetScalarType<T[P], AggregateMinistryAnnouncement[P]>
  }




  export type MinistryAnnouncementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryAnnouncementWhereInput
    orderBy?: MinistryAnnouncementOrderByWithAggregationInput | MinistryAnnouncementOrderByWithAggregationInput[]
    by: MinistryAnnouncementScalarFieldEnum[] | MinistryAnnouncementScalarFieldEnum
    having?: MinistryAnnouncementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryAnnouncementCountAggregateInputType | true
    _min?: MinistryAnnouncementMinAggregateInputType
    _max?: MinistryAnnouncementMaxAggregateInputType
  }

  export type MinistryAnnouncementGroupByOutputType = {
    id: string
    title: string
    content: string
    isImportant: boolean
    ministryId: string
    createdAt: Date
    updatedAt: Date
    _count: MinistryAnnouncementCountAggregateOutputType | null
    _min: MinistryAnnouncementMinAggregateOutputType | null
    _max: MinistryAnnouncementMaxAggregateOutputType | null
  }

  type GetMinistryAnnouncementGroupByPayload<T extends MinistryAnnouncementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryAnnouncementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryAnnouncementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryAnnouncementGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryAnnouncementGroupByOutputType[P]>
        }
      >
    >


  export type MinistryAnnouncementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryAnnouncement"]>

  export type MinistryAnnouncementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryAnnouncement"]>

  export type MinistryAnnouncementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryAnnouncement"]>

  export type MinistryAnnouncementSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    isImportant?: boolean
    ministryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MinistryAnnouncementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "isImportant" | "ministryId" | "createdAt" | "updatedAt", ExtArgs["result"]["ministryAnnouncement"]>
  export type MinistryAnnouncementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }
  export type MinistryAnnouncementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }
  export type MinistryAnnouncementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }

  export type $MinistryAnnouncementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistryAnnouncement"
    objects: {
      ministry: Prisma.$MinistryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      isImportant: boolean
      ministryId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ministryAnnouncement"]>
    composites: {}
  }

  type MinistryAnnouncementGetPayload<S extends boolean | null | undefined | MinistryAnnouncementDefaultArgs> = $Result.GetResult<Prisma.$MinistryAnnouncementPayload, S>

  type MinistryAnnouncementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryAnnouncementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryAnnouncementCountAggregateInputType | true
    }

  export interface MinistryAnnouncementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistryAnnouncement'], meta: { name: 'MinistryAnnouncement' } }
    /**
     * Find zero or one MinistryAnnouncement that matches the filter.
     * @param {MinistryAnnouncementFindUniqueArgs} args - Arguments to find a MinistryAnnouncement
     * @example
     * // Get one MinistryAnnouncement
     * const ministryAnnouncement = await prisma.ministryAnnouncement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryAnnouncementFindUniqueArgs>(args: SelectSubset<T, MinistryAnnouncementFindUniqueArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistryAnnouncement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryAnnouncementFindUniqueOrThrowArgs} args - Arguments to find a MinistryAnnouncement
     * @example
     * // Get one MinistryAnnouncement
     * const ministryAnnouncement = await prisma.ministryAnnouncement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryAnnouncementFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryAnnouncementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryAnnouncement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementFindFirstArgs} args - Arguments to find a MinistryAnnouncement
     * @example
     * // Get one MinistryAnnouncement
     * const ministryAnnouncement = await prisma.ministryAnnouncement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryAnnouncementFindFirstArgs>(args?: SelectSubset<T, MinistryAnnouncementFindFirstArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryAnnouncement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementFindFirstOrThrowArgs} args - Arguments to find a MinistryAnnouncement
     * @example
     * // Get one MinistryAnnouncement
     * const ministryAnnouncement = await prisma.ministryAnnouncement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryAnnouncementFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryAnnouncementFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistryAnnouncements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistryAnnouncements
     * const ministryAnnouncements = await prisma.ministryAnnouncement.findMany()
     * 
     * // Get first 10 MinistryAnnouncements
     * const ministryAnnouncements = await prisma.ministryAnnouncement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryAnnouncementWithIdOnly = await prisma.ministryAnnouncement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryAnnouncementFindManyArgs>(args?: SelectSubset<T, MinistryAnnouncementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistryAnnouncement.
     * @param {MinistryAnnouncementCreateArgs} args - Arguments to create a MinistryAnnouncement.
     * @example
     * // Create one MinistryAnnouncement
     * const MinistryAnnouncement = await prisma.ministryAnnouncement.create({
     *   data: {
     *     // ... data to create a MinistryAnnouncement
     *   }
     * })
     * 
     */
    create<T extends MinistryAnnouncementCreateArgs>(args: SelectSubset<T, MinistryAnnouncementCreateArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistryAnnouncements.
     * @param {MinistryAnnouncementCreateManyArgs} args - Arguments to create many MinistryAnnouncements.
     * @example
     * // Create many MinistryAnnouncements
     * const ministryAnnouncement = await prisma.ministryAnnouncement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryAnnouncementCreateManyArgs>(args?: SelectSubset<T, MinistryAnnouncementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistryAnnouncements and returns the data saved in the database.
     * @param {MinistryAnnouncementCreateManyAndReturnArgs} args - Arguments to create many MinistryAnnouncements.
     * @example
     * // Create many MinistryAnnouncements
     * const ministryAnnouncement = await prisma.ministryAnnouncement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistryAnnouncements and only return the `id`
     * const ministryAnnouncementWithIdOnly = await prisma.ministryAnnouncement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryAnnouncementCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryAnnouncementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistryAnnouncement.
     * @param {MinistryAnnouncementDeleteArgs} args - Arguments to delete one MinistryAnnouncement.
     * @example
     * // Delete one MinistryAnnouncement
     * const MinistryAnnouncement = await prisma.ministryAnnouncement.delete({
     *   where: {
     *     // ... filter to delete one MinistryAnnouncement
     *   }
     * })
     * 
     */
    delete<T extends MinistryAnnouncementDeleteArgs>(args: SelectSubset<T, MinistryAnnouncementDeleteArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistryAnnouncement.
     * @param {MinistryAnnouncementUpdateArgs} args - Arguments to update one MinistryAnnouncement.
     * @example
     * // Update one MinistryAnnouncement
     * const ministryAnnouncement = await prisma.ministryAnnouncement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryAnnouncementUpdateArgs>(args: SelectSubset<T, MinistryAnnouncementUpdateArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistryAnnouncements.
     * @param {MinistryAnnouncementDeleteManyArgs} args - Arguments to filter MinistryAnnouncements to delete.
     * @example
     * // Delete a few MinistryAnnouncements
     * const { count } = await prisma.ministryAnnouncement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryAnnouncementDeleteManyArgs>(args?: SelectSubset<T, MinistryAnnouncementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistryAnnouncements
     * const ministryAnnouncement = await prisma.ministryAnnouncement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryAnnouncementUpdateManyArgs>(args: SelectSubset<T, MinistryAnnouncementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryAnnouncements and returns the data updated in the database.
     * @param {MinistryAnnouncementUpdateManyAndReturnArgs} args - Arguments to update many MinistryAnnouncements.
     * @example
     * // Update many MinistryAnnouncements
     * const ministryAnnouncement = await prisma.ministryAnnouncement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistryAnnouncements and only return the `id`
     * const ministryAnnouncementWithIdOnly = await prisma.ministryAnnouncement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryAnnouncementUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryAnnouncementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistryAnnouncement.
     * @param {MinistryAnnouncementUpsertArgs} args - Arguments to update or create a MinistryAnnouncement.
     * @example
     * // Update or create a MinistryAnnouncement
     * const ministryAnnouncement = await prisma.ministryAnnouncement.upsert({
     *   create: {
     *     // ... data to create a MinistryAnnouncement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistryAnnouncement we want to update
     *   }
     * })
     */
    upsert<T extends MinistryAnnouncementUpsertArgs>(args: SelectSubset<T, MinistryAnnouncementUpsertArgs<ExtArgs>>): Prisma__MinistryAnnouncementClient<$Result.GetResult<Prisma.$MinistryAnnouncementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistryAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementCountArgs} args - Arguments to filter MinistryAnnouncements to count.
     * @example
     * // Count the number of MinistryAnnouncements
     * const count = await prisma.ministryAnnouncement.count({
     *   where: {
     *     // ... the filter for the MinistryAnnouncements we want to count
     *   }
     * })
    **/
    count<T extends MinistryAnnouncementCountArgs>(
      args?: Subset<T, MinistryAnnouncementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryAnnouncementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistryAnnouncement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryAnnouncementAggregateArgs>(args: Subset<T, MinistryAnnouncementAggregateArgs>): Prisma.PrismaPromise<GetMinistryAnnouncementAggregateType<T>>

    /**
     * Group by MinistryAnnouncement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryAnnouncementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryAnnouncementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryAnnouncementGroupByArgs['orderBy'] }
        : { orderBy?: MinistryAnnouncementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryAnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistryAnnouncement model
   */
  readonly fields: MinistryAnnouncementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistryAnnouncement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryAnnouncementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ministry<T extends MinistryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryDefaultArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistryAnnouncement model
   */
  interface MinistryAnnouncementFieldRefs {
    readonly id: FieldRef<"MinistryAnnouncement", 'String'>
    readonly title: FieldRef<"MinistryAnnouncement", 'String'>
    readonly content: FieldRef<"MinistryAnnouncement", 'String'>
    readonly isImportant: FieldRef<"MinistryAnnouncement", 'Boolean'>
    readonly ministryId: FieldRef<"MinistryAnnouncement", 'String'>
    readonly createdAt: FieldRef<"MinistryAnnouncement", 'DateTime'>
    readonly updatedAt: FieldRef<"MinistryAnnouncement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MinistryAnnouncement findUnique
   */
  export type MinistryAnnouncementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which MinistryAnnouncement to fetch.
     */
    where: MinistryAnnouncementWhereUniqueInput
  }

  /**
   * MinistryAnnouncement findUniqueOrThrow
   */
  export type MinistryAnnouncementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which MinistryAnnouncement to fetch.
     */
    where: MinistryAnnouncementWhereUniqueInput
  }

  /**
   * MinistryAnnouncement findFirst
   */
  export type MinistryAnnouncementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which MinistryAnnouncement to fetch.
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryAnnouncements to fetch.
     */
    orderBy?: MinistryAnnouncementOrderByWithRelationInput | MinistryAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryAnnouncements.
     */
    cursor?: MinistryAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryAnnouncements.
     */
    distinct?: MinistryAnnouncementScalarFieldEnum | MinistryAnnouncementScalarFieldEnum[]
  }

  /**
   * MinistryAnnouncement findFirstOrThrow
   */
  export type MinistryAnnouncementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which MinistryAnnouncement to fetch.
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryAnnouncements to fetch.
     */
    orderBy?: MinistryAnnouncementOrderByWithRelationInput | MinistryAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryAnnouncements.
     */
    cursor?: MinistryAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryAnnouncements.
     */
    distinct?: MinistryAnnouncementScalarFieldEnum | MinistryAnnouncementScalarFieldEnum[]
  }

  /**
   * MinistryAnnouncement findMany
   */
  export type MinistryAnnouncementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which MinistryAnnouncements to fetch.
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryAnnouncements to fetch.
     */
    orderBy?: MinistryAnnouncementOrderByWithRelationInput | MinistryAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistryAnnouncements.
     */
    cursor?: MinistryAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryAnnouncements.
     */
    skip?: number
    distinct?: MinistryAnnouncementScalarFieldEnum | MinistryAnnouncementScalarFieldEnum[]
  }

  /**
   * MinistryAnnouncement create
   */
  export type MinistryAnnouncementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistryAnnouncement.
     */
    data: XOR<MinistryAnnouncementCreateInput, MinistryAnnouncementUncheckedCreateInput>
  }

  /**
   * MinistryAnnouncement createMany
   */
  export type MinistryAnnouncementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistryAnnouncements.
     */
    data: MinistryAnnouncementCreateManyInput | MinistryAnnouncementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistryAnnouncement createManyAndReturn
   */
  export type MinistryAnnouncementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * The data used to create many MinistryAnnouncements.
     */
    data: MinistryAnnouncementCreateManyInput | MinistryAnnouncementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryAnnouncement update
   */
  export type MinistryAnnouncementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistryAnnouncement.
     */
    data: XOR<MinistryAnnouncementUpdateInput, MinistryAnnouncementUncheckedUpdateInput>
    /**
     * Choose, which MinistryAnnouncement to update.
     */
    where: MinistryAnnouncementWhereUniqueInput
  }

  /**
   * MinistryAnnouncement updateMany
   */
  export type MinistryAnnouncementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistryAnnouncements.
     */
    data: XOR<MinistryAnnouncementUpdateManyMutationInput, MinistryAnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which MinistryAnnouncements to update
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * Limit how many MinistryAnnouncements to update.
     */
    limit?: number
  }

  /**
   * MinistryAnnouncement updateManyAndReturn
   */
  export type MinistryAnnouncementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * The data used to update MinistryAnnouncements.
     */
    data: XOR<MinistryAnnouncementUpdateManyMutationInput, MinistryAnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which MinistryAnnouncements to update
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * Limit how many MinistryAnnouncements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryAnnouncement upsert
   */
  export type MinistryAnnouncementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistryAnnouncement to update in case it exists.
     */
    where: MinistryAnnouncementWhereUniqueInput
    /**
     * In case the MinistryAnnouncement found by the `where` argument doesn't exist, create a new MinistryAnnouncement with this data.
     */
    create: XOR<MinistryAnnouncementCreateInput, MinistryAnnouncementUncheckedCreateInput>
    /**
     * In case the MinistryAnnouncement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryAnnouncementUpdateInput, MinistryAnnouncementUncheckedUpdateInput>
  }

  /**
   * MinistryAnnouncement delete
   */
  export type MinistryAnnouncementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
    /**
     * Filter which MinistryAnnouncement to delete.
     */
    where: MinistryAnnouncementWhereUniqueInput
  }

  /**
   * MinistryAnnouncement deleteMany
   */
  export type MinistryAnnouncementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryAnnouncements to delete
     */
    where?: MinistryAnnouncementWhereInput
    /**
     * Limit how many MinistryAnnouncements to delete.
     */
    limit?: number
  }

  /**
   * MinistryAnnouncement without action
   */
  export type MinistryAnnouncementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryAnnouncement
     */
    select?: MinistryAnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryAnnouncement
     */
    omit?: MinistryAnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryAnnouncementInclude<ExtArgs> | null
  }


  /**
   * Model MinistrySchedule
   */

  export type AggregateMinistrySchedule = {
    _count: MinistryScheduleCountAggregateOutputType | null
    _min: MinistryScheduleMinAggregateOutputType | null
    _max: MinistryScheduleMaxAggregateOutputType | null
  }

  export type MinistryScheduleMinAggregateOutputType = {
    id: string | null
    ministryId: string | null
    positionId: string | null
    userId: string | null
    date: Date | null
    status: string | null
  }

  export type MinistryScheduleMaxAggregateOutputType = {
    id: string | null
    ministryId: string | null
    positionId: string | null
    userId: string | null
    date: Date | null
    status: string | null
  }

  export type MinistryScheduleCountAggregateOutputType = {
    id: number
    ministryId: number
    positionId: number
    userId: number
    date: number
    status: number
    _all: number
  }


  export type MinistryScheduleMinAggregateInputType = {
    id?: true
    ministryId?: true
    positionId?: true
    userId?: true
    date?: true
    status?: true
  }

  export type MinistryScheduleMaxAggregateInputType = {
    id?: true
    ministryId?: true
    positionId?: true
    userId?: true
    date?: true
    status?: true
  }

  export type MinistryScheduleCountAggregateInputType = {
    id?: true
    ministryId?: true
    positionId?: true
    userId?: true
    date?: true
    status?: true
    _all?: true
  }

  export type MinistryScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistrySchedule to aggregate.
     */
    where?: MinistryScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistrySchedules to fetch.
     */
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistrySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistrySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistrySchedules
    **/
    _count?: true | MinistryScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryScheduleMaxAggregateInputType
  }

  export type GetMinistryScheduleAggregateType<T extends MinistryScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistrySchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistrySchedule[P]>
      : GetScalarType<T[P], AggregateMinistrySchedule[P]>
  }




  export type MinistryScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryScheduleWhereInput
    orderBy?: MinistryScheduleOrderByWithAggregationInput | MinistryScheduleOrderByWithAggregationInput[]
    by: MinistryScheduleScalarFieldEnum[] | MinistryScheduleScalarFieldEnum
    having?: MinistryScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryScheduleCountAggregateInputType | true
    _min?: MinistryScheduleMinAggregateInputType
    _max?: MinistryScheduleMaxAggregateInputType
  }

  export type MinistryScheduleGroupByOutputType = {
    id: string
    ministryId: string
    positionId: string
    userId: string
    date: Date
    status: string
    _count: MinistryScheduleCountAggregateOutputType | null
    _min: MinistryScheduleMinAggregateOutputType | null
    _max: MinistryScheduleMaxAggregateOutputType | null
  }

  type GetMinistryScheduleGroupByPayload<T extends MinistryScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryScheduleGroupByOutputType[P]>
        }
      >
    >


  export type MinistryScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    positionId?: boolean
    userId?: boolean
    date?: boolean
    status?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    position?: boolean | MinistryPositionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministrySchedule"]>

  export type MinistryScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    positionId?: boolean
    userId?: boolean
    date?: boolean
    status?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    position?: boolean | MinistryPositionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministrySchedule"]>

  export type MinistryScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    positionId?: boolean
    userId?: boolean
    date?: boolean
    status?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    position?: boolean | MinistryPositionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministrySchedule"]>

  export type MinistryScheduleSelectScalar = {
    id?: boolean
    ministryId?: boolean
    positionId?: boolean
    userId?: boolean
    date?: boolean
    status?: boolean
  }

  export type MinistryScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ministryId" | "positionId" | "userId" | "date" | "status", ExtArgs["result"]["ministrySchedule"]>
  export type MinistryScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    position?: boolean | MinistryPositionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MinistryScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    position?: boolean | MinistryPositionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MinistryScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    position?: boolean | MinistryPositionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MinistrySchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistrySchedule"
    objects: {
      ministry: Prisma.$MinistryPayload<ExtArgs>
      position: Prisma.$MinistryPositionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ministryId: string
      positionId: string
      userId: string
      date: Date
      status: string
    }, ExtArgs["result"]["ministrySchedule"]>
    composites: {}
  }

  type MinistryScheduleGetPayload<S extends boolean | null | undefined | MinistryScheduleDefaultArgs> = $Result.GetResult<Prisma.$MinistrySchedulePayload, S>

  type MinistryScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryScheduleCountAggregateInputType | true
    }

  export interface MinistryScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistrySchedule'], meta: { name: 'MinistrySchedule' } }
    /**
     * Find zero or one MinistrySchedule that matches the filter.
     * @param {MinistryScheduleFindUniqueArgs} args - Arguments to find a MinistrySchedule
     * @example
     * // Get one MinistrySchedule
     * const ministrySchedule = await prisma.ministrySchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryScheduleFindUniqueArgs>(args: SelectSubset<T, MinistryScheduleFindUniqueArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistrySchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryScheduleFindUniqueOrThrowArgs} args - Arguments to find a MinistrySchedule
     * @example
     * // Get one MinistrySchedule
     * const ministrySchedule = await prisma.ministrySchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistrySchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleFindFirstArgs} args - Arguments to find a MinistrySchedule
     * @example
     * // Get one MinistrySchedule
     * const ministrySchedule = await prisma.ministrySchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryScheduleFindFirstArgs>(args?: SelectSubset<T, MinistryScheduleFindFirstArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistrySchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleFindFirstOrThrowArgs} args - Arguments to find a MinistrySchedule
     * @example
     * // Get one MinistrySchedule
     * const ministrySchedule = await prisma.ministrySchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistrySchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistrySchedules
     * const ministrySchedules = await prisma.ministrySchedule.findMany()
     * 
     * // Get first 10 MinistrySchedules
     * const ministrySchedules = await prisma.ministrySchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryScheduleWithIdOnly = await prisma.ministrySchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryScheduleFindManyArgs>(args?: SelectSubset<T, MinistryScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistrySchedule.
     * @param {MinistryScheduleCreateArgs} args - Arguments to create a MinistrySchedule.
     * @example
     * // Create one MinistrySchedule
     * const MinistrySchedule = await prisma.ministrySchedule.create({
     *   data: {
     *     // ... data to create a MinistrySchedule
     *   }
     * })
     * 
     */
    create<T extends MinistryScheduleCreateArgs>(args: SelectSubset<T, MinistryScheduleCreateArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistrySchedules.
     * @param {MinistryScheduleCreateManyArgs} args - Arguments to create many MinistrySchedules.
     * @example
     * // Create many MinistrySchedules
     * const ministrySchedule = await prisma.ministrySchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryScheduleCreateManyArgs>(args?: SelectSubset<T, MinistryScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistrySchedules and returns the data saved in the database.
     * @param {MinistryScheduleCreateManyAndReturnArgs} args - Arguments to create many MinistrySchedules.
     * @example
     * // Create many MinistrySchedules
     * const ministrySchedule = await prisma.ministrySchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistrySchedules and only return the `id`
     * const ministryScheduleWithIdOnly = await prisma.ministrySchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistrySchedule.
     * @param {MinistryScheduleDeleteArgs} args - Arguments to delete one MinistrySchedule.
     * @example
     * // Delete one MinistrySchedule
     * const MinistrySchedule = await prisma.ministrySchedule.delete({
     *   where: {
     *     // ... filter to delete one MinistrySchedule
     *   }
     * })
     * 
     */
    delete<T extends MinistryScheduleDeleteArgs>(args: SelectSubset<T, MinistryScheduleDeleteArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistrySchedule.
     * @param {MinistryScheduleUpdateArgs} args - Arguments to update one MinistrySchedule.
     * @example
     * // Update one MinistrySchedule
     * const ministrySchedule = await prisma.ministrySchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryScheduleUpdateArgs>(args: SelectSubset<T, MinistryScheduleUpdateArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistrySchedules.
     * @param {MinistryScheduleDeleteManyArgs} args - Arguments to filter MinistrySchedules to delete.
     * @example
     * // Delete a few MinistrySchedules
     * const { count } = await prisma.ministrySchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryScheduleDeleteManyArgs>(args?: SelectSubset<T, MinistryScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistrySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistrySchedules
     * const ministrySchedule = await prisma.ministrySchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryScheduleUpdateManyArgs>(args: SelectSubset<T, MinistryScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistrySchedules and returns the data updated in the database.
     * @param {MinistryScheduleUpdateManyAndReturnArgs} args - Arguments to update many MinistrySchedules.
     * @example
     * // Update many MinistrySchedules
     * const ministrySchedule = await prisma.ministrySchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistrySchedules and only return the `id`
     * const ministryScheduleWithIdOnly = await prisma.ministrySchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistrySchedule.
     * @param {MinistryScheduleUpsertArgs} args - Arguments to update or create a MinistrySchedule.
     * @example
     * // Update or create a MinistrySchedule
     * const ministrySchedule = await prisma.ministrySchedule.upsert({
     *   create: {
     *     // ... data to create a MinistrySchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistrySchedule we want to update
     *   }
     * })
     */
    upsert<T extends MinistryScheduleUpsertArgs>(args: SelectSubset<T, MinistryScheduleUpsertArgs<ExtArgs>>): Prisma__MinistryScheduleClient<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistrySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleCountArgs} args - Arguments to filter MinistrySchedules to count.
     * @example
     * // Count the number of MinistrySchedules
     * const count = await prisma.ministrySchedule.count({
     *   where: {
     *     // ... the filter for the MinistrySchedules we want to count
     *   }
     * })
    **/
    count<T extends MinistryScheduleCountArgs>(
      args?: Subset<T, MinistryScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistrySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryScheduleAggregateArgs>(args: Subset<T, MinistryScheduleAggregateArgs>): Prisma.PrismaPromise<GetMinistryScheduleAggregateType<T>>

    /**
     * Group by MinistrySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryScheduleGroupByArgs['orderBy'] }
        : { orderBy?: MinistryScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistrySchedule model
   */
  readonly fields: MinistryScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistrySchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ministry<T extends MinistryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryDefaultArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    position<T extends MinistryPositionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryPositionDefaultArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistrySchedule model
   */
  interface MinistryScheduleFieldRefs {
    readonly id: FieldRef<"MinistrySchedule", 'String'>
    readonly ministryId: FieldRef<"MinistrySchedule", 'String'>
    readonly positionId: FieldRef<"MinistrySchedule", 'String'>
    readonly userId: FieldRef<"MinistrySchedule", 'String'>
    readonly date: FieldRef<"MinistrySchedule", 'DateTime'>
    readonly status: FieldRef<"MinistrySchedule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MinistrySchedule findUnique
   */
  export type MinistryScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MinistrySchedule to fetch.
     */
    where: MinistryScheduleWhereUniqueInput
  }

  /**
   * MinistrySchedule findUniqueOrThrow
   */
  export type MinistryScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MinistrySchedule to fetch.
     */
    where: MinistryScheduleWhereUniqueInput
  }

  /**
   * MinistrySchedule findFirst
   */
  export type MinistryScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MinistrySchedule to fetch.
     */
    where?: MinistryScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistrySchedules to fetch.
     */
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistrySchedules.
     */
    cursor?: MinistryScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistrySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistrySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistrySchedules.
     */
    distinct?: MinistryScheduleScalarFieldEnum | MinistryScheduleScalarFieldEnum[]
  }

  /**
   * MinistrySchedule findFirstOrThrow
   */
  export type MinistryScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MinistrySchedule to fetch.
     */
    where?: MinistryScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistrySchedules to fetch.
     */
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistrySchedules.
     */
    cursor?: MinistryScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistrySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistrySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistrySchedules.
     */
    distinct?: MinistryScheduleScalarFieldEnum | MinistryScheduleScalarFieldEnum[]
  }

  /**
   * MinistrySchedule findMany
   */
  export type MinistryScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * Filter, which MinistrySchedules to fetch.
     */
    where?: MinistryScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistrySchedules to fetch.
     */
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistrySchedules.
     */
    cursor?: MinistryScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistrySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistrySchedules.
     */
    skip?: number
    distinct?: MinistryScheduleScalarFieldEnum | MinistryScheduleScalarFieldEnum[]
  }

  /**
   * MinistrySchedule create
   */
  export type MinistryScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistrySchedule.
     */
    data: XOR<MinistryScheduleCreateInput, MinistryScheduleUncheckedCreateInput>
  }

  /**
   * MinistrySchedule createMany
   */
  export type MinistryScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistrySchedules.
     */
    data: MinistryScheduleCreateManyInput | MinistryScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistrySchedule createManyAndReturn
   */
  export type MinistryScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many MinistrySchedules.
     */
    data: MinistryScheduleCreateManyInput | MinistryScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistrySchedule update
   */
  export type MinistryScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistrySchedule.
     */
    data: XOR<MinistryScheduleUpdateInput, MinistryScheduleUncheckedUpdateInput>
    /**
     * Choose, which MinistrySchedule to update.
     */
    where: MinistryScheduleWhereUniqueInput
  }

  /**
   * MinistrySchedule updateMany
   */
  export type MinistryScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistrySchedules.
     */
    data: XOR<MinistryScheduleUpdateManyMutationInput, MinistryScheduleUncheckedUpdateManyInput>
    /**
     * Filter which MinistrySchedules to update
     */
    where?: MinistryScheduleWhereInput
    /**
     * Limit how many MinistrySchedules to update.
     */
    limit?: number
  }

  /**
   * MinistrySchedule updateManyAndReturn
   */
  export type MinistryScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * The data used to update MinistrySchedules.
     */
    data: XOR<MinistryScheduleUpdateManyMutationInput, MinistryScheduleUncheckedUpdateManyInput>
    /**
     * Filter which MinistrySchedules to update
     */
    where?: MinistryScheduleWhereInput
    /**
     * Limit how many MinistrySchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistrySchedule upsert
   */
  export type MinistryScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistrySchedule to update in case it exists.
     */
    where: MinistryScheduleWhereUniqueInput
    /**
     * In case the MinistrySchedule found by the `where` argument doesn't exist, create a new MinistrySchedule with this data.
     */
    create: XOR<MinistryScheduleCreateInput, MinistryScheduleUncheckedCreateInput>
    /**
     * In case the MinistrySchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryScheduleUpdateInput, MinistryScheduleUncheckedUpdateInput>
  }

  /**
   * MinistrySchedule delete
   */
  export type MinistryScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    /**
     * Filter which MinistrySchedule to delete.
     */
    where: MinistryScheduleWhereUniqueInput
  }

  /**
   * MinistrySchedule deleteMany
   */
  export type MinistryScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistrySchedules to delete
     */
    where?: MinistryScheduleWhereInput
    /**
     * Limit how many MinistrySchedules to delete.
     */
    limit?: number
  }

  /**
   * MinistrySchedule without action
   */
  export type MinistryScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
  }


  /**
   * Model ChurchFeed
   */

  export type AggregateChurchFeed = {
    _count: ChurchFeedCountAggregateOutputType | null
    _min: ChurchFeedMinAggregateOutputType | null
    _max: ChurchFeedMaxAggregateOutputType | null
  }

  export type ChurchFeedMinAggregateOutputType = {
    id: string | null
    content: string | null
    churchId: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchFeedMaxAggregateOutputType = {
    id: string | null
    content: string | null
    churchId: string | null
    authorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChurchFeedCountAggregateOutputType = {
    id: number
    content: number
    churchId: number
    authorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChurchFeedMinAggregateInputType = {
    id?: true
    content?: true
    churchId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchFeedMaxAggregateInputType = {
    id?: true
    content?: true
    churchId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChurchFeedCountAggregateInputType = {
    id?: true
    content?: true
    churchId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChurchFeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchFeed to aggregate.
     */
    where?: ChurchFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchFeeds to fetch.
     */
    orderBy?: ChurchFeedOrderByWithRelationInput | ChurchFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChurchFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchFeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChurchFeeds
    **/
    _count?: true | ChurchFeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChurchFeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChurchFeedMaxAggregateInputType
  }

  export type GetChurchFeedAggregateType<T extends ChurchFeedAggregateArgs> = {
        [P in keyof T & keyof AggregateChurchFeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChurchFeed[P]>
      : GetScalarType<T[P], AggregateChurchFeed[P]>
  }




  export type ChurchFeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChurchFeedWhereInput
    orderBy?: ChurchFeedOrderByWithAggregationInput | ChurchFeedOrderByWithAggregationInput[]
    by: ChurchFeedScalarFieldEnum[] | ChurchFeedScalarFieldEnum
    having?: ChurchFeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChurchFeedCountAggregateInputType | true
    _min?: ChurchFeedMinAggregateInputType
    _max?: ChurchFeedMaxAggregateInputType
  }

  export type ChurchFeedGroupByOutputType = {
    id: string
    content: string
    churchId: string
    authorId: string
    createdAt: Date
    updatedAt: Date
    _count: ChurchFeedCountAggregateOutputType | null
    _min: ChurchFeedMinAggregateOutputType | null
    _max: ChurchFeedMaxAggregateOutputType | null
  }

  type GetChurchFeedGroupByPayload<T extends ChurchFeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChurchFeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChurchFeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChurchFeedGroupByOutputType[P]>
            : GetScalarType<T[P], ChurchFeedGroupByOutputType[P]>
        }
      >
    >


  export type ChurchFeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    churchId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    images?: boolean | ChurchFeed$imagesArgs<ExtArgs>
    likes?: boolean | ChurchFeed$likesArgs<ExtArgs>
    comments?: boolean | ChurchFeed$commentsArgs<ExtArgs>
    _count?: boolean | ChurchFeedCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchFeed"]>

  export type ChurchFeedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    churchId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchFeed"]>

  export type ChurchFeedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    churchId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["churchFeed"]>

  export type ChurchFeedSelectScalar = {
    id?: boolean
    content?: boolean
    churchId?: boolean
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChurchFeedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "churchId" | "authorId" | "createdAt" | "updatedAt", ExtArgs["result"]["churchFeed"]>
  export type ChurchFeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    images?: boolean | ChurchFeed$imagesArgs<ExtArgs>
    likes?: boolean | ChurchFeed$likesArgs<ExtArgs>
    comments?: boolean | ChurchFeed$commentsArgs<ExtArgs>
    _count?: boolean | ChurchFeedCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChurchFeedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChurchFeedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    church?: boolean | ChurchDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChurchFeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChurchFeed"
    objects: {
      church: Prisma.$ChurchPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
      images: Prisma.$FeedImagePayload<ExtArgs>[]
      likes: Prisma.$FeedLikePayload<ExtArgs>[]
      comments: Prisma.$FeedCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      churchId: string
      authorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["churchFeed"]>
    composites: {}
  }

  type ChurchFeedGetPayload<S extends boolean | null | undefined | ChurchFeedDefaultArgs> = $Result.GetResult<Prisma.$ChurchFeedPayload, S>

  type ChurchFeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChurchFeedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChurchFeedCountAggregateInputType | true
    }

  export interface ChurchFeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChurchFeed'], meta: { name: 'ChurchFeed' } }
    /**
     * Find zero or one ChurchFeed that matches the filter.
     * @param {ChurchFeedFindUniqueArgs} args - Arguments to find a ChurchFeed
     * @example
     * // Get one ChurchFeed
     * const churchFeed = await prisma.churchFeed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChurchFeedFindUniqueArgs>(args: SelectSubset<T, ChurchFeedFindUniqueArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChurchFeed that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChurchFeedFindUniqueOrThrowArgs} args - Arguments to find a ChurchFeed
     * @example
     * // Get one ChurchFeed
     * const churchFeed = await prisma.churchFeed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChurchFeedFindUniqueOrThrowArgs>(args: SelectSubset<T, ChurchFeedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChurchFeed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedFindFirstArgs} args - Arguments to find a ChurchFeed
     * @example
     * // Get one ChurchFeed
     * const churchFeed = await prisma.churchFeed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChurchFeedFindFirstArgs>(args?: SelectSubset<T, ChurchFeedFindFirstArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChurchFeed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedFindFirstOrThrowArgs} args - Arguments to find a ChurchFeed
     * @example
     * // Get one ChurchFeed
     * const churchFeed = await prisma.churchFeed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChurchFeedFindFirstOrThrowArgs>(args?: SelectSubset<T, ChurchFeedFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChurchFeeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChurchFeeds
     * const churchFeeds = await prisma.churchFeed.findMany()
     * 
     * // Get first 10 ChurchFeeds
     * const churchFeeds = await prisma.churchFeed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const churchFeedWithIdOnly = await prisma.churchFeed.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChurchFeedFindManyArgs>(args?: SelectSubset<T, ChurchFeedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChurchFeed.
     * @param {ChurchFeedCreateArgs} args - Arguments to create a ChurchFeed.
     * @example
     * // Create one ChurchFeed
     * const ChurchFeed = await prisma.churchFeed.create({
     *   data: {
     *     // ... data to create a ChurchFeed
     *   }
     * })
     * 
     */
    create<T extends ChurchFeedCreateArgs>(args: SelectSubset<T, ChurchFeedCreateArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChurchFeeds.
     * @param {ChurchFeedCreateManyArgs} args - Arguments to create many ChurchFeeds.
     * @example
     * // Create many ChurchFeeds
     * const churchFeed = await prisma.churchFeed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChurchFeedCreateManyArgs>(args?: SelectSubset<T, ChurchFeedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChurchFeeds and returns the data saved in the database.
     * @param {ChurchFeedCreateManyAndReturnArgs} args - Arguments to create many ChurchFeeds.
     * @example
     * // Create many ChurchFeeds
     * const churchFeed = await prisma.churchFeed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChurchFeeds and only return the `id`
     * const churchFeedWithIdOnly = await prisma.churchFeed.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChurchFeedCreateManyAndReturnArgs>(args?: SelectSubset<T, ChurchFeedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChurchFeed.
     * @param {ChurchFeedDeleteArgs} args - Arguments to delete one ChurchFeed.
     * @example
     * // Delete one ChurchFeed
     * const ChurchFeed = await prisma.churchFeed.delete({
     *   where: {
     *     // ... filter to delete one ChurchFeed
     *   }
     * })
     * 
     */
    delete<T extends ChurchFeedDeleteArgs>(args: SelectSubset<T, ChurchFeedDeleteArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChurchFeed.
     * @param {ChurchFeedUpdateArgs} args - Arguments to update one ChurchFeed.
     * @example
     * // Update one ChurchFeed
     * const churchFeed = await prisma.churchFeed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChurchFeedUpdateArgs>(args: SelectSubset<T, ChurchFeedUpdateArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChurchFeeds.
     * @param {ChurchFeedDeleteManyArgs} args - Arguments to filter ChurchFeeds to delete.
     * @example
     * // Delete a few ChurchFeeds
     * const { count } = await prisma.churchFeed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChurchFeedDeleteManyArgs>(args?: SelectSubset<T, ChurchFeedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchFeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChurchFeeds
     * const churchFeed = await prisma.churchFeed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChurchFeedUpdateManyArgs>(args: SelectSubset<T, ChurchFeedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChurchFeeds and returns the data updated in the database.
     * @param {ChurchFeedUpdateManyAndReturnArgs} args - Arguments to update many ChurchFeeds.
     * @example
     * // Update many ChurchFeeds
     * const churchFeed = await prisma.churchFeed.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChurchFeeds and only return the `id`
     * const churchFeedWithIdOnly = await prisma.churchFeed.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChurchFeedUpdateManyAndReturnArgs>(args: SelectSubset<T, ChurchFeedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChurchFeed.
     * @param {ChurchFeedUpsertArgs} args - Arguments to update or create a ChurchFeed.
     * @example
     * // Update or create a ChurchFeed
     * const churchFeed = await prisma.churchFeed.upsert({
     *   create: {
     *     // ... data to create a ChurchFeed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChurchFeed we want to update
     *   }
     * })
     */
    upsert<T extends ChurchFeedUpsertArgs>(args: SelectSubset<T, ChurchFeedUpsertArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChurchFeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedCountArgs} args - Arguments to filter ChurchFeeds to count.
     * @example
     * // Count the number of ChurchFeeds
     * const count = await prisma.churchFeed.count({
     *   where: {
     *     // ... the filter for the ChurchFeeds we want to count
     *   }
     * })
    **/
    count<T extends ChurchFeedCountArgs>(
      args?: Subset<T, ChurchFeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChurchFeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChurchFeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChurchFeedAggregateArgs>(args: Subset<T, ChurchFeedAggregateArgs>): Prisma.PrismaPromise<GetChurchFeedAggregateType<T>>

    /**
     * Group by ChurchFeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChurchFeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChurchFeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChurchFeedGroupByArgs['orderBy'] }
        : { orderBy?: ChurchFeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChurchFeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChurchFeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChurchFeed model
   */
  readonly fields: ChurchFeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChurchFeed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChurchFeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    church<T extends ChurchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchDefaultArgs<ExtArgs>>): Prisma__ChurchClient<$Result.GetResult<Prisma.$ChurchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    images<T extends ChurchFeed$imagesArgs<ExtArgs> = {}>(args?: Subset<T, ChurchFeed$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends ChurchFeed$likesArgs<ExtArgs> = {}>(args?: Subset<T, ChurchFeed$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends ChurchFeed$commentsArgs<ExtArgs> = {}>(args?: Subset<T, ChurchFeed$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChurchFeed model
   */
  interface ChurchFeedFieldRefs {
    readonly id: FieldRef<"ChurchFeed", 'String'>
    readonly content: FieldRef<"ChurchFeed", 'String'>
    readonly churchId: FieldRef<"ChurchFeed", 'String'>
    readonly authorId: FieldRef<"ChurchFeed", 'String'>
    readonly createdAt: FieldRef<"ChurchFeed", 'DateTime'>
    readonly updatedAt: FieldRef<"ChurchFeed", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChurchFeed findUnique
   */
  export type ChurchFeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * Filter, which ChurchFeed to fetch.
     */
    where: ChurchFeedWhereUniqueInput
  }

  /**
   * ChurchFeed findUniqueOrThrow
   */
  export type ChurchFeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * Filter, which ChurchFeed to fetch.
     */
    where: ChurchFeedWhereUniqueInput
  }

  /**
   * ChurchFeed findFirst
   */
  export type ChurchFeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * Filter, which ChurchFeed to fetch.
     */
    where?: ChurchFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchFeeds to fetch.
     */
    orderBy?: ChurchFeedOrderByWithRelationInput | ChurchFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchFeeds.
     */
    cursor?: ChurchFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchFeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchFeeds.
     */
    distinct?: ChurchFeedScalarFieldEnum | ChurchFeedScalarFieldEnum[]
  }

  /**
   * ChurchFeed findFirstOrThrow
   */
  export type ChurchFeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * Filter, which ChurchFeed to fetch.
     */
    where?: ChurchFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchFeeds to fetch.
     */
    orderBy?: ChurchFeedOrderByWithRelationInput | ChurchFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChurchFeeds.
     */
    cursor?: ChurchFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchFeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChurchFeeds.
     */
    distinct?: ChurchFeedScalarFieldEnum | ChurchFeedScalarFieldEnum[]
  }

  /**
   * ChurchFeed findMany
   */
  export type ChurchFeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * Filter, which ChurchFeeds to fetch.
     */
    where?: ChurchFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChurchFeeds to fetch.
     */
    orderBy?: ChurchFeedOrderByWithRelationInput | ChurchFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChurchFeeds.
     */
    cursor?: ChurchFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChurchFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChurchFeeds.
     */
    skip?: number
    distinct?: ChurchFeedScalarFieldEnum | ChurchFeedScalarFieldEnum[]
  }

  /**
   * ChurchFeed create
   */
  export type ChurchFeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * The data needed to create a ChurchFeed.
     */
    data: XOR<ChurchFeedCreateInput, ChurchFeedUncheckedCreateInput>
  }

  /**
   * ChurchFeed createMany
   */
  export type ChurchFeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChurchFeeds.
     */
    data: ChurchFeedCreateManyInput | ChurchFeedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChurchFeed createManyAndReturn
   */
  export type ChurchFeedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * The data used to create many ChurchFeeds.
     */
    data: ChurchFeedCreateManyInput | ChurchFeedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchFeed update
   */
  export type ChurchFeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * The data needed to update a ChurchFeed.
     */
    data: XOR<ChurchFeedUpdateInput, ChurchFeedUncheckedUpdateInput>
    /**
     * Choose, which ChurchFeed to update.
     */
    where: ChurchFeedWhereUniqueInput
  }

  /**
   * ChurchFeed updateMany
   */
  export type ChurchFeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChurchFeeds.
     */
    data: XOR<ChurchFeedUpdateManyMutationInput, ChurchFeedUncheckedUpdateManyInput>
    /**
     * Filter which ChurchFeeds to update
     */
    where?: ChurchFeedWhereInput
    /**
     * Limit how many ChurchFeeds to update.
     */
    limit?: number
  }

  /**
   * ChurchFeed updateManyAndReturn
   */
  export type ChurchFeedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * The data used to update ChurchFeeds.
     */
    data: XOR<ChurchFeedUpdateManyMutationInput, ChurchFeedUncheckedUpdateManyInput>
    /**
     * Filter which ChurchFeeds to update
     */
    where?: ChurchFeedWhereInput
    /**
     * Limit how many ChurchFeeds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChurchFeed upsert
   */
  export type ChurchFeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * The filter to search for the ChurchFeed to update in case it exists.
     */
    where: ChurchFeedWhereUniqueInput
    /**
     * In case the ChurchFeed found by the `where` argument doesn't exist, create a new ChurchFeed with this data.
     */
    create: XOR<ChurchFeedCreateInput, ChurchFeedUncheckedCreateInput>
    /**
     * In case the ChurchFeed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChurchFeedUpdateInput, ChurchFeedUncheckedUpdateInput>
  }

  /**
   * ChurchFeed delete
   */
  export type ChurchFeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
    /**
     * Filter which ChurchFeed to delete.
     */
    where: ChurchFeedWhereUniqueInput
  }

  /**
   * ChurchFeed deleteMany
   */
  export type ChurchFeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChurchFeeds to delete
     */
    where?: ChurchFeedWhereInput
    /**
     * Limit how many ChurchFeeds to delete.
     */
    limit?: number
  }

  /**
   * ChurchFeed.images
   */
  export type ChurchFeed$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    where?: FeedImageWhereInput
    orderBy?: FeedImageOrderByWithRelationInput | FeedImageOrderByWithRelationInput[]
    cursor?: FeedImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedImageScalarFieldEnum | FeedImageScalarFieldEnum[]
  }

  /**
   * ChurchFeed.likes
   */
  export type ChurchFeed$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    where?: FeedLikeWhereInput
    orderBy?: FeedLikeOrderByWithRelationInput | FeedLikeOrderByWithRelationInput[]
    cursor?: FeedLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedLikeScalarFieldEnum | FeedLikeScalarFieldEnum[]
  }

  /**
   * ChurchFeed.comments
   */
  export type ChurchFeed$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    where?: FeedCommentWhereInput
    orderBy?: FeedCommentOrderByWithRelationInput | FeedCommentOrderByWithRelationInput[]
    cursor?: FeedCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedCommentScalarFieldEnum | FeedCommentScalarFieldEnum[]
  }

  /**
   * ChurchFeed without action
   */
  export type ChurchFeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChurchFeed
     */
    select?: ChurchFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChurchFeed
     */
    omit?: ChurchFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChurchFeedInclude<ExtArgs> | null
  }


  /**
   * Model FeedImage
   */

  export type AggregateFeedImage = {
    _count: FeedImageCountAggregateOutputType | null
    _avg: FeedImageAvgAggregateOutputType | null
    _sum: FeedImageSumAggregateOutputType | null
    _min: FeedImageMinAggregateOutputType | null
    _max: FeedImageMaxAggregateOutputType | null
  }

  export type FeedImageAvgAggregateOutputType = {
    order: number | null
  }

  export type FeedImageSumAggregateOutputType = {
    order: number | null
  }

  export type FeedImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    order: number | null
    feedId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    order: number | null
    feedId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedImageCountAggregateOutputType = {
    id: number
    url: number
    order: number
    feedId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeedImageAvgAggregateInputType = {
    order?: true
  }

  export type FeedImageSumAggregateInputType = {
    order?: true
  }

  export type FeedImageMinAggregateInputType = {
    id?: true
    url?: true
    order?: true
    feedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedImageMaxAggregateInputType = {
    id?: true
    url?: true
    order?: true
    feedId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedImageCountAggregateInputType = {
    id?: true
    url?: true
    order?: true
    feedId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeedImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedImage to aggregate.
     */
    where?: FeedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedImages to fetch.
     */
    orderBy?: FeedImageOrderByWithRelationInput | FeedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedImages
    **/
    _count?: true | FeedImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedImageMaxAggregateInputType
  }

  export type GetFeedImageAggregateType<T extends FeedImageAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedImage[P]>
      : GetScalarType<T[P], AggregateFeedImage[P]>
  }




  export type FeedImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedImageWhereInput
    orderBy?: FeedImageOrderByWithAggregationInput | FeedImageOrderByWithAggregationInput[]
    by: FeedImageScalarFieldEnum[] | FeedImageScalarFieldEnum
    having?: FeedImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedImageCountAggregateInputType | true
    _avg?: FeedImageAvgAggregateInputType
    _sum?: FeedImageSumAggregateInputType
    _min?: FeedImageMinAggregateInputType
    _max?: FeedImageMaxAggregateInputType
  }

  export type FeedImageGroupByOutputType = {
    id: string
    url: string
    order: number
    feedId: string
    createdAt: Date
    updatedAt: Date
    _count: FeedImageCountAggregateOutputType | null
    _avg: FeedImageAvgAggregateOutputType | null
    _sum: FeedImageSumAggregateOutputType | null
    _min: FeedImageMinAggregateOutputType | null
    _max: FeedImageMaxAggregateOutputType | null
  }

  type GetFeedImageGroupByPayload<T extends FeedImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedImageGroupByOutputType[P]>
            : GetScalarType<T[P], FeedImageGroupByOutputType[P]>
        }
      >
    >


  export type FeedImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    order?: boolean
    feedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedImage"]>

  export type FeedImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    order?: boolean
    feedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedImage"]>

  export type FeedImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    order?: boolean
    feedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedImage"]>

  export type FeedImageSelectScalar = {
    id?: boolean
    url?: boolean
    order?: boolean
    feedId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeedImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "order" | "feedId" | "createdAt" | "updatedAt", ExtArgs["result"]["feedImage"]>
  export type FeedImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
  }
  export type FeedImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
  }
  export type FeedImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
  }

  export type $FeedImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedImage"
    objects: {
      feed: Prisma.$ChurchFeedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      order: number
      feedId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feedImage"]>
    composites: {}
  }

  type FeedImageGetPayload<S extends boolean | null | undefined | FeedImageDefaultArgs> = $Result.GetResult<Prisma.$FeedImagePayload, S>

  type FeedImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedImageCountAggregateInputType | true
    }

  export interface FeedImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedImage'], meta: { name: 'FeedImage' } }
    /**
     * Find zero or one FeedImage that matches the filter.
     * @param {FeedImageFindUniqueArgs} args - Arguments to find a FeedImage
     * @example
     * // Get one FeedImage
     * const feedImage = await prisma.feedImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedImageFindUniqueArgs>(args: SelectSubset<T, FeedImageFindUniqueArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedImageFindUniqueOrThrowArgs} args - Arguments to find a FeedImage
     * @example
     * // Get one FeedImage
     * const feedImage = await prisma.feedImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedImageFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageFindFirstArgs} args - Arguments to find a FeedImage
     * @example
     * // Get one FeedImage
     * const feedImage = await prisma.feedImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedImageFindFirstArgs>(args?: SelectSubset<T, FeedImageFindFirstArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageFindFirstOrThrowArgs} args - Arguments to find a FeedImage
     * @example
     * // Get one FeedImage
     * const feedImage = await prisma.feedImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedImageFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedImages
     * const feedImages = await prisma.feedImage.findMany()
     * 
     * // Get first 10 FeedImages
     * const feedImages = await prisma.feedImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedImageWithIdOnly = await prisma.feedImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedImageFindManyArgs>(args?: SelectSubset<T, FeedImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedImage.
     * @param {FeedImageCreateArgs} args - Arguments to create a FeedImage.
     * @example
     * // Create one FeedImage
     * const FeedImage = await prisma.feedImage.create({
     *   data: {
     *     // ... data to create a FeedImage
     *   }
     * })
     * 
     */
    create<T extends FeedImageCreateArgs>(args: SelectSubset<T, FeedImageCreateArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedImages.
     * @param {FeedImageCreateManyArgs} args - Arguments to create many FeedImages.
     * @example
     * // Create many FeedImages
     * const feedImage = await prisma.feedImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedImageCreateManyArgs>(args?: SelectSubset<T, FeedImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedImages and returns the data saved in the database.
     * @param {FeedImageCreateManyAndReturnArgs} args - Arguments to create many FeedImages.
     * @example
     * // Create many FeedImages
     * const feedImage = await prisma.feedImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedImages and only return the `id`
     * const feedImageWithIdOnly = await prisma.feedImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedImageCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedImage.
     * @param {FeedImageDeleteArgs} args - Arguments to delete one FeedImage.
     * @example
     * // Delete one FeedImage
     * const FeedImage = await prisma.feedImage.delete({
     *   where: {
     *     // ... filter to delete one FeedImage
     *   }
     * })
     * 
     */
    delete<T extends FeedImageDeleteArgs>(args: SelectSubset<T, FeedImageDeleteArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedImage.
     * @param {FeedImageUpdateArgs} args - Arguments to update one FeedImage.
     * @example
     * // Update one FeedImage
     * const feedImage = await prisma.feedImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedImageUpdateArgs>(args: SelectSubset<T, FeedImageUpdateArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedImages.
     * @param {FeedImageDeleteManyArgs} args - Arguments to filter FeedImages to delete.
     * @example
     * // Delete a few FeedImages
     * const { count } = await prisma.feedImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedImageDeleteManyArgs>(args?: SelectSubset<T, FeedImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedImages
     * const feedImage = await prisma.feedImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedImageUpdateManyArgs>(args: SelectSubset<T, FeedImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedImages and returns the data updated in the database.
     * @param {FeedImageUpdateManyAndReturnArgs} args - Arguments to update many FeedImages.
     * @example
     * // Update many FeedImages
     * const feedImage = await prisma.feedImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedImages and only return the `id`
     * const feedImageWithIdOnly = await prisma.feedImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedImageUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedImage.
     * @param {FeedImageUpsertArgs} args - Arguments to update or create a FeedImage.
     * @example
     * // Update or create a FeedImage
     * const feedImage = await prisma.feedImage.upsert({
     *   create: {
     *     // ... data to create a FeedImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedImage we want to update
     *   }
     * })
     */
    upsert<T extends FeedImageUpsertArgs>(args: SelectSubset<T, FeedImageUpsertArgs<ExtArgs>>): Prisma__FeedImageClient<$Result.GetResult<Prisma.$FeedImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageCountArgs} args - Arguments to filter FeedImages to count.
     * @example
     * // Count the number of FeedImages
     * const count = await prisma.feedImage.count({
     *   where: {
     *     // ... the filter for the FeedImages we want to count
     *   }
     * })
    **/
    count<T extends FeedImageCountArgs>(
      args?: Subset<T, FeedImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedImageAggregateArgs>(args: Subset<T, FeedImageAggregateArgs>): Prisma.PrismaPromise<GetFeedImageAggregateType<T>>

    /**
     * Group by FeedImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedImageGroupByArgs['orderBy'] }
        : { orderBy?: FeedImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedImage model
   */
  readonly fields: FeedImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feed<T extends ChurchFeedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchFeedDefaultArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedImage model
   */
  interface FeedImageFieldRefs {
    readonly id: FieldRef<"FeedImage", 'String'>
    readonly url: FieldRef<"FeedImage", 'String'>
    readonly order: FieldRef<"FeedImage", 'Int'>
    readonly feedId: FieldRef<"FeedImage", 'String'>
    readonly createdAt: FieldRef<"FeedImage", 'DateTime'>
    readonly updatedAt: FieldRef<"FeedImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeedImage findUnique
   */
  export type FeedImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * Filter, which FeedImage to fetch.
     */
    where: FeedImageWhereUniqueInput
  }

  /**
   * FeedImage findUniqueOrThrow
   */
  export type FeedImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * Filter, which FeedImage to fetch.
     */
    where: FeedImageWhereUniqueInput
  }

  /**
   * FeedImage findFirst
   */
  export type FeedImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * Filter, which FeedImage to fetch.
     */
    where?: FeedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedImages to fetch.
     */
    orderBy?: FeedImageOrderByWithRelationInput | FeedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedImages.
     */
    cursor?: FeedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedImages.
     */
    distinct?: FeedImageScalarFieldEnum | FeedImageScalarFieldEnum[]
  }

  /**
   * FeedImage findFirstOrThrow
   */
  export type FeedImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * Filter, which FeedImage to fetch.
     */
    where?: FeedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedImages to fetch.
     */
    orderBy?: FeedImageOrderByWithRelationInput | FeedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedImages.
     */
    cursor?: FeedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedImages.
     */
    distinct?: FeedImageScalarFieldEnum | FeedImageScalarFieldEnum[]
  }

  /**
   * FeedImage findMany
   */
  export type FeedImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * Filter, which FeedImages to fetch.
     */
    where?: FeedImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedImages to fetch.
     */
    orderBy?: FeedImageOrderByWithRelationInput | FeedImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedImages.
     */
    cursor?: FeedImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedImages.
     */
    skip?: number
    distinct?: FeedImageScalarFieldEnum | FeedImageScalarFieldEnum[]
  }

  /**
   * FeedImage create
   */
  export type FeedImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedImage.
     */
    data: XOR<FeedImageCreateInput, FeedImageUncheckedCreateInput>
  }

  /**
   * FeedImage createMany
   */
  export type FeedImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedImages.
     */
    data: FeedImageCreateManyInput | FeedImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedImage createManyAndReturn
   */
  export type FeedImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * The data used to create many FeedImages.
     */
    data: FeedImageCreateManyInput | FeedImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedImage update
   */
  export type FeedImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedImage.
     */
    data: XOR<FeedImageUpdateInput, FeedImageUncheckedUpdateInput>
    /**
     * Choose, which FeedImage to update.
     */
    where: FeedImageWhereUniqueInput
  }

  /**
   * FeedImage updateMany
   */
  export type FeedImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedImages.
     */
    data: XOR<FeedImageUpdateManyMutationInput, FeedImageUncheckedUpdateManyInput>
    /**
     * Filter which FeedImages to update
     */
    where?: FeedImageWhereInput
    /**
     * Limit how many FeedImages to update.
     */
    limit?: number
  }

  /**
   * FeedImage updateManyAndReturn
   */
  export type FeedImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * The data used to update FeedImages.
     */
    data: XOR<FeedImageUpdateManyMutationInput, FeedImageUncheckedUpdateManyInput>
    /**
     * Filter which FeedImages to update
     */
    where?: FeedImageWhereInput
    /**
     * Limit how many FeedImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedImage upsert
   */
  export type FeedImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedImage to update in case it exists.
     */
    where: FeedImageWhereUniqueInput
    /**
     * In case the FeedImage found by the `where` argument doesn't exist, create a new FeedImage with this data.
     */
    create: XOR<FeedImageCreateInput, FeedImageUncheckedCreateInput>
    /**
     * In case the FeedImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedImageUpdateInput, FeedImageUncheckedUpdateInput>
  }

  /**
   * FeedImage delete
   */
  export type FeedImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
    /**
     * Filter which FeedImage to delete.
     */
    where: FeedImageWhereUniqueInput
  }

  /**
   * FeedImage deleteMany
   */
  export type FeedImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedImages to delete
     */
    where?: FeedImageWhereInput
    /**
     * Limit how many FeedImages to delete.
     */
    limit?: number
  }

  /**
   * FeedImage without action
   */
  export type FeedImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedImage
     */
    select?: FeedImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedImage
     */
    omit?: FeedImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedImageInclude<ExtArgs> | null
  }


  /**
   * Model FeedLike
   */

  export type AggregateFeedLike = {
    _count: FeedLikeCountAggregateOutputType | null
    _min: FeedLikeMinAggregateOutputType | null
    _max: FeedLikeMaxAggregateOutputType | null
  }

  export type FeedLikeMinAggregateOutputType = {
    id: string | null
    feedId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedLikeMaxAggregateOutputType = {
    id: string | null
    feedId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedLikeCountAggregateOutputType = {
    id: number
    feedId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeedLikeMinAggregateInputType = {
    id?: true
    feedId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedLikeMaxAggregateInputType = {
    id?: true
    feedId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedLikeCountAggregateInputType = {
    id?: true
    feedId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeedLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedLike to aggregate.
     */
    where?: FeedLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLikes to fetch.
     */
    orderBy?: FeedLikeOrderByWithRelationInput | FeedLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedLikes
    **/
    _count?: true | FeedLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedLikeMaxAggregateInputType
  }

  export type GetFeedLikeAggregateType<T extends FeedLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedLike[P]>
      : GetScalarType<T[P], AggregateFeedLike[P]>
  }




  export type FeedLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedLikeWhereInput
    orderBy?: FeedLikeOrderByWithAggregationInput | FeedLikeOrderByWithAggregationInput[]
    by: FeedLikeScalarFieldEnum[] | FeedLikeScalarFieldEnum
    having?: FeedLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedLikeCountAggregateInputType | true
    _min?: FeedLikeMinAggregateInputType
    _max?: FeedLikeMaxAggregateInputType
  }

  export type FeedLikeGroupByOutputType = {
    id: string
    feedId: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: FeedLikeCountAggregateOutputType | null
    _min: FeedLikeMinAggregateOutputType | null
    _max: FeedLikeMaxAggregateOutputType | null
  }

  type GetFeedLikeGroupByPayload<T extends FeedLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedLikeGroupByOutputType[P]>
            : GetScalarType<T[P], FeedLikeGroupByOutputType[P]>
        }
      >
    >


  export type FeedLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedLike"]>

  export type FeedLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedLike"]>

  export type FeedLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedLike"]>

  export type FeedLikeSelectScalar = {
    id?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeedLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "feedId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["feedLike"]>
  export type FeedLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedLike"
    objects: {
      feed: Prisma.$ChurchFeedPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      feedId: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feedLike"]>
    composites: {}
  }

  type FeedLikeGetPayload<S extends boolean | null | undefined | FeedLikeDefaultArgs> = $Result.GetResult<Prisma.$FeedLikePayload, S>

  type FeedLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedLikeCountAggregateInputType | true
    }

  export interface FeedLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedLike'], meta: { name: 'FeedLike' } }
    /**
     * Find zero or one FeedLike that matches the filter.
     * @param {FeedLikeFindUniqueArgs} args - Arguments to find a FeedLike
     * @example
     * // Get one FeedLike
     * const feedLike = await prisma.feedLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedLikeFindUniqueArgs>(args: SelectSubset<T, FeedLikeFindUniqueArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedLikeFindUniqueOrThrowArgs} args - Arguments to find a FeedLike
     * @example
     * // Get one FeedLike
     * const feedLike = await prisma.feedLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeFindFirstArgs} args - Arguments to find a FeedLike
     * @example
     * // Get one FeedLike
     * const feedLike = await prisma.feedLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedLikeFindFirstArgs>(args?: SelectSubset<T, FeedLikeFindFirstArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeFindFirstOrThrowArgs} args - Arguments to find a FeedLike
     * @example
     * // Get one FeedLike
     * const feedLike = await prisma.feedLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedLikes
     * const feedLikes = await prisma.feedLike.findMany()
     * 
     * // Get first 10 FeedLikes
     * const feedLikes = await prisma.feedLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedLikeWithIdOnly = await prisma.feedLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedLikeFindManyArgs>(args?: SelectSubset<T, FeedLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedLike.
     * @param {FeedLikeCreateArgs} args - Arguments to create a FeedLike.
     * @example
     * // Create one FeedLike
     * const FeedLike = await prisma.feedLike.create({
     *   data: {
     *     // ... data to create a FeedLike
     *   }
     * })
     * 
     */
    create<T extends FeedLikeCreateArgs>(args: SelectSubset<T, FeedLikeCreateArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedLikes.
     * @param {FeedLikeCreateManyArgs} args - Arguments to create many FeedLikes.
     * @example
     * // Create many FeedLikes
     * const feedLike = await prisma.feedLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedLikeCreateManyArgs>(args?: SelectSubset<T, FeedLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedLikes and returns the data saved in the database.
     * @param {FeedLikeCreateManyAndReturnArgs} args - Arguments to create many FeedLikes.
     * @example
     * // Create many FeedLikes
     * const feedLike = await prisma.feedLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedLikes and only return the `id`
     * const feedLikeWithIdOnly = await prisma.feedLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedLike.
     * @param {FeedLikeDeleteArgs} args - Arguments to delete one FeedLike.
     * @example
     * // Delete one FeedLike
     * const FeedLike = await prisma.feedLike.delete({
     *   where: {
     *     // ... filter to delete one FeedLike
     *   }
     * })
     * 
     */
    delete<T extends FeedLikeDeleteArgs>(args: SelectSubset<T, FeedLikeDeleteArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedLike.
     * @param {FeedLikeUpdateArgs} args - Arguments to update one FeedLike.
     * @example
     * // Update one FeedLike
     * const feedLike = await prisma.feedLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedLikeUpdateArgs>(args: SelectSubset<T, FeedLikeUpdateArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedLikes.
     * @param {FeedLikeDeleteManyArgs} args - Arguments to filter FeedLikes to delete.
     * @example
     * // Delete a few FeedLikes
     * const { count } = await prisma.feedLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedLikeDeleteManyArgs>(args?: SelectSubset<T, FeedLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedLikes
     * const feedLike = await prisma.feedLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedLikeUpdateManyArgs>(args: SelectSubset<T, FeedLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedLikes and returns the data updated in the database.
     * @param {FeedLikeUpdateManyAndReturnArgs} args - Arguments to update many FeedLikes.
     * @example
     * // Update many FeedLikes
     * const feedLike = await prisma.feedLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedLikes and only return the `id`
     * const feedLikeWithIdOnly = await prisma.feedLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedLike.
     * @param {FeedLikeUpsertArgs} args - Arguments to update or create a FeedLike.
     * @example
     * // Update or create a FeedLike
     * const feedLike = await prisma.feedLike.upsert({
     *   create: {
     *     // ... data to create a FeedLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedLike we want to update
     *   }
     * })
     */
    upsert<T extends FeedLikeUpsertArgs>(args: SelectSubset<T, FeedLikeUpsertArgs<ExtArgs>>): Prisma__FeedLikeClient<$Result.GetResult<Prisma.$FeedLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeCountArgs} args - Arguments to filter FeedLikes to count.
     * @example
     * // Count the number of FeedLikes
     * const count = await prisma.feedLike.count({
     *   where: {
     *     // ... the filter for the FeedLikes we want to count
     *   }
     * })
    **/
    count<T extends FeedLikeCountArgs>(
      args?: Subset<T, FeedLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedLikeAggregateArgs>(args: Subset<T, FeedLikeAggregateArgs>): Prisma.PrismaPromise<GetFeedLikeAggregateType<T>>

    /**
     * Group by FeedLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedLikeGroupByArgs['orderBy'] }
        : { orderBy?: FeedLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedLike model
   */
  readonly fields: FeedLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feed<T extends ChurchFeedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchFeedDefaultArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedLike model
   */
  interface FeedLikeFieldRefs {
    readonly id: FieldRef<"FeedLike", 'String'>
    readonly feedId: FieldRef<"FeedLike", 'String'>
    readonly userId: FieldRef<"FeedLike", 'String'>
    readonly createdAt: FieldRef<"FeedLike", 'DateTime'>
    readonly updatedAt: FieldRef<"FeedLike", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeedLike findUnique
   */
  export type FeedLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * Filter, which FeedLike to fetch.
     */
    where: FeedLikeWhereUniqueInput
  }

  /**
   * FeedLike findUniqueOrThrow
   */
  export type FeedLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * Filter, which FeedLike to fetch.
     */
    where: FeedLikeWhereUniqueInput
  }

  /**
   * FeedLike findFirst
   */
  export type FeedLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * Filter, which FeedLike to fetch.
     */
    where?: FeedLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLikes to fetch.
     */
    orderBy?: FeedLikeOrderByWithRelationInput | FeedLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedLikes.
     */
    cursor?: FeedLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedLikes.
     */
    distinct?: FeedLikeScalarFieldEnum | FeedLikeScalarFieldEnum[]
  }

  /**
   * FeedLike findFirstOrThrow
   */
  export type FeedLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * Filter, which FeedLike to fetch.
     */
    where?: FeedLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLikes to fetch.
     */
    orderBy?: FeedLikeOrderByWithRelationInput | FeedLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedLikes.
     */
    cursor?: FeedLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedLikes.
     */
    distinct?: FeedLikeScalarFieldEnum | FeedLikeScalarFieldEnum[]
  }

  /**
   * FeedLike findMany
   */
  export type FeedLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * Filter, which FeedLikes to fetch.
     */
    where?: FeedLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLikes to fetch.
     */
    orderBy?: FeedLikeOrderByWithRelationInput | FeedLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedLikes.
     */
    cursor?: FeedLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLikes.
     */
    skip?: number
    distinct?: FeedLikeScalarFieldEnum | FeedLikeScalarFieldEnum[]
  }

  /**
   * FeedLike create
   */
  export type FeedLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedLike.
     */
    data: XOR<FeedLikeCreateInput, FeedLikeUncheckedCreateInput>
  }

  /**
   * FeedLike createMany
   */
  export type FeedLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedLikes.
     */
    data: FeedLikeCreateManyInput | FeedLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedLike createManyAndReturn
   */
  export type FeedLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * The data used to create many FeedLikes.
     */
    data: FeedLikeCreateManyInput | FeedLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedLike update
   */
  export type FeedLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedLike.
     */
    data: XOR<FeedLikeUpdateInput, FeedLikeUncheckedUpdateInput>
    /**
     * Choose, which FeedLike to update.
     */
    where: FeedLikeWhereUniqueInput
  }

  /**
   * FeedLike updateMany
   */
  export type FeedLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedLikes.
     */
    data: XOR<FeedLikeUpdateManyMutationInput, FeedLikeUncheckedUpdateManyInput>
    /**
     * Filter which FeedLikes to update
     */
    where?: FeedLikeWhereInput
    /**
     * Limit how many FeedLikes to update.
     */
    limit?: number
  }

  /**
   * FeedLike updateManyAndReturn
   */
  export type FeedLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * The data used to update FeedLikes.
     */
    data: XOR<FeedLikeUpdateManyMutationInput, FeedLikeUncheckedUpdateManyInput>
    /**
     * Filter which FeedLikes to update
     */
    where?: FeedLikeWhereInput
    /**
     * Limit how many FeedLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedLike upsert
   */
  export type FeedLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedLike to update in case it exists.
     */
    where: FeedLikeWhereUniqueInput
    /**
     * In case the FeedLike found by the `where` argument doesn't exist, create a new FeedLike with this data.
     */
    create: XOR<FeedLikeCreateInput, FeedLikeUncheckedCreateInput>
    /**
     * In case the FeedLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedLikeUpdateInput, FeedLikeUncheckedUpdateInput>
  }

  /**
   * FeedLike delete
   */
  export type FeedLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
    /**
     * Filter which FeedLike to delete.
     */
    where: FeedLikeWhereUniqueInput
  }

  /**
   * FeedLike deleteMany
   */
  export type FeedLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedLikes to delete
     */
    where?: FeedLikeWhereInput
    /**
     * Limit how many FeedLikes to delete.
     */
    limit?: number
  }

  /**
   * FeedLike without action
   */
  export type FeedLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLike
     */
    select?: FeedLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedLike
     */
    omit?: FeedLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLikeInclude<ExtArgs> | null
  }


  /**
   * Model FeedComment
   */

  export type AggregateFeedComment = {
    _count: FeedCommentCountAggregateOutputType | null
    _min: FeedCommentMinAggregateOutputType | null
    _max: FeedCommentMaxAggregateOutputType | null
  }

  export type FeedCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    feedId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    feedId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedCommentCountAggregateOutputType = {
    id: number
    content: number
    feedId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeedCommentMinAggregateInputType = {
    id?: true
    content?: true
    feedId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedCommentMaxAggregateInputType = {
    id?: true
    content?: true
    feedId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedCommentCountAggregateInputType = {
    id?: true
    content?: true
    feedId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeedCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedComment to aggregate.
     */
    where?: FeedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedComments to fetch.
     */
    orderBy?: FeedCommentOrderByWithRelationInput | FeedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedComments
    **/
    _count?: true | FeedCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedCommentMaxAggregateInputType
  }

  export type GetFeedCommentAggregateType<T extends FeedCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedComment[P]>
      : GetScalarType<T[P], AggregateFeedComment[P]>
  }




  export type FeedCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedCommentWhereInput
    orderBy?: FeedCommentOrderByWithAggregationInput | FeedCommentOrderByWithAggregationInput[]
    by: FeedCommentScalarFieldEnum[] | FeedCommentScalarFieldEnum
    having?: FeedCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedCommentCountAggregateInputType | true
    _min?: FeedCommentMinAggregateInputType
    _max?: FeedCommentMaxAggregateInputType
  }

  export type FeedCommentGroupByOutputType = {
    id: string
    content: string
    feedId: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: FeedCommentCountAggregateOutputType | null
    _min: FeedCommentMinAggregateOutputType | null
    _max: FeedCommentMaxAggregateOutputType | null
  }

  type GetFeedCommentGroupByPayload<T extends FeedCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedCommentGroupByOutputType[P]>
            : GetScalarType<T[P], FeedCommentGroupByOutputType[P]>
        }
      >
    >


  export type FeedCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedComment"]>

  export type FeedCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedComment"]>

  export type FeedCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedComment"]>

  export type FeedCommentSelectScalar = {
    id?: boolean
    content?: boolean
    feedId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeedCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "feedId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["feedComment"]>
  export type FeedCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feed?: boolean | ChurchFeedDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedComment"
    objects: {
      feed: Prisma.$ChurchFeedPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      feedId: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feedComment"]>
    composites: {}
  }

  type FeedCommentGetPayload<S extends boolean | null | undefined | FeedCommentDefaultArgs> = $Result.GetResult<Prisma.$FeedCommentPayload, S>

  type FeedCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedCommentCountAggregateInputType | true
    }

  export interface FeedCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedComment'], meta: { name: 'FeedComment' } }
    /**
     * Find zero or one FeedComment that matches the filter.
     * @param {FeedCommentFindUniqueArgs} args - Arguments to find a FeedComment
     * @example
     * // Get one FeedComment
     * const feedComment = await prisma.feedComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedCommentFindUniqueArgs>(args: SelectSubset<T, FeedCommentFindUniqueArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedCommentFindUniqueOrThrowArgs} args - Arguments to find a FeedComment
     * @example
     * // Get one FeedComment
     * const feedComment = await prisma.feedComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentFindFirstArgs} args - Arguments to find a FeedComment
     * @example
     * // Get one FeedComment
     * const feedComment = await prisma.feedComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedCommentFindFirstArgs>(args?: SelectSubset<T, FeedCommentFindFirstArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentFindFirstOrThrowArgs} args - Arguments to find a FeedComment
     * @example
     * // Get one FeedComment
     * const feedComment = await prisma.feedComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedComments
     * const feedComments = await prisma.feedComment.findMany()
     * 
     * // Get first 10 FeedComments
     * const feedComments = await prisma.feedComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedCommentWithIdOnly = await prisma.feedComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedCommentFindManyArgs>(args?: SelectSubset<T, FeedCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedComment.
     * @param {FeedCommentCreateArgs} args - Arguments to create a FeedComment.
     * @example
     * // Create one FeedComment
     * const FeedComment = await prisma.feedComment.create({
     *   data: {
     *     // ... data to create a FeedComment
     *   }
     * })
     * 
     */
    create<T extends FeedCommentCreateArgs>(args: SelectSubset<T, FeedCommentCreateArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedComments.
     * @param {FeedCommentCreateManyArgs} args - Arguments to create many FeedComments.
     * @example
     * // Create many FeedComments
     * const feedComment = await prisma.feedComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedCommentCreateManyArgs>(args?: SelectSubset<T, FeedCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedComments and returns the data saved in the database.
     * @param {FeedCommentCreateManyAndReturnArgs} args - Arguments to create many FeedComments.
     * @example
     * // Create many FeedComments
     * const feedComment = await prisma.feedComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedComments and only return the `id`
     * const feedCommentWithIdOnly = await prisma.feedComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedComment.
     * @param {FeedCommentDeleteArgs} args - Arguments to delete one FeedComment.
     * @example
     * // Delete one FeedComment
     * const FeedComment = await prisma.feedComment.delete({
     *   where: {
     *     // ... filter to delete one FeedComment
     *   }
     * })
     * 
     */
    delete<T extends FeedCommentDeleteArgs>(args: SelectSubset<T, FeedCommentDeleteArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedComment.
     * @param {FeedCommentUpdateArgs} args - Arguments to update one FeedComment.
     * @example
     * // Update one FeedComment
     * const feedComment = await prisma.feedComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedCommentUpdateArgs>(args: SelectSubset<T, FeedCommentUpdateArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedComments.
     * @param {FeedCommentDeleteManyArgs} args - Arguments to filter FeedComments to delete.
     * @example
     * // Delete a few FeedComments
     * const { count } = await prisma.feedComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedCommentDeleteManyArgs>(args?: SelectSubset<T, FeedCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedComments
     * const feedComment = await prisma.feedComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedCommentUpdateManyArgs>(args: SelectSubset<T, FeedCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedComments and returns the data updated in the database.
     * @param {FeedCommentUpdateManyAndReturnArgs} args - Arguments to update many FeedComments.
     * @example
     * // Update many FeedComments
     * const feedComment = await prisma.feedComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedComments and only return the `id`
     * const feedCommentWithIdOnly = await prisma.feedComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedComment.
     * @param {FeedCommentUpsertArgs} args - Arguments to update or create a FeedComment.
     * @example
     * // Update or create a FeedComment
     * const feedComment = await prisma.feedComment.upsert({
     *   create: {
     *     // ... data to create a FeedComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedComment we want to update
     *   }
     * })
     */
    upsert<T extends FeedCommentUpsertArgs>(args: SelectSubset<T, FeedCommentUpsertArgs<ExtArgs>>): Prisma__FeedCommentClient<$Result.GetResult<Prisma.$FeedCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentCountArgs} args - Arguments to filter FeedComments to count.
     * @example
     * // Count the number of FeedComments
     * const count = await prisma.feedComment.count({
     *   where: {
     *     // ... the filter for the FeedComments we want to count
     *   }
     * })
    **/
    count<T extends FeedCommentCountArgs>(
      args?: Subset<T, FeedCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedCommentAggregateArgs>(args: Subset<T, FeedCommentAggregateArgs>): Prisma.PrismaPromise<GetFeedCommentAggregateType<T>>

    /**
     * Group by FeedComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedCommentGroupByArgs['orderBy'] }
        : { orderBy?: FeedCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedComment model
   */
  readonly fields: FeedCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feed<T extends ChurchFeedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChurchFeedDefaultArgs<ExtArgs>>): Prisma__ChurchFeedClient<$Result.GetResult<Prisma.$ChurchFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedComment model
   */
  interface FeedCommentFieldRefs {
    readonly id: FieldRef<"FeedComment", 'String'>
    readonly content: FieldRef<"FeedComment", 'String'>
    readonly feedId: FieldRef<"FeedComment", 'String'>
    readonly userId: FieldRef<"FeedComment", 'String'>
    readonly createdAt: FieldRef<"FeedComment", 'DateTime'>
    readonly updatedAt: FieldRef<"FeedComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeedComment findUnique
   */
  export type FeedCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * Filter, which FeedComment to fetch.
     */
    where: FeedCommentWhereUniqueInput
  }

  /**
   * FeedComment findUniqueOrThrow
   */
  export type FeedCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * Filter, which FeedComment to fetch.
     */
    where: FeedCommentWhereUniqueInput
  }

  /**
   * FeedComment findFirst
   */
  export type FeedCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * Filter, which FeedComment to fetch.
     */
    where?: FeedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedComments to fetch.
     */
    orderBy?: FeedCommentOrderByWithRelationInput | FeedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedComments.
     */
    cursor?: FeedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedComments.
     */
    distinct?: FeedCommentScalarFieldEnum | FeedCommentScalarFieldEnum[]
  }

  /**
   * FeedComment findFirstOrThrow
   */
  export type FeedCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * Filter, which FeedComment to fetch.
     */
    where?: FeedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedComments to fetch.
     */
    orderBy?: FeedCommentOrderByWithRelationInput | FeedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedComments.
     */
    cursor?: FeedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedComments.
     */
    distinct?: FeedCommentScalarFieldEnum | FeedCommentScalarFieldEnum[]
  }

  /**
   * FeedComment findMany
   */
  export type FeedCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * Filter, which FeedComments to fetch.
     */
    where?: FeedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedComments to fetch.
     */
    orderBy?: FeedCommentOrderByWithRelationInput | FeedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedComments.
     */
    cursor?: FeedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedComments.
     */
    skip?: number
    distinct?: FeedCommentScalarFieldEnum | FeedCommentScalarFieldEnum[]
  }

  /**
   * FeedComment create
   */
  export type FeedCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedComment.
     */
    data: XOR<FeedCommentCreateInput, FeedCommentUncheckedCreateInput>
  }

  /**
   * FeedComment createMany
   */
  export type FeedCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedComments.
     */
    data: FeedCommentCreateManyInput | FeedCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedComment createManyAndReturn
   */
  export type FeedCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * The data used to create many FeedComments.
     */
    data: FeedCommentCreateManyInput | FeedCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedComment update
   */
  export type FeedCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedComment.
     */
    data: XOR<FeedCommentUpdateInput, FeedCommentUncheckedUpdateInput>
    /**
     * Choose, which FeedComment to update.
     */
    where: FeedCommentWhereUniqueInput
  }

  /**
   * FeedComment updateMany
   */
  export type FeedCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedComments.
     */
    data: XOR<FeedCommentUpdateManyMutationInput, FeedCommentUncheckedUpdateManyInput>
    /**
     * Filter which FeedComments to update
     */
    where?: FeedCommentWhereInput
    /**
     * Limit how many FeedComments to update.
     */
    limit?: number
  }

  /**
   * FeedComment updateManyAndReturn
   */
  export type FeedCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * The data used to update FeedComments.
     */
    data: XOR<FeedCommentUpdateManyMutationInput, FeedCommentUncheckedUpdateManyInput>
    /**
     * Filter which FeedComments to update
     */
    where?: FeedCommentWhereInput
    /**
     * Limit how many FeedComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedComment upsert
   */
  export type FeedCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedComment to update in case it exists.
     */
    where: FeedCommentWhereUniqueInput
    /**
     * In case the FeedComment found by the `where` argument doesn't exist, create a new FeedComment with this data.
     */
    create: XOR<FeedCommentCreateInput, FeedCommentUncheckedCreateInput>
    /**
     * In case the FeedComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedCommentUpdateInput, FeedCommentUncheckedUpdateInput>
  }

  /**
   * FeedComment delete
   */
  export type FeedCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
    /**
     * Filter which FeedComment to delete.
     */
    where: FeedCommentWhereUniqueInput
  }

  /**
   * FeedComment deleteMany
   */
  export type FeedCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedComments to delete
     */
    where?: FeedCommentWhereInput
    /**
     * Limit how many FeedComments to delete.
     */
    limit?: number
  }

  /**
   * FeedComment without action
   */
  export type FeedCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedComment
     */
    select?: FeedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedComment
     */
    omit?: FeedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedCommentInclude<ExtArgs> | null
  }


  /**
   * Model MinistryPosition
   */

  export type AggregateMinistryPosition = {
    _count: MinistryPositionCountAggregateOutputType | null
    _avg: MinistryPositionAvgAggregateOutputType | null
    _sum: MinistryPositionSumAggregateOutputType | null
    _min: MinistryPositionMinAggregateOutputType | null
    _max: MinistryPositionMaxAggregateOutputType | null
  }

  export type MinistryPositionAvgAggregateOutputType = {
    maxMembers: number | null
  }

  export type MinistryPositionSumAggregateOutputType = {
    maxMembers: number | null
  }

  export type MinistryPositionMinAggregateOutputType = {
    id: string | null
    ministryId: string | null
    name: string | null
    description: string | null
    maxMembers: number | null
  }

  export type MinistryPositionMaxAggregateOutputType = {
    id: string | null
    ministryId: string | null
    name: string | null
    description: string | null
    maxMembers: number | null
  }

  export type MinistryPositionCountAggregateOutputType = {
    id: number
    ministryId: number
    name: number
    description: number
    maxMembers: number
    _all: number
  }


  export type MinistryPositionAvgAggregateInputType = {
    maxMembers?: true
  }

  export type MinistryPositionSumAggregateInputType = {
    maxMembers?: true
  }

  export type MinistryPositionMinAggregateInputType = {
    id?: true
    ministryId?: true
    name?: true
    description?: true
    maxMembers?: true
  }

  export type MinistryPositionMaxAggregateInputType = {
    id?: true
    ministryId?: true
    name?: true
    description?: true
    maxMembers?: true
  }

  export type MinistryPositionCountAggregateInputType = {
    id?: true
    ministryId?: true
    name?: true
    description?: true
    maxMembers?: true
    _all?: true
  }

  export type MinistryPositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryPosition to aggregate.
     */
    where?: MinistryPositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryPositions to fetch.
     */
    orderBy?: MinistryPositionOrderByWithRelationInput | MinistryPositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryPositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryPositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryPositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistryPositions
    **/
    _count?: true | MinistryPositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MinistryPositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MinistryPositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryPositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryPositionMaxAggregateInputType
  }

  export type GetMinistryPositionAggregateType<T extends MinistryPositionAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistryPosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistryPosition[P]>
      : GetScalarType<T[P], AggregateMinistryPosition[P]>
  }




  export type MinistryPositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryPositionWhereInput
    orderBy?: MinistryPositionOrderByWithAggregationInput | MinistryPositionOrderByWithAggregationInput[]
    by: MinistryPositionScalarFieldEnum[] | MinistryPositionScalarFieldEnum
    having?: MinistryPositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryPositionCountAggregateInputType | true
    _avg?: MinistryPositionAvgAggregateInputType
    _sum?: MinistryPositionSumAggregateInputType
    _min?: MinistryPositionMinAggregateInputType
    _max?: MinistryPositionMaxAggregateInputType
  }

  export type MinistryPositionGroupByOutputType = {
    id: string
    ministryId: string
    name: string
    description: string | null
    maxMembers: number | null
    _count: MinistryPositionCountAggregateOutputType | null
    _avg: MinistryPositionAvgAggregateOutputType | null
    _sum: MinistryPositionSumAggregateOutputType | null
    _min: MinistryPositionMinAggregateOutputType | null
    _max: MinistryPositionMaxAggregateOutputType | null
  }

  type GetMinistryPositionGroupByPayload<T extends MinistryPositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryPositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryPositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryPositionGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryPositionGroupByOutputType[P]>
        }
      >
    >


  export type MinistryPositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    name?: boolean
    description?: boolean
    maxMembers?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    schedules?: boolean | MinistryPosition$schedulesArgs<ExtArgs>
    _count?: boolean | MinistryPositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryPosition"]>

  export type MinistryPositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    name?: boolean
    description?: boolean
    maxMembers?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryPosition"]>

  export type MinistryPositionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ministryId?: boolean
    name?: boolean
    description?: boolean
    maxMembers?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryPosition"]>

  export type MinistryPositionSelectScalar = {
    id?: boolean
    ministryId?: boolean
    name?: boolean
    description?: boolean
    maxMembers?: boolean
  }

  export type MinistryPositionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ministryId" | "name" | "description" | "maxMembers", ExtArgs["result"]["ministryPosition"]>
  export type MinistryPositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    schedules?: boolean | MinistryPosition$schedulesArgs<ExtArgs>
    _count?: boolean | MinistryPositionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MinistryPositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }
  export type MinistryPositionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
  }

  export type $MinistryPositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistryPosition"
    objects: {
      ministry: Prisma.$MinistryPayload<ExtArgs>
      schedules: Prisma.$MinistrySchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ministryId: string
      name: string
      description: string | null
      maxMembers: number | null
    }, ExtArgs["result"]["ministryPosition"]>
    composites: {}
  }

  type MinistryPositionGetPayload<S extends boolean | null | undefined | MinistryPositionDefaultArgs> = $Result.GetResult<Prisma.$MinistryPositionPayload, S>

  type MinistryPositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryPositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryPositionCountAggregateInputType | true
    }

  export interface MinistryPositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistryPosition'], meta: { name: 'MinistryPosition' } }
    /**
     * Find zero or one MinistryPosition that matches the filter.
     * @param {MinistryPositionFindUniqueArgs} args - Arguments to find a MinistryPosition
     * @example
     * // Get one MinistryPosition
     * const ministryPosition = await prisma.ministryPosition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryPositionFindUniqueArgs>(args: SelectSubset<T, MinistryPositionFindUniqueArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistryPosition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryPositionFindUniqueOrThrowArgs} args - Arguments to find a MinistryPosition
     * @example
     * // Get one MinistryPosition
     * const ministryPosition = await prisma.ministryPosition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryPositionFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryPositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryPosition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionFindFirstArgs} args - Arguments to find a MinistryPosition
     * @example
     * // Get one MinistryPosition
     * const ministryPosition = await prisma.ministryPosition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryPositionFindFirstArgs>(args?: SelectSubset<T, MinistryPositionFindFirstArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryPosition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionFindFirstOrThrowArgs} args - Arguments to find a MinistryPosition
     * @example
     * // Get one MinistryPosition
     * const ministryPosition = await prisma.ministryPosition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryPositionFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryPositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistryPositions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistryPositions
     * const ministryPositions = await prisma.ministryPosition.findMany()
     * 
     * // Get first 10 MinistryPositions
     * const ministryPositions = await prisma.ministryPosition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryPositionWithIdOnly = await prisma.ministryPosition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryPositionFindManyArgs>(args?: SelectSubset<T, MinistryPositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistryPosition.
     * @param {MinistryPositionCreateArgs} args - Arguments to create a MinistryPosition.
     * @example
     * // Create one MinistryPosition
     * const MinistryPosition = await prisma.ministryPosition.create({
     *   data: {
     *     // ... data to create a MinistryPosition
     *   }
     * })
     * 
     */
    create<T extends MinistryPositionCreateArgs>(args: SelectSubset<T, MinistryPositionCreateArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistryPositions.
     * @param {MinistryPositionCreateManyArgs} args - Arguments to create many MinistryPositions.
     * @example
     * // Create many MinistryPositions
     * const ministryPosition = await prisma.ministryPosition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryPositionCreateManyArgs>(args?: SelectSubset<T, MinistryPositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistryPositions and returns the data saved in the database.
     * @param {MinistryPositionCreateManyAndReturnArgs} args - Arguments to create many MinistryPositions.
     * @example
     * // Create many MinistryPositions
     * const ministryPosition = await prisma.ministryPosition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistryPositions and only return the `id`
     * const ministryPositionWithIdOnly = await prisma.ministryPosition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryPositionCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryPositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistryPosition.
     * @param {MinistryPositionDeleteArgs} args - Arguments to delete one MinistryPosition.
     * @example
     * // Delete one MinistryPosition
     * const MinistryPosition = await prisma.ministryPosition.delete({
     *   where: {
     *     // ... filter to delete one MinistryPosition
     *   }
     * })
     * 
     */
    delete<T extends MinistryPositionDeleteArgs>(args: SelectSubset<T, MinistryPositionDeleteArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistryPosition.
     * @param {MinistryPositionUpdateArgs} args - Arguments to update one MinistryPosition.
     * @example
     * // Update one MinistryPosition
     * const ministryPosition = await prisma.ministryPosition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryPositionUpdateArgs>(args: SelectSubset<T, MinistryPositionUpdateArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistryPositions.
     * @param {MinistryPositionDeleteManyArgs} args - Arguments to filter MinistryPositions to delete.
     * @example
     * // Delete a few MinistryPositions
     * const { count } = await prisma.ministryPosition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryPositionDeleteManyArgs>(args?: SelectSubset<T, MinistryPositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryPositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistryPositions
     * const ministryPosition = await prisma.ministryPosition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryPositionUpdateManyArgs>(args: SelectSubset<T, MinistryPositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryPositions and returns the data updated in the database.
     * @param {MinistryPositionUpdateManyAndReturnArgs} args - Arguments to update many MinistryPositions.
     * @example
     * // Update many MinistryPositions
     * const ministryPosition = await prisma.ministryPosition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistryPositions and only return the `id`
     * const ministryPositionWithIdOnly = await prisma.ministryPosition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryPositionUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryPositionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistryPosition.
     * @param {MinistryPositionUpsertArgs} args - Arguments to update or create a MinistryPosition.
     * @example
     * // Update or create a MinistryPosition
     * const ministryPosition = await prisma.ministryPosition.upsert({
     *   create: {
     *     // ... data to create a MinistryPosition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistryPosition we want to update
     *   }
     * })
     */
    upsert<T extends MinistryPositionUpsertArgs>(args: SelectSubset<T, MinistryPositionUpsertArgs<ExtArgs>>): Prisma__MinistryPositionClient<$Result.GetResult<Prisma.$MinistryPositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistryPositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionCountArgs} args - Arguments to filter MinistryPositions to count.
     * @example
     * // Count the number of MinistryPositions
     * const count = await prisma.ministryPosition.count({
     *   where: {
     *     // ... the filter for the MinistryPositions we want to count
     *   }
     * })
    **/
    count<T extends MinistryPositionCountArgs>(
      args?: Subset<T, MinistryPositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryPositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistryPosition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryPositionAggregateArgs>(args: Subset<T, MinistryPositionAggregateArgs>): Prisma.PrismaPromise<GetMinistryPositionAggregateType<T>>

    /**
     * Group by MinistryPosition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryPositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryPositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryPositionGroupByArgs['orderBy'] }
        : { orderBy?: MinistryPositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryPositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistryPosition model
   */
  readonly fields: MinistryPositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistryPosition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryPositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ministry<T extends MinistryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryDefaultArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    schedules<T extends MinistryPosition$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, MinistryPosition$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistrySchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistryPosition model
   */
  interface MinistryPositionFieldRefs {
    readonly id: FieldRef<"MinistryPosition", 'String'>
    readonly ministryId: FieldRef<"MinistryPosition", 'String'>
    readonly name: FieldRef<"MinistryPosition", 'String'>
    readonly description: FieldRef<"MinistryPosition", 'String'>
    readonly maxMembers: FieldRef<"MinistryPosition", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MinistryPosition findUnique
   */
  export type MinistryPositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * Filter, which MinistryPosition to fetch.
     */
    where: MinistryPositionWhereUniqueInput
  }

  /**
   * MinistryPosition findUniqueOrThrow
   */
  export type MinistryPositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * Filter, which MinistryPosition to fetch.
     */
    where: MinistryPositionWhereUniqueInput
  }

  /**
   * MinistryPosition findFirst
   */
  export type MinistryPositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * Filter, which MinistryPosition to fetch.
     */
    where?: MinistryPositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryPositions to fetch.
     */
    orderBy?: MinistryPositionOrderByWithRelationInput | MinistryPositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryPositions.
     */
    cursor?: MinistryPositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryPositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryPositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryPositions.
     */
    distinct?: MinistryPositionScalarFieldEnum | MinistryPositionScalarFieldEnum[]
  }

  /**
   * MinistryPosition findFirstOrThrow
   */
  export type MinistryPositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * Filter, which MinistryPosition to fetch.
     */
    where?: MinistryPositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryPositions to fetch.
     */
    orderBy?: MinistryPositionOrderByWithRelationInput | MinistryPositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryPositions.
     */
    cursor?: MinistryPositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryPositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryPositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryPositions.
     */
    distinct?: MinistryPositionScalarFieldEnum | MinistryPositionScalarFieldEnum[]
  }

  /**
   * MinistryPosition findMany
   */
  export type MinistryPositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * Filter, which MinistryPositions to fetch.
     */
    where?: MinistryPositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryPositions to fetch.
     */
    orderBy?: MinistryPositionOrderByWithRelationInput | MinistryPositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistryPositions.
     */
    cursor?: MinistryPositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryPositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryPositions.
     */
    skip?: number
    distinct?: MinistryPositionScalarFieldEnum | MinistryPositionScalarFieldEnum[]
  }

  /**
   * MinistryPosition create
   */
  export type MinistryPositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistryPosition.
     */
    data: XOR<MinistryPositionCreateInput, MinistryPositionUncheckedCreateInput>
  }

  /**
   * MinistryPosition createMany
   */
  export type MinistryPositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistryPositions.
     */
    data: MinistryPositionCreateManyInput | MinistryPositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistryPosition createManyAndReturn
   */
  export type MinistryPositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * The data used to create many MinistryPositions.
     */
    data: MinistryPositionCreateManyInput | MinistryPositionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryPosition update
   */
  export type MinistryPositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistryPosition.
     */
    data: XOR<MinistryPositionUpdateInput, MinistryPositionUncheckedUpdateInput>
    /**
     * Choose, which MinistryPosition to update.
     */
    where: MinistryPositionWhereUniqueInput
  }

  /**
   * MinistryPosition updateMany
   */
  export type MinistryPositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistryPositions.
     */
    data: XOR<MinistryPositionUpdateManyMutationInput, MinistryPositionUncheckedUpdateManyInput>
    /**
     * Filter which MinistryPositions to update
     */
    where?: MinistryPositionWhereInput
    /**
     * Limit how many MinistryPositions to update.
     */
    limit?: number
  }

  /**
   * MinistryPosition updateManyAndReturn
   */
  export type MinistryPositionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * The data used to update MinistryPositions.
     */
    data: XOR<MinistryPositionUpdateManyMutationInput, MinistryPositionUncheckedUpdateManyInput>
    /**
     * Filter which MinistryPositions to update
     */
    where?: MinistryPositionWhereInput
    /**
     * Limit how many MinistryPositions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryPosition upsert
   */
  export type MinistryPositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistryPosition to update in case it exists.
     */
    where: MinistryPositionWhereUniqueInput
    /**
     * In case the MinistryPosition found by the `where` argument doesn't exist, create a new MinistryPosition with this data.
     */
    create: XOR<MinistryPositionCreateInput, MinistryPositionUncheckedCreateInput>
    /**
     * In case the MinistryPosition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryPositionUpdateInput, MinistryPositionUncheckedUpdateInput>
  }

  /**
   * MinistryPosition delete
   */
  export type MinistryPositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
    /**
     * Filter which MinistryPosition to delete.
     */
    where: MinistryPositionWhereUniqueInput
  }

  /**
   * MinistryPosition deleteMany
   */
  export type MinistryPositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryPositions to delete
     */
    where?: MinistryPositionWhereInput
    /**
     * Limit how many MinistryPositions to delete.
     */
    limit?: number
  }

  /**
   * MinistryPosition.schedules
   */
  export type MinistryPosition$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistrySchedule
     */
    select?: MinistryScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistrySchedule
     */
    omit?: MinistryScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryScheduleInclude<ExtArgs> | null
    where?: MinistryScheduleWhereInput
    orderBy?: MinistryScheduleOrderByWithRelationInput | MinistryScheduleOrderByWithRelationInput[]
    cursor?: MinistryScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MinistryScheduleScalarFieldEnum | MinistryScheduleScalarFieldEnum[]
  }

  /**
   * MinistryPosition without action
   */
  export type MinistryPositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryPosition
     */
    select?: MinistryPositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryPosition
     */
    omit?: MinistryPositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryPositionInclude<ExtArgs> | null
  }


  /**
   * Model MinistryFile
   */

  export type AggregateMinistryFile = {
    _count: MinistryFileCountAggregateOutputType | null
    _avg: MinistryFileAvgAggregateOutputType | null
    _sum: MinistryFileSumAggregateOutputType | null
    _min: MinistryFileMinAggregateOutputType | null
    _max: MinistryFileMaxAggregateOutputType | null
  }

  export type MinistryFileAvgAggregateOutputType = {
    size: number | null
  }

  export type MinistryFileSumAggregateOutputType = {
    size: number | null
  }

  export type MinistryFileMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    type: string | null
    size: number | null
    createdAt: Date | null
    ministryId: string | null
    uploadedById: string | null
  }

  export type MinistryFileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    type: string | null
    size: number | null
    createdAt: Date | null
    ministryId: string | null
    uploadedById: string | null
  }

  export type MinistryFileCountAggregateOutputType = {
    id: number
    name: number
    url: number
    type: number
    size: number
    createdAt: number
    ministryId: number
    uploadedById: number
    _all: number
  }


  export type MinistryFileAvgAggregateInputType = {
    size?: true
  }

  export type MinistryFileSumAggregateInputType = {
    size?: true
  }

  export type MinistryFileMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    type?: true
    size?: true
    createdAt?: true
    ministryId?: true
    uploadedById?: true
  }

  export type MinistryFileMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    type?: true
    size?: true
    createdAt?: true
    ministryId?: true
    uploadedById?: true
  }

  export type MinistryFileCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    type?: true
    size?: true
    createdAt?: true
    ministryId?: true
    uploadedById?: true
    _all?: true
  }

  export type MinistryFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryFile to aggregate.
     */
    where?: MinistryFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryFiles to fetch.
     */
    orderBy?: MinistryFileOrderByWithRelationInput | MinistryFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MinistryFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MinistryFiles
    **/
    _count?: true | MinistryFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MinistryFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MinistryFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MinistryFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MinistryFileMaxAggregateInputType
  }

  export type GetMinistryFileAggregateType<T extends MinistryFileAggregateArgs> = {
        [P in keyof T & keyof AggregateMinistryFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMinistryFile[P]>
      : GetScalarType<T[P], AggregateMinistryFile[P]>
  }




  export type MinistryFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MinistryFileWhereInput
    orderBy?: MinistryFileOrderByWithAggregationInput | MinistryFileOrderByWithAggregationInput[]
    by: MinistryFileScalarFieldEnum[] | MinistryFileScalarFieldEnum
    having?: MinistryFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MinistryFileCountAggregateInputType | true
    _avg?: MinistryFileAvgAggregateInputType
    _sum?: MinistryFileSumAggregateInputType
    _min?: MinistryFileMinAggregateInputType
    _max?: MinistryFileMaxAggregateInputType
  }

  export type MinistryFileGroupByOutputType = {
    id: string
    name: string
    url: string
    type: string
    size: number
    createdAt: Date
    ministryId: string
    uploadedById: string
    _count: MinistryFileCountAggregateOutputType | null
    _avg: MinistryFileAvgAggregateOutputType | null
    _sum: MinistryFileSumAggregateOutputType | null
    _min: MinistryFileMinAggregateOutputType | null
    _max: MinistryFileMaxAggregateOutputType | null
  }

  type GetMinistryFileGroupByPayload<T extends MinistryFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MinistryFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MinistryFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MinistryFileGroupByOutputType[P]>
            : GetScalarType<T[P], MinistryFileGroupByOutputType[P]>
        }
      >
    >


  export type MinistryFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    ministryId?: boolean
    uploadedById?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryFile"]>

  export type MinistryFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    ministryId?: boolean
    uploadedById?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryFile"]>

  export type MinistryFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    ministryId?: boolean
    uploadedById?: boolean
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ministryFile"]>

  export type MinistryFileSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    ministryId?: boolean
    uploadedById?: boolean
  }

  export type MinistryFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "url" | "type" | "size" | "createdAt" | "ministryId" | "uploadedById", ExtArgs["result"]["ministryFile"]>
  export type MinistryFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MinistryFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MinistryFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ministry?: boolean | MinistryDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MinistryFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MinistryFile"
    objects: {
      ministry: Prisma.$MinistryPayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      url: string
      type: string
      size: number
      createdAt: Date
      ministryId: string
      uploadedById: string
    }, ExtArgs["result"]["ministryFile"]>
    composites: {}
  }

  type MinistryFileGetPayload<S extends boolean | null | undefined | MinistryFileDefaultArgs> = $Result.GetResult<Prisma.$MinistryFilePayload, S>

  type MinistryFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MinistryFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MinistryFileCountAggregateInputType | true
    }

  export interface MinistryFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MinistryFile'], meta: { name: 'MinistryFile' } }
    /**
     * Find zero or one MinistryFile that matches the filter.
     * @param {MinistryFileFindUniqueArgs} args - Arguments to find a MinistryFile
     * @example
     * // Get one MinistryFile
     * const ministryFile = await prisma.ministryFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MinistryFileFindUniqueArgs>(args: SelectSubset<T, MinistryFileFindUniqueArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MinistryFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MinistryFileFindUniqueOrThrowArgs} args - Arguments to find a MinistryFile
     * @example
     * // Get one MinistryFile
     * const ministryFile = await prisma.ministryFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MinistryFileFindUniqueOrThrowArgs>(args: SelectSubset<T, MinistryFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileFindFirstArgs} args - Arguments to find a MinistryFile
     * @example
     * // Get one MinistryFile
     * const ministryFile = await prisma.ministryFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MinistryFileFindFirstArgs>(args?: SelectSubset<T, MinistryFileFindFirstArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MinistryFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileFindFirstOrThrowArgs} args - Arguments to find a MinistryFile
     * @example
     * // Get one MinistryFile
     * const ministryFile = await prisma.ministryFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MinistryFileFindFirstOrThrowArgs>(args?: SelectSubset<T, MinistryFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MinistryFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MinistryFiles
     * const ministryFiles = await prisma.ministryFile.findMany()
     * 
     * // Get first 10 MinistryFiles
     * const ministryFiles = await prisma.ministryFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ministryFileWithIdOnly = await prisma.ministryFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MinistryFileFindManyArgs>(args?: SelectSubset<T, MinistryFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MinistryFile.
     * @param {MinistryFileCreateArgs} args - Arguments to create a MinistryFile.
     * @example
     * // Create one MinistryFile
     * const MinistryFile = await prisma.ministryFile.create({
     *   data: {
     *     // ... data to create a MinistryFile
     *   }
     * })
     * 
     */
    create<T extends MinistryFileCreateArgs>(args: SelectSubset<T, MinistryFileCreateArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MinistryFiles.
     * @param {MinistryFileCreateManyArgs} args - Arguments to create many MinistryFiles.
     * @example
     * // Create many MinistryFiles
     * const ministryFile = await prisma.ministryFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MinistryFileCreateManyArgs>(args?: SelectSubset<T, MinistryFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MinistryFiles and returns the data saved in the database.
     * @param {MinistryFileCreateManyAndReturnArgs} args - Arguments to create many MinistryFiles.
     * @example
     * // Create many MinistryFiles
     * const ministryFile = await prisma.ministryFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MinistryFiles and only return the `id`
     * const ministryFileWithIdOnly = await prisma.ministryFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MinistryFileCreateManyAndReturnArgs>(args?: SelectSubset<T, MinistryFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MinistryFile.
     * @param {MinistryFileDeleteArgs} args - Arguments to delete one MinistryFile.
     * @example
     * // Delete one MinistryFile
     * const MinistryFile = await prisma.ministryFile.delete({
     *   where: {
     *     // ... filter to delete one MinistryFile
     *   }
     * })
     * 
     */
    delete<T extends MinistryFileDeleteArgs>(args: SelectSubset<T, MinistryFileDeleteArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MinistryFile.
     * @param {MinistryFileUpdateArgs} args - Arguments to update one MinistryFile.
     * @example
     * // Update one MinistryFile
     * const ministryFile = await prisma.ministryFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MinistryFileUpdateArgs>(args: SelectSubset<T, MinistryFileUpdateArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MinistryFiles.
     * @param {MinistryFileDeleteManyArgs} args - Arguments to filter MinistryFiles to delete.
     * @example
     * // Delete a few MinistryFiles
     * const { count } = await prisma.ministryFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MinistryFileDeleteManyArgs>(args?: SelectSubset<T, MinistryFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MinistryFiles
     * const ministryFile = await prisma.ministryFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MinistryFileUpdateManyArgs>(args: SelectSubset<T, MinistryFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MinistryFiles and returns the data updated in the database.
     * @param {MinistryFileUpdateManyAndReturnArgs} args - Arguments to update many MinistryFiles.
     * @example
     * // Update many MinistryFiles
     * const ministryFile = await prisma.ministryFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MinistryFiles and only return the `id`
     * const ministryFileWithIdOnly = await prisma.ministryFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MinistryFileUpdateManyAndReturnArgs>(args: SelectSubset<T, MinistryFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MinistryFile.
     * @param {MinistryFileUpsertArgs} args - Arguments to update or create a MinistryFile.
     * @example
     * // Update or create a MinistryFile
     * const ministryFile = await prisma.ministryFile.upsert({
     *   create: {
     *     // ... data to create a MinistryFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MinistryFile we want to update
     *   }
     * })
     */
    upsert<T extends MinistryFileUpsertArgs>(args: SelectSubset<T, MinistryFileUpsertArgs<ExtArgs>>): Prisma__MinistryFileClient<$Result.GetResult<Prisma.$MinistryFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MinistryFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileCountArgs} args - Arguments to filter MinistryFiles to count.
     * @example
     * // Count the number of MinistryFiles
     * const count = await prisma.ministryFile.count({
     *   where: {
     *     // ... the filter for the MinistryFiles we want to count
     *   }
     * })
    **/
    count<T extends MinistryFileCountArgs>(
      args?: Subset<T, MinistryFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MinistryFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MinistryFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MinistryFileAggregateArgs>(args: Subset<T, MinistryFileAggregateArgs>): Prisma.PrismaPromise<GetMinistryFileAggregateType<T>>

    /**
     * Group by MinistryFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MinistryFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MinistryFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MinistryFileGroupByArgs['orderBy'] }
        : { orderBy?: MinistryFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MinistryFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMinistryFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MinistryFile model
   */
  readonly fields: MinistryFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MinistryFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MinistryFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ministry<T extends MinistryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MinistryDefaultArgs<ExtArgs>>): Prisma__MinistryClient<$Result.GetResult<Prisma.$MinistryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MinistryFile model
   */
  interface MinistryFileFieldRefs {
    readonly id: FieldRef<"MinistryFile", 'String'>
    readonly name: FieldRef<"MinistryFile", 'String'>
    readonly url: FieldRef<"MinistryFile", 'String'>
    readonly type: FieldRef<"MinistryFile", 'String'>
    readonly size: FieldRef<"MinistryFile", 'Int'>
    readonly createdAt: FieldRef<"MinistryFile", 'DateTime'>
    readonly ministryId: FieldRef<"MinistryFile", 'String'>
    readonly uploadedById: FieldRef<"MinistryFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MinistryFile findUnique
   */
  export type MinistryFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * Filter, which MinistryFile to fetch.
     */
    where: MinistryFileWhereUniqueInput
  }

  /**
   * MinistryFile findUniqueOrThrow
   */
  export type MinistryFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * Filter, which MinistryFile to fetch.
     */
    where: MinistryFileWhereUniqueInput
  }

  /**
   * MinistryFile findFirst
   */
  export type MinistryFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * Filter, which MinistryFile to fetch.
     */
    where?: MinistryFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryFiles to fetch.
     */
    orderBy?: MinistryFileOrderByWithRelationInput | MinistryFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryFiles.
     */
    cursor?: MinistryFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryFiles.
     */
    distinct?: MinistryFileScalarFieldEnum | MinistryFileScalarFieldEnum[]
  }

  /**
   * MinistryFile findFirstOrThrow
   */
  export type MinistryFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * Filter, which MinistryFile to fetch.
     */
    where?: MinistryFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryFiles to fetch.
     */
    orderBy?: MinistryFileOrderByWithRelationInput | MinistryFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MinistryFiles.
     */
    cursor?: MinistryFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MinistryFiles.
     */
    distinct?: MinistryFileScalarFieldEnum | MinistryFileScalarFieldEnum[]
  }

  /**
   * MinistryFile findMany
   */
  export type MinistryFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * Filter, which MinistryFiles to fetch.
     */
    where?: MinistryFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MinistryFiles to fetch.
     */
    orderBy?: MinistryFileOrderByWithRelationInput | MinistryFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MinistryFiles.
     */
    cursor?: MinistryFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MinistryFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MinistryFiles.
     */
    skip?: number
    distinct?: MinistryFileScalarFieldEnum | MinistryFileScalarFieldEnum[]
  }

  /**
   * MinistryFile create
   */
  export type MinistryFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * The data needed to create a MinistryFile.
     */
    data: XOR<MinistryFileCreateInput, MinistryFileUncheckedCreateInput>
  }

  /**
   * MinistryFile createMany
   */
  export type MinistryFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MinistryFiles.
     */
    data: MinistryFileCreateManyInput | MinistryFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MinistryFile createManyAndReturn
   */
  export type MinistryFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * The data used to create many MinistryFiles.
     */
    data: MinistryFileCreateManyInput | MinistryFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryFile update
   */
  export type MinistryFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * The data needed to update a MinistryFile.
     */
    data: XOR<MinistryFileUpdateInput, MinistryFileUncheckedUpdateInput>
    /**
     * Choose, which MinistryFile to update.
     */
    where: MinistryFileWhereUniqueInput
  }

  /**
   * MinistryFile updateMany
   */
  export type MinistryFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MinistryFiles.
     */
    data: XOR<MinistryFileUpdateManyMutationInput, MinistryFileUncheckedUpdateManyInput>
    /**
     * Filter which MinistryFiles to update
     */
    where?: MinistryFileWhereInput
    /**
     * Limit how many MinistryFiles to update.
     */
    limit?: number
  }

  /**
   * MinistryFile updateManyAndReturn
   */
  export type MinistryFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * The data used to update MinistryFiles.
     */
    data: XOR<MinistryFileUpdateManyMutationInput, MinistryFileUncheckedUpdateManyInput>
    /**
     * Filter which MinistryFiles to update
     */
    where?: MinistryFileWhereInput
    /**
     * Limit how many MinistryFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MinistryFile upsert
   */
  export type MinistryFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * The filter to search for the MinistryFile to update in case it exists.
     */
    where: MinistryFileWhereUniqueInput
    /**
     * In case the MinistryFile found by the `where` argument doesn't exist, create a new MinistryFile with this data.
     */
    create: XOR<MinistryFileCreateInput, MinistryFileUncheckedCreateInput>
    /**
     * In case the MinistryFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MinistryFileUpdateInput, MinistryFileUncheckedUpdateInput>
  }

  /**
   * MinistryFile delete
   */
  export type MinistryFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
    /**
     * Filter which MinistryFile to delete.
     */
    where: MinistryFileWhereUniqueInput
  }

  /**
   * MinistryFile deleteMany
   */
  export type MinistryFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MinistryFiles to delete
     */
    where?: MinistryFileWhereInput
    /**
     * Limit how many MinistryFiles to delete.
     */
    limit?: number
  }

  /**
   * MinistryFile without action
   */
  export type MinistryFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MinistryFile
     */
    select?: MinistryFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MinistryFile
     */
    omit?: MinistryFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MinistryFileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const AuthenticatorScalarFieldEnum: {
    credentialID: 'credentialID',
    userId: 'userId',
    providerAccountId: 'providerAccountId',
    credentialPublicKey: 'credentialPublicKey',
    counter: 'counter',
    credentialDeviceType: 'credentialDeviceType',
    credentialBackedUp: 'credentialBackedUp',
    transports: 'transports'
  };

  export type AuthenticatorScalarFieldEnum = (typeof AuthenticatorScalarFieldEnum)[keyof typeof AuthenticatorScalarFieldEnum]


  export const ChurchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    description: 'description',
    image: 'image',
    instagram: 'instagram',
    youtube: 'youtube',
    homepage: 'homepage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChurchScalarFieldEnum = (typeof ChurchScalarFieldEnum)[keyof typeof ChurchScalarFieldEnum]


  export const ChurchMemberScalarFieldEnum: {
    id: 'id',
    role: 'role',
    userId: 'userId',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChurchMemberScalarFieldEnum = (typeof ChurchMemberScalarFieldEnum)[keyof typeof ChurchMemberScalarFieldEnum]


  export const MinistryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MinistryScalarFieldEnum = (typeof MinistryScalarFieldEnum)[keyof typeof MinistryScalarFieldEnum]


  export const MinistryMemberScalarFieldEnum: {
    id: 'id',
    role: 'role',
    userId: 'userId',
    ministryId: 'ministryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MinistryMemberScalarFieldEnum = (typeof MinistryMemberScalarFieldEnum)[keyof typeof MinistryMemberScalarFieldEnum]


  export const ChurchNoticeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    isImportant: 'isImportant',
    churchId: 'churchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChurchNoticeScalarFieldEnum = (typeof ChurchNoticeScalarFieldEnum)[keyof typeof ChurchNoticeScalarFieldEnum]


  export const MinistryNoticeScalarFieldEnum: {
    id: 'id',
    ministryId: 'ministryId',
    userId: 'userId',
    title: 'title',
    content: 'content',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MinistryNoticeScalarFieldEnum = (typeof MinistryNoticeScalarFieldEnum)[keyof typeof MinistryNoticeScalarFieldEnum]


  export const MinistryEventScalarFieldEnum: {
    id: 'id',
    noticeId: 'noticeId',
    title: 'title',
    description: 'description',
    location: 'location',
    eventDate: 'eventDate',
    startTime: 'startTime',
    endTime: 'endTime',
    maxAttendees: 'maxAttendees',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MinistryEventScalarFieldEnum = (typeof MinistryEventScalarFieldEnum)[keyof typeof MinistryEventScalarFieldEnum]


  export const MinistryAnnouncementScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    isImportant: 'isImportant',
    ministryId: 'ministryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MinistryAnnouncementScalarFieldEnum = (typeof MinistryAnnouncementScalarFieldEnum)[keyof typeof MinistryAnnouncementScalarFieldEnum]


  export const MinistryScheduleScalarFieldEnum: {
    id: 'id',
    ministryId: 'ministryId',
    positionId: 'positionId',
    userId: 'userId',
    date: 'date',
    status: 'status'
  };

  export type MinistryScheduleScalarFieldEnum = (typeof MinistryScheduleScalarFieldEnum)[keyof typeof MinistryScheduleScalarFieldEnum]


  export const ChurchFeedScalarFieldEnum: {
    id: 'id',
    content: 'content',
    churchId: 'churchId',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChurchFeedScalarFieldEnum = (typeof ChurchFeedScalarFieldEnum)[keyof typeof ChurchFeedScalarFieldEnum]


  export const FeedImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    order: 'order',
    feedId: 'feedId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeedImageScalarFieldEnum = (typeof FeedImageScalarFieldEnum)[keyof typeof FeedImageScalarFieldEnum]


  export const FeedLikeScalarFieldEnum: {
    id: 'id',
    feedId: 'feedId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeedLikeScalarFieldEnum = (typeof FeedLikeScalarFieldEnum)[keyof typeof FeedLikeScalarFieldEnum]


  export const FeedCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    feedId: 'feedId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeedCommentScalarFieldEnum = (typeof FeedCommentScalarFieldEnum)[keyof typeof FeedCommentScalarFieldEnum]


  export const MinistryPositionScalarFieldEnum: {
    id: 'id',
    ministryId: 'ministryId',
    name: 'name',
    description: 'description',
    maxMembers: 'maxMembers'
  };

  export type MinistryPositionScalarFieldEnum = (typeof MinistryPositionScalarFieldEnum)[keyof typeof MinistryPositionScalarFieldEnum]


  export const MinistryFileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    type: 'type',
    size: 'size',
    createdAt: 'createdAt',
    ministryId: 'ministryId',
    uploadedById: 'uploadedById'
  };

  export type MinistryFileScalarFieldEnum = (typeof MinistryFileScalarFieldEnum)[keyof typeof MinistryFileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ChurchRole'
   */
  export type EnumChurchRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChurchRole'>
    


  /**
   * Reference to a field of type 'ChurchRole[]'
   */
  export type ListEnumChurchRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChurchRole[]'>
    


  /**
   * Reference to a field of type 'MinistryRole'
   */
  export type EnumMinistryRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MinistryRole'>
    


  /**
   * Reference to a field of type 'MinistryRole[]'
   */
  export type ListEnumMinistryRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MinistryRole[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    Authenticator?: AuthenticatorListRelationFilter
    churches?: ChurchMemberListRelationFilter
    ministries?: MinistryMemberListRelationFilter
    schedules?: MinistryScheduleListRelationFilter
    ministryNotices?: MinistryNoticeListRelationFilter
    feeds?: ChurchFeedListRelationFilter
    likes?: FeedLikeListRelationFilter
    comments?: FeedCommentListRelationFilter
    uploadedFiles?: MinistryFileListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    Authenticator?: AuthenticatorOrderByRelationAggregateInput
    churches?: ChurchMemberOrderByRelationAggregateInput
    ministries?: MinistryMemberOrderByRelationAggregateInput
    schedules?: MinistryScheduleOrderByRelationAggregateInput
    ministryNotices?: MinistryNoticeOrderByRelationAggregateInput
    feeds?: ChurchFeedOrderByRelationAggregateInput
    likes?: FeedLikeOrderByRelationAggregateInput
    comments?: FeedCommentOrderByRelationAggregateInput
    uploadedFiles?: MinistryFileOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    Authenticator?: AuthenticatorListRelationFilter
    churches?: ChurchMemberListRelationFilter
    ministries?: MinistryMemberListRelationFilter
    schedules?: MinistryScheduleListRelationFilter
    ministryNotices?: MinistryNoticeListRelationFilter
    feeds?: ChurchFeedListRelationFilter
    likes?: FeedLikeListRelationFilter
    comments?: FeedCommentListRelationFilter
    uploadedFiles?: MinistryFileListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type AuthenticatorWhereInput = {
    AND?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    OR?: AuthenticatorWhereInput[]
    NOT?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    credentialID?: StringFilter<"Authenticator"> | string
    userId?: StringFilter<"Authenticator"> | string
    providerAccountId?: StringFilter<"Authenticator"> | string
    credentialPublicKey?: StringFilter<"Authenticator"> | string
    counter?: IntFilter<"Authenticator"> | number
    credentialDeviceType?: StringFilter<"Authenticator"> | string
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean
    transports?: StringNullableFilter<"Authenticator"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuthenticatorOrderByWithRelationInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuthenticatorWhereUniqueInput = Prisma.AtLeast<{
    credentialID?: string
    userId_credentialID?: AuthenticatorUserIdCredentialIDCompoundUniqueInput
    AND?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    OR?: AuthenticatorWhereInput[]
    NOT?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    userId?: StringFilter<"Authenticator"> | string
    providerAccountId?: StringFilter<"Authenticator"> | string
    credentialPublicKey?: StringFilter<"Authenticator"> | string
    counter?: IntFilter<"Authenticator"> | number
    credentialDeviceType?: StringFilter<"Authenticator"> | string
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean
    transports?: StringNullableFilter<"Authenticator"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId_credentialID" | "credentialID">

  export type AuthenticatorOrderByWithAggregationInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrderInput | SortOrder
    _count?: AuthenticatorCountOrderByAggregateInput
    _avg?: AuthenticatorAvgOrderByAggregateInput
    _max?: AuthenticatorMaxOrderByAggregateInput
    _min?: AuthenticatorMinOrderByAggregateInput
    _sum?: AuthenticatorSumOrderByAggregateInput
  }

  export type AuthenticatorScalarWhereWithAggregatesInput = {
    AND?: AuthenticatorScalarWhereWithAggregatesInput | AuthenticatorScalarWhereWithAggregatesInput[]
    OR?: AuthenticatorScalarWhereWithAggregatesInput[]
    NOT?: AuthenticatorScalarWhereWithAggregatesInput | AuthenticatorScalarWhereWithAggregatesInput[]
    credentialID?: StringWithAggregatesFilter<"Authenticator"> | string
    userId?: StringWithAggregatesFilter<"Authenticator"> | string
    providerAccountId?: StringWithAggregatesFilter<"Authenticator"> | string
    credentialPublicKey?: StringWithAggregatesFilter<"Authenticator"> | string
    counter?: IntWithAggregatesFilter<"Authenticator"> | number
    credentialDeviceType?: StringWithAggregatesFilter<"Authenticator"> | string
    credentialBackedUp?: BoolWithAggregatesFilter<"Authenticator"> | boolean
    transports?: StringNullableWithAggregatesFilter<"Authenticator"> | string | null
  }

  export type ChurchWhereInput = {
    AND?: ChurchWhereInput | ChurchWhereInput[]
    OR?: ChurchWhereInput[]
    NOT?: ChurchWhereInput | ChurchWhereInput[]
    id?: StringFilter<"Church"> | string
    name?: StringFilter<"Church"> | string
    address?: StringNullableFilter<"Church"> | string | null
    description?: StringNullableFilter<"Church"> | string | null
    image?: StringNullableFilter<"Church"> | string | null
    instagram?: StringNullableFilter<"Church"> | string | null
    youtube?: StringNullableFilter<"Church"> | string | null
    homepage?: StringNullableFilter<"Church"> | string | null
    createdAt?: DateTimeFilter<"Church"> | Date | string
    updatedAt?: DateTimeFilter<"Church"> | Date | string
    members?: ChurchMemberListRelationFilter
    ministries?: MinistryListRelationFilter
    notices?: ChurchNoticeListRelationFilter
    feeds?: ChurchFeedListRelationFilter
  }

  export type ChurchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    youtube?: SortOrderInput | SortOrder
    homepage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: ChurchMemberOrderByRelationAggregateInput
    ministries?: MinistryOrderByRelationAggregateInput
    notices?: ChurchNoticeOrderByRelationAggregateInput
    feeds?: ChurchFeedOrderByRelationAggregateInput
  }

  export type ChurchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChurchWhereInput | ChurchWhereInput[]
    OR?: ChurchWhereInput[]
    NOT?: ChurchWhereInput | ChurchWhereInput[]
    name?: StringFilter<"Church"> | string
    address?: StringNullableFilter<"Church"> | string | null
    description?: StringNullableFilter<"Church"> | string | null
    image?: StringNullableFilter<"Church"> | string | null
    instagram?: StringNullableFilter<"Church"> | string | null
    youtube?: StringNullableFilter<"Church"> | string | null
    homepage?: StringNullableFilter<"Church"> | string | null
    createdAt?: DateTimeFilter<"Church"> | Date | string
    updatedAt?: DateTimeFilter<"Church"> | Date | string
    members?: ChurchMemberListRelationFilter
    ministries?: MinistryListRelationFilter
    notices?: ChurchNoticeListRelationFilter
    feeds?: ChurchFeedListRelationFilter
  }, "id">

  export type ChurchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    youtube?: SortOrderInput | SortOrder
    homepage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChurchCountOrderByAggregateInput
    _max?: ChurchMaxOrderByAggregateInput
    _min?: ChurchMinOrderByAggregateInput
  }

  export type ChurchScalarWhereWithAggregatesInput = {
    AND?: ChurchScalarWhereWithAggregatesInput | ChurchScalarWhereWithAggregatesInput[]
    OR?: ChurchScalarWhereWithAggregatesInput[]
    NOT?: ChurchScalarWhereWithAggregatesInput | ChurchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Church"> | string
    name?: StringWithAggregatesFilter<"Church"> | string
    address?: StringNullableWithAggregatesFilter<"Church"> | string | null
    description?: StringNullableWithAggregatesFilter<"Church"> | string | null
    image?: StringNullableWithAggregatesFilter<"Church"> | string | null
    instagram?: StringNullableWithAggregatesFilter<"Church"> | string | null
    youtube?: StringNullableWithAggregatesFilter<"Church"> | string | null
    homepage?: StringNullableWithAggregatesFilter<"Church"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Church"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Church"> | Date | string
  }

  export type ChurchMemberWhereInput = {
    AND?: ChurchMemberWhereInput | ChurchMemberWhereInput[]
    OR?: ChurchMemberWhereInput[]
    NOT?: ChurchMemberWhereInput | ChurchMemberWhereInput[]
    id?: StringFilter<"ChurchMember"> | string
    role?: EnumChurchRoleFilter<"ChurchMember"> | $Enums.ChurchRole
    userId?: StringFilter<"ChurchMember"> | string
    churchId?: StringFilter<"ChurchMember"> | string
    createdAt?: DateTimeFilter<"ChurchMember"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchMember"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
  }

  export type ChurchMemberOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    church?: ChurchOrderByWithRelationInput
  }

  export type ChurchMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_churchId?: ChurchMemberUserIdChurchIdCompoundUniqueInput
    AND?: ChurchMemberWhereInput | ChurchMemberWhereInput[]
    OR?: ChurchMemberWhereInput[]
    NOT?: ChurchMemberWhereInput | ChurchMemberWhereInput[]
    role?: EnumChurchRoleFilter<"ChurchMember"> | $Enums.ChurchRole
    userId?: StringFilter<"ChurchMember"> | string
    churchId?: StringFilter<"ChurchMember"> | string
    createdAt?: DateTimeFilter<"ChurchMember"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchMember"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
  }, "id" | "userId_churchId">

  export type ChurchMemberOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChurchMemberCountOrderByAggregateInput
    _max?: ChurchMemberMaxOrderByAggregateInput
    _min?: ChurchMemberMinOrderByAggregateInput
  }

  export type ChurchMemberScalarWhereWithAggregatesInput = {
    AND?: ChurchMemberScalarWhereWithAggregatesInput | ChurchMemberScalarWhereWithAggregatesInput[]
    OR?: ChurchMemberScalarWhereWithAggregatesInput[]
    NOT?: ChurchMemberScalarWhereWithAggregatesInput | ChurchMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChurchMember"> | string
    role?: EnumChurchRoleWithAggregatesFilter<"ChurchMember"> | $Enums.ChurchRole
    userId?: StringWithAggregatesFilter<"ChurchMember"> | string
    churchId?: StringWithAggregatesFilter<"ChurchMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChurchMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchMember"> | Date | string
  }

  export type MinistryWhereInput = {
    AND?: MinistryWhereInput | MinistryWhereInput[]
    OR?: MinistryWhereInput[]
    NOT?: MinistryWhereInput | MinistryWhereInput[]
    id?: StringFilter<"Ministry"> | string
    name?: StringFilter<"Ministry"> | string
    description?: StringNullableFilter<"Ministry"> | string | null
    churchId?: StringFilter<"Ministry"> | string
    createdAt?: DateTimeFilter<"Ministry"> | Date | string
    updatedAt?: DateTimeFilter<"Ministry"> | Date | string
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    members?: MinistryMemberListRelationFilter
    notices?: MinistryNoticeListRelationFilter
    schedules?: MinistryScheduleListRelationFilter
    announcements?: MinistryAnnouncementListRelationFilter
    positions?: MinistryPositionListRelationFilter
    files?: MinistryFileListRelationFilter
  }

  export type MinistryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    church?: ChurchOrderByWithRelationInput
    members?: MinistryMemberOrderByRelationAggregateInput
    notices?: MinistryNoticeOrderByRelationAggregateInput
    schedules?: MinistryScheduleOrderByRelationAggregateInput
    announcements?: MinistryAnnouncementOrderByRelationAggregateInput
    positions?: MinistryPositionOrderByRelationAggregateInput
    files?: MinistryFileOrderByRelationAggregateInput
  }

  export type MinistryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryWhereInput | MinistryWhereInput[]
    OR?: MinistryWhereInput[]
    NOT?: MinistryWhereInput | MinistryWhereInput[]
    name?: StringFilter<"Ministry"> | string
    description?: StringNullableFilter<"Ministry"> | string | null
    churchId?: StringFilter<"Ministry"> | string
    createdAt?: DateTimeFilter<"Ministry"> | Date | string
    updatedAt?: DateTimeFilter<"Ministry"> | Date | string
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    members?: MinistryMemberListRelationFilter
    notices?: MinistryNoticeListRelationFilter
    schedules?: MinistryScheduleListRelationFilter
    announcements?: MinistryAnnouncementListRelationFilter
    positions?: MinistryPositionListRelationFilter
    files?: MinistryFileListRelationFilter
  }, "id">

  export type MinistryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MinistryCountOrderByAggregateInput
    _max?: MinistryMaxOrderByAggregateInput
    _min?: MinistryMinOrderByAggregateInput
  }

  export type MinistryScalarWhereWithAggregatesInput = {
    AND?: MinistryScalarWhereWithAggregatesInput | MinistryScalarWhereWithAggregatesInput[]
    OR?: MinistryScalarWhereWithAggregatesInput[]
    NOT?: MinistryScalarWhereWithAggregatesInput | MinistryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ministry"> | string
    name?: StringWithAggregatesFilter<"Ministry"> | string
    description?: StringNullableWithAggregatesFilter<"Ministry"> | string | null
    churchId?: StringWithAggregatesFilter<"Ministry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Ministry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ministry"> | Date | string
  }

  export type MinistryMemberWhereInput = {
    AND?: MinistryMemberWhereInput | MinistryMemberWhereInput[]
    OR?: MinistryMemberWhereInput[]
    NOT?: MinistryMemberWhereInput | MinistryMemberWhereInput[]
    id?: StringFilter<"MinistryMember"> | string
    role?: EnumMinistryRoleFilter<"MinistryMember"> | $Enums.MinistryRole
    userId?: StringFilter<"MinistryMember"> | string
    ministryId?: StringFilter<"MinistryMember"> | string
    createdAt?: DateTimeFilter<"MinistryMember"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryMember"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
  }

  export type MinistryMemberOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    ministry?: MinistryOrderByWithRelationInput
  }

  export type MinistryMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_ministryId?: MinistryMemberUserIdMinistryIdCompoundUniqueInput
    AND?: MinistryMemberWhereInput | MinistryMemberWhereInput[]
    OR?: MinistryMemberWhereInput[]
    NOT?: MinistryMemberWhereInput | MinistryMemberWhereInput[]
    role?: EnumMinistryRoleFilter<"MinistryMember"> | $Enums.MinistryRole
    userId?: StringFilter<"MinistryMember"> | string
    ministryId?: StringFilter<"MinistryMember"> | string
    createdAt?: DateTimeFilter<"MinistryMember"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryMember"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
  }, "id" | "userId_ministryId">

  export type MinistryMemberOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MinistryMemberCountOrderByAggregateInput
    _max?: MinistryMemberMaxOrderByAggregateInput
    _min?: MinistryMemberMinOrderByAggregateInput
  }

  export type MinistryMemberScalarWhereWithAggregatesInput = {
    AND?: MinistryMemberScalarWhereWithAggregatesInput | MinistryMemberScalarWhereWithAggregatesInput[]
    OR?: MinistryMemberScalarWhereWithAggregatesInput[]
    NOT?: MinistryMemberScalarWhereWithAggregatesInput | MinistryMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistryMember"> | string
    role?: EnumMinistryRoleWithAggregatesFilter<"MinistryMember"> | $Enums.MinistryRole
    userId?: StringWithAggregatesFilter<"MinistryMember"> | string
    ministryId?: StringWithAggregatesFilter<"MinistryMember"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MinistryMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MinistryMember"> | Date | string
  }

  export type ChurchNoticeWhereInput = {
    AND?: ChurchNoticeWhereInput | ChurchNoticeWhereInput[]
    OR?: ChurchNoticeWhereInput[]
    NOT?: ChurchNoticeWhereInput | ChurchNoticeWhereInput[]
    id?: StringFilter<"ChurchNotice"> | string
    title?: StringFilter<"ChurchNotice"> | string
    content?: StringFilter<"ChurchNotice"> | string
    isImportant?: BoolFilter<"ChurchNotice"> | boolean
    churchId?: StringFilter<"ChurchNotice"> | string
    createdAt?: DateTimeFilter<"ChurchNotice"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchNotice"> | Date | string
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
  }

  export type ChurchNoticeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    church?: ChurchOrderByWithRelationInput
  }

  export type ChurchNoticeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChurchNoticeWhereInput | ChurchNoticeWhereInput[]
    OR?: ChurchNoticeWhereInput[]
    NOT?: ChurchNoticeWhereInput | ChurchNoticeWhereInput[]
    title?: StringFilter<"ChurchNotice"> | string
    content?: StringFilter<"ChurchNotice"> | string
    isImportant?: BoolFilter<"ChurchNotice"> | boolean
    churchId?: StringFilter<"ChurchNotice"> | string
    createdAt?: DateTimeFilter<"ChurchNotice"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchNotice"> | Date | string
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
  }, "id">

  export type ChurchNoticeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChurchNoticeCountOrderByAggregateInput
    _max?: ChurchNoticeMaxOrderByAggregateInput
    _min?: ChurchNoticeMinOrderByAggregateInput
  }

  export type ChurchNoticeScalarWhereWithAggregatesInput = {
    AND?: ChurchNoticeScalarWhereWithAggregatesInput | ChurchNoticeScalarWhereWithAggregatesInput[]
    OR?: ChurchNoticeScalarWhereWithAggregatesInput[]
    NOT?: ChurchNoticeScalarWhereWithAggregatesInput | ChurchNoticeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChurchNotice"> | string
    title?: StringWithAggregatesFilter<"ChurchNotice"> | string
    content?: StringWithAggregatesFilter<"ChurchNotice"> | string
    isImportant?: BoolWithAggregatesFilter<"ChurchNotice"> | boolean
    churchId?: StringWithAggregatesFilter<"ChurchNotice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChurchNotice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchNotice"> | Date | string
  }

  export type MinistryNoticeWhereInput = {
    AND?: MinistryNoticeWhereInput | MinistryNoticeWhereInput[]
    OR?: MinistryNoticeWhereInput[]
    NOT?: MinistryNoticeWhereInput | MinistryNoticeWhereInput[]
    id?: StringFilter<"MinistryNotice"> | string
    ministryId?: StringFilter<"MinistryNotice"> | string
    userId?: StringFilter<"MinistryNotice"> | string
    title?: StringFilter<"MinistryNotice"> | string
    content?: StringFilter<"MinistryNotice"> | string
    startDate?: DateTimeFilter<"MinistryNotice"> | Date | string
    endDate?: DateTimeFilter<"MinistryNotice"> | Date | string
    createdAt?: DateTimeFilter<"MinistryNotice"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryNotice"> | Date | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    events?: MinistryEventListRelationFilter
  }

  export type MinistryNoticeOrderByWithRelationInput = {
    id?: SortOrder
    ministryId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ministry?: MinistryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    events?: MinistryEventOrderByRelationAggregateInput
  }

  export type MinistryNoticeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryNoticeWhereInput | MinistryNoticeWhereInput[]
    OR?: MinistryNoticeWhereInput[]
    NOT?: MinistryNoticeWhereInput | MinistryNoticeWhereInput[]
    ministryId?: StringFilter<"MinistryNotice"> | string
    userId?: StringFilter<"MinistryNotice"> | string
    title?: StringFilter<"MinistryNotice"> | string
    content?: StringFilter<"MinistryNotice"> | string
    startDate?: DateTimeFilter<"MinistryNotice"> | Date | string
    endDate?: DateTimeFilter<"MinistryNotice"> | Date | string
    createdAt?: DateTimeFilter<"MinistryNotice"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryNotice"> | Date | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    events?: MinistryEventListRelationFilter
  }, "id">

  export type MinistryNoticeOrderByWithAggregationInput = {
    id?: SortOrder
    ministryId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MinistryNoticeCountOrderByAggregateInput
    _max?: MinistryNoticeMaxOrderByAggregateInput
    _min?: MinistryNoticeMinOrderByAggregateInput
  }

  export type MinistryNoticeScalarWhereWithAggregatesInput = {
    AND?: MinistryNoticeScalarWhereWithAggregatesInput | MinistryNoticeScalarWhereWithAggregatesInput[]
    OR?: MinistryNoticeScalarWhereWithAggregatesInput[]
    NOT?: MinistryNoticeScalarWhereWithAggregatesInput | MinistryNoticeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistryNotice"> | string
    ministryId?: StringWithAggregatesFilter<"MinistryNotice"> | string
    userId?: StringWithAggregatesFilter<"MinistryNotice"> | string
    title?: StringWithAggregatesFilter<"MinistryNotice"> | string
    content?: StringWithAggregatesFilter<"MinistryNotice"> | string
    startDate?: DateTimeWithAggregatesFilter<"MinistryNotice"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"MinistryNotice"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MinistryNotice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MinistryNotice"> | Date | string
  }

  export type MinistryEventWhereInput = {
    AND?: MinistryEventWhereInput | MinistryEventWhereInput[]
    OR?: MinistryEventWhereInput[]
    NOT?: MinistryEventWhereInput | MinistryEventWhereInput[]
    id?: StringFilter<"MinistryEvent"> | string
    noticeId?: StringFilter<"MinistryEvent"> | string
    title?: StringFilter<"MinistryEvent"> | string
    description?: StringNullableFilter<"MinistryEvent"> | string | null
    location?: StringNullableFilter<"MinistryEvent"> | string | null
    eventDate?: DateTimeFilter<"MinistryEvent"> | Date | string
    startTime?: DateTimeFilter<"MinistryEvent"> | Date | string
    endTime?: DateTimeFilter<"MinistryEvent"> | Date | string
    maxAttendees?: IntNullableFilter<"MinistryEvent"> | number | null
    createdAt?: DateTimeFilter<"MinistryEvent"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryEvent"> | Date | string
    notice?: XOR<MinistryNoticeScalarRelationFilter, MinistryNoticeWhereInput>
  }

  export type MinistryEventOrderByWithRelationInput = {
    id?: SortOrder
    noticeId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    eventDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxAttendees?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notice?: MinistryNoticeOrderByWithRelationInput
  }

  export type MinistryEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryEventWhereInput | MinistryEventWhereInput[]
    OR?: MinistryEventWhereInput[]
    NOT?: MinistryEventWhereInput | MinistryEventWhereInput[]
    noticeId?: StringFilter<"MinistryEvent"> | string
    title?: StringFilter<"MinistryEvent"> | string
    description?: StringNullableFilter<"MinistryEvent"> | string | null
    location?: StringNullableFilter<"MinistryEvent"> | string | null
    eventDate?: DateTimeFilter<"MinistryEvent"> | Date | string
    startTime?: DateTimeFilter<"MinistryEvent"> | Date | string
    endTime?: DateTimeFilter<"MinistryEvent"> | Date | string
    maxAttendees?: IntNullableFilter<"MinistryEvent"> | number | null
    createdAt?: DateTimeFilter<"MinistryEvent"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryEvent"> | Date | string
    notice?: XOR<MinistryNoticeScalarRelationFilter, MinistryNoticeWhereInput>
  }, "id">

  export type MinistryEventOrderByWithAggregationInput = {
    id?: SortOrder
    noticeId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    eventDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxAttendees?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MinistryEventCountOrderByAggregateInput
    _avg?: MinistryEventAvgOrderByAggregateInput
    _max?: MinistryEventMaxOrderByAggregateInput
    _min?: MinistryEventMinOrderByAggregateInput
    _sum?: MinistryEventSumOrderByAggregateInput
  }

  export type MinistryEventScalarWhereWithAggregatesInput = {
    AND?: MinistryEventScalarWhereWithAggregatesInput | MinistryEventScalarWhereWithAggregatesInput[]
    OR?: MinistryEventScalarWhereWithAggregatesInput[]
    NOT?: MinistryEventScalarWhereWithAggregatesInput | MinistryEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistryEvent"> | string
    noticeId?: StringWithAggregatesFilter<"MinistryEvent"> | string
    title?: StringWithAggregatesFilter<"MinistryEvent"> | string
    description?: StringNullableWithAggregatesFilter<"MinistryEvent"> | string | null
    location?: StringNullableWithAggregatesFilter<"MinistryEvent"> | string | null
    eventDate?: DateTimeWithAggregatesFilter<"MinistryEvent"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"MinistryEvent"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"MinistryEvent"> | Date | string
    maxAttendees?: IntNullableWithAggregatesFilter<"MinistryEvent"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"MinistryEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MinistryEvent"> | Date | string
  }

  export type MinistryAnnouncementWhereInput = {
    AND?: MinistryAnnouncementWhereInput | MinistryAnnouncementWhereInput[]
    OR?: MinistryAnnouncementWhereInput[]
    NOT?: MinistryAnnouncementWhereInput | MinistryAnnouncementWhereInput[]
    id?: StringFilter<"MinistryAnnouncement"> | string
    title?: StringFilter<"MinistryAnnouncement"> | string
    content?: StringFilter<"MinistryAnnouncement"> | string
    isImportant?: BoolFilter<"MinistryAnnouncement"> | boolean
    ministryId?: StringFilter<"MinistryAnnouncement"> | string
    createdAt?: DateTimeFilter<"MinistryAnnouncement"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryAnnouncement"> | Date | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
  }

  export type MinistryAnnouncementOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ministry?: MinistryOrderByWithRelationInput
  }

  export type MinistryAnnouncementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryAnnouncementWhereInput | MinistryAnnouncementWhereInput[]
    OR?: MinistryAnnouncementWhereInput[]
    NOT?: MinistryAnnouncementWhereInput | MinistryAnnouncementWhereInput[]
    title?: StringFilter<"MinistryAnnouncement"> | string
    content?: StringFilter<"MinistryAnnouncement"> | string
    isImportant?: BoolFilter<"MinistryAnnouncement"> | boolean
    ministryId?: StringFilter<"MinistryAnnouncement"> | string
    createdAt?: DateTimeFilter<"MinistryAnnouncement"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryAnnouncement"> | Date | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
  }, "id">

  export type MinistryAnnouncementOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MinistryAnnouncementCountOrderByAggregateInput
    _max?: MinistryAnnouncementMaxOrderByAggregateInput
    _min?: MinistryAnnouncementMinOrderByAggregateInput
  }

  export type MinistryAnnouncementScalarWhereWithAggregatesInput = {
    AND?: MinistryAnnouncementScalarWhereWithAggregatesInput | MinistryAnnouncementScalarWhereWithAggregatesInput[]
    OR?: MinistryAnnouncementScalarWhereWithAggregatesInput[]
    NOT?: MinistryAnnouncementScalarWhereWithAggregatesInput | MinistryAnnouncementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistryAnnouncement"> | string
    title?: StringWithAggregatesFilter<"MinistryAnnouncement"> | string
    content?: StringWithAggregatesFilter<"MinistryAnnouncement"> | string
    isImportant?: BoolWithAggregatesFilter<"MinistryAnnouncement"> | boolean
    ministryId?: StringWithAggregatesFilter<"MinistryAnnouncement"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MinistryAnnouncement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MinistryAnnouncement"> | Date | string
  }

  export type MinistryScheduleWhereInput = {
    AND?: MinistryScheduleWhereInput | MinistryScheduleWhereInput[]
    OR?: MinistryScheduleWhereInput[]
    NOT?: MinistryScheduleWhereInput | MinistryScheduleWhereInput[]
    id?: StringFilter<"MinistrySchedule"> | string
    ministryId?: StringFilter<"MinistrySchedule"> | string
    positionId?: StringFilter<"MinistrySchedule"> | string
    userId?: StringFilter<"MinistrySchedule"> | string
    date?: DateTimeFilter<"MinistrySchedule"> | Date | string
    status?: StringFilter<"MinistrySchedule"> | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    position?: XOR<MinistryPositionScalarRelationFilter, MinistryPositionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MinistryScheduleOrderByWithRelationInput = {
    id?: SortOrder
    ministryId?: SortOrder
    positionId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    ministry?: MinistryOrderByWithRelationInput
    position?: MinistryPositionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MinistryScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryScheduleWhereInput | MinistryScheduleWhereInput[]
    OR?: MinistryScheduleWhereInput[]
    NOT?: MinistryScheduleWhereInput | MinistryScheduleWhereInput[]
    ministryId?: StringFilter<"MinistrySchedule"> | string
    positionId?: StringFilter<"MinistrySchedule"> | string
    userId?: StringFilter<"MinistrySchedule"> | string
    date?: DateTimeFilter<"MinistrySchedule"> | Date | string
    status?: StringFilter<"MinistrySchedule"> | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    position?: XOR<MinistryPositionScalarRelationFilter, MinistryPositionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MinistryScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    ministryId?: SortOrder
    positionId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    _count?: MinistryScheduleCountOrderByAggregateInput
    _max?: MinistryScheduleMaxOrderByAggregateInput
    _min?: MinistryScheduleMinOrderByAggregateInput
  }

  export type MinistryScheduleScalarWhereWithAggregatesInput = {
    AND?: MinistryScheduleScalarWhereWithAggregatesInput | MinistryScheduleScalarWhereWithAggregatesInput[]
    OR?: MinistryScheduleScalarWhereWithAggregatesInput[]
    NOT?: MinistryScheduleScalarWhereWithAggregatesInput | MinistryScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistrySchedule"> | string
    ministryId?: StringWithAggregatesFilter<"MinistrySchedule"> | string
    positionId?: StringWithAggregatesFilter<"MinistrySchedule"> | string
    userId?: StringWithAggregatesFilter<"MinistrySchedule"> | string
    date?: DateTimeWithAggregatesFilter<"MinistrySchedule"> | Date | string
    status?: StringWithAggregatesFilter<"MinistrySchedule"> | string
  }

  export type ChurchFeedWhereInput = {
    AND?: ChurchFeedWhereInput | ChurchFeedWhereInput[]
    OR?: ChurchFeedWhereInput[]
    NOT?: ChurchFeedWhereInput | ChurchFeedWhereInput[]
    id?: StringFilter<"ChurchFeed"> | string
    content?: StringFilter<"ChurchFeed"> | string
    churchId?: StringFilter<"ChurchFeed"> | string
    authorId?: StringFilter<"ChurchFeed"> | string
    createdAt?: DateTimeFilter<"ChurchFeed"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchFeed"> | Date | string
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    images?: FeedImageListRelationFilter
    likes?: FeedLikeListRelationFilter
    comments?: FeedCommentListRelationFilter
  }

  export type ChurchFeedOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    churchId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    church?: ChurchOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    images?: FeedImageOrderByRelationAggregateInput
    likes?: FeedLikeOrderByRelationAggregateInput
    comments?: FeedCommentOrderByRelationAggregateInput
  }

  export type ChurchFeedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChurchFeedWhereInput | ChurchFeedWhereInput[]
    OR?: ChurchFeedWhereInput[]
    NOT?: ChurchFeedWhereInput | ChurchFeedWhereInput[]
    content?: StringFilter<"ChurchFeed"> | string
    churchId?: StringFilter<"ChurchFeed"> | string
    authorId?: StringFilter<"ChurchFeed"> | string
    createdAt?: DateTimeFilter<"ChurchFeed"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchFeed"> | Date | string
    church?: XOR<ChurchScalarRelationFilter, ChurchWhereInput>
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    images?: FeedImageListRelationFilter
    likes?: FeedLikeListRelationFilter
    comments?: FeedCommentListRelationFilter
  }, "id">

  export type ChurchFeedOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    churchId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChurchFeedCountOrderByAggregateInput
    _max?: ChurchFeedMaxOrderByAggregateInput
    _min?: ChurchFeedMinOrderByAggregateInput
  }

  export type ChurchFeedScalarWhereWithAggregatesInput = {
    AND?: ChurchFeedScalarWhereWithAggregatesInput | ChurchFeedScalarWhereWithAggregatesInput[]
    OR?: ChurchFeedScalarWhereWithAggregatesInput[]
    NOT?: ChurchFeedScalarWhereWithAggregatesInput | ChurchFeedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChurchFeed"> | string
    content?: StringWithAggregatesFilter<"ChurchFeed"> | string
    churchId?: StringWithAggregatesFilter<"ChurchFeed"> | string
    authorId?: StringWithAggregatesFilter<"ChurchFeed"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChurchFeed"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChurchFeed"> | Date | string
  }

  export type FeedImageWhereInput = {
    AND?: FeedImageWhereInput | FeedImageWhereInput[]
    OR?: FeedImageWhereInput[]
    NOT?: FeedImageWhereInput | FeedImageWhereInput[]
    id?: StringFilter<"FeedImage"> | string
    url?: StringFilter<"FeedImage"> | string
    order?: IntFilter<"FeedImage"> | number
    feedId?: StringFilter<"FeedImage"> | string
    createdAt?: DateTimeFilter<"FeedImage"> | Date | string
    updatedAt?: DateTimeFilter<"FeedImage"> | Date | string
    feed?: XOR<ChurchFeedScalarRelationFilter, ChurchFeedWhereInput>
  }

  export type FeedImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    order?: SortOrder
    feedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feed?: ChurchFeedOrderByWithRelationInput
  }

  export type FeedImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedImageWhereInput | FeedImageWhereInput[]
    OR?: FeedImageWhereInput[]
    NOT?: FeedImageWhereInput | FeedImageWhereInput[]
    url?: StringFilter<"FeedImage"> | string
    order?: IntFilter<"FeedImage"> | number
    feedId?: StringFilter<"FeedImage"> | string
    createdAt?: DateTimeFilter<"FeedImage"> | Date | string
    updatedAt?: DateTimeFilter<"FeedImage"> | Date | string
    feed?: XOR<ChurchFeedScalarRelationFilter, ChurchFeedWhereInput>
  }, "id">

  export type FeedImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    order?: SortOrder
    feedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeedImageCountOrderByAggregateInput
    _avg?: FeedImageAvgOrderByAggregateInput
    _max?: FeedImageMaxOrderByAggregateInput
    _min?: FeedImageMinOrderByAggregateInput
    _sum?: FeedImageSumOrderByAggregateInput
  }

  export type FeedImageScalarWhereWithAggregatesInput = {
    AND?: FeedImageScalarWhereWithAggregatesInput | FeedImageScalarWhereWithAggregatesInput[]
    OR?: FeedImageScalarWhereWithAggregatesInput[]
    NOT?: FeedImageScalarWhereWithAggregatesInput | FeedImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedImage"> | string
    url?: StringWithAggregatesFilter<"FeedImage"> | string
    order?: IntWithAggregatesFilter<"FeedImage"> | number
    feedId?: StringWithAggregatesFilter<"FeedImage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FeedImage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeedImage"> | Date | string
  }

  export type FeedLikeWhereInput = {
    AND?: FeedLikeWhereInput | FeedLikeWhereInput[]
    OR?: FeedLikeWhereInput[]
    NOT?: FeedLikeWhereInput | FeedLikeWhereInput[]
    id?: StringFilter<"FeedLike"> | string
    feedId?: StringFilter<"FeedLike"> | string
    userId?: StringFilter<"FeedLike"> | string
    createdAt?: DateTimeFilter<"FeedLike"> | Date | string
    updatedAt?: DateTimeFilter<"FeedLike"> | Date | string
    feed?: XOR<ChurchFeedScalarRelationFilter, ChurchFeedWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FeedLikeOrderByWithRelationInput = {
    id?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feed?: ChurchFeedOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FeedLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    feedId_userId?: FeedLikeFeedIdUserIdCompoundUniqueInput
    AND?: FeedLikeWhereInput | FeedLikeWhereInput[]
    OR?: FeedLikeWhereInput[]
    NOT?: FeedLikeWhereInput | FeedLikeWhereInput[]
    feedId?: StringFilter<"FeedLike"> | string
    userId?: StringFilter<"FeedLike"> | string
    createdAt?: DateTimeFilter<"FeedLike"> | Date | string
    updatedAt?: DateTimeFilter<"FeedLike"> | Date | string
    feed?: XOR<ChurchFeedScalarRelationFilter, ChurchFeedWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "feedId_userId">

  export type FeedLikeOrderByWithAggregationInput = {
    id?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeedLikeCountOrderByAggregateInput
    _max?: FeedLikeMaxOrderByAggregateInput
    _min?: FeedLikeMinOrderByAggregateInput
  }

  export type FeedLikeScalarWhereWithAggregatesInput = {
    AND?: FeedLikeScalarWhereWithAggregatesInput | FeedLikeScalarWhereWithAggregatesInput[]
    OR?: FeedLikeScalarWhereWithAggregatesInput[]
    NOT?: FeedLikeScalarWhereWithAggregatesInput | FeedLikeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedLike"> | string
    feedId?: StringWithAggregatesFilter<"FeedLike"> | string
    userId?: StringWithAggregatesFilter<"FeedLike"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FeedLike"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeedLike"> | Date | string
  }

  export type FeedCommentWhereInput = {
    AND?: FeedCommentWhereInput | FeedCommentWhereInput[]
    OR?: FeedCommentWhereInput[]
    NOT?: FeedCommentWhereInput | FeedCommentWhereInput[]
    id?: StringFilter<"FeedComment"> | string
    content?: StringFilter<"FeedComment"> | string
    feedId?: StringFilter<"FeedComment"> | string
    userId?: StringFilter<"FeedComment"> | string
    createdAt?: DateTimeFilter<"FeedComment"> | Date | string
    updatedAt?: DateTimeFilter<"FeedComment"> | Date | string
    feed?: XOR<ChurchFeedScalarRelationFilter, ChurchFeedWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FeedCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    feed?: ChurchFeedOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FeedCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedCommentWhereInput | FeedCommentWhereInput[]
    OR?: FeedCommentWhereInput[]
    NOT?: FeedCommentWhereInput | FeedCommentWhereInput[]
    content?: StringFilter<"FeedComment"> | string
    feedId?: StringFilter<"FeedComment"> | string
    userId?: StringFilter<"FeedComment"> | string
    createdAt?: DateTimeFilter<"FeedComment"> | Date | string
    updatedAt?: DateTimeFilter<"FeedComment"> | Date | string
    feed?: XOR<ChurchFeedScalarRelationFilter, ChurchFeedWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FeedCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeedCommentCountOrderByAggregateInput
    _max?: FeedCommentMaxOrderByAggregateInput
    _min?: FeedCommentMinOrderByAggregateInput
  }

  export type FeedCommentScalarWhereWithAggregatesInput = {
    AND?: FeedCommentScalarWhereWithAggregatesInput | FeedCommentScalarWhereWithAggregatesInput[]
    OR?: FeedCommentScalarWhereWithAggregatesInput[]
    NOT?: FeedCommentScalarWhereWithAggregatesInput | FeedCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedComment"> | string
    content?: StringWithAggregatesFilter<"FeedComment"> | string
    feedId?: StringWithAggregatesFilter<"FeedComment"> | string
    userId?: StringWithAggregatesFilter<"FeedComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FeedComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeedComment"> | Date | string
  }

  export type MinistryPositionWhereInput = {
    AND?: MinistryPositionWhereInput | MinistryPositionWhereInput[]
    OR?: MinistryPositionWhereInput[]
    NOT?: MinistryPositionWhereInput | MinistryPositionWhereInput[]
    id?: StringFilter<"MinistryPosition"> | string
    ministryId?: StringFilter<"MinistryPosition"> | string
    name?: StringFilter<"MinistryPosition"> | string
    description?: StringNullableFilter<"MinistryPosition"> | string | null
    maxMembers?: IntNullableFilter<"MinistryPosition"> | number | null
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    schedules?: MinistryScheduleListRelationFilter
  }

  export type MinistryPositionOrderByWithRelationInput = {
    id?: SortOrder
    ministryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    maxMembers?: SortOrderInput | SortOrder
    ministry?: MinistryOrderByWithRelationInput
    schedules?: MinistryScheduleOrderByRelationAggregateInput
  }

  export type MinistryPositionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryPositionWhereInput | MinistryPositionWhereInput[]
    OR?: MinistryPositionWhereInput[]
    NOT?: MinistryPositionWhereInput | MinistryPositionWhereInput[]
    ministryId?: StringFilter<"MinistryPosition"> | string
    name?: StringFilter<"MinistryPosition"> | string
    description?: StringNullableFilter<"MinistryPosition"> | string | null
    maxMembers?: IntNullableFilter<"MinistryPosition"> | number | null
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    schedules?: MinistryScheduleListRelationFilter
  }, "id">

  export type MinistryPositionOrderByWithAggregationInput = {
    id?: SortOrder
    ministryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    maxMembers?: SortOrderInput | SortOrder
    _count?: MinistryPositionCountOrderByAggregateInput
    _avg?: MinistryPositionAvgOrderByAggregateInput
    _max?: MinistryPositionMaxOrderByAggregateInput
    _min?: MinistryPositionMinOrderByAggregateInput
    _sum?: MinistryPositionSumOrderByAggregateInput
  }

  export type MinistryPositionScalarWhereWithAggregatesInput = {
    AND?: MinistryPositionScalarWhereWithAggregatesInput | MinistryPositionScalarWhereWithAggregatesInput[]
    OR?: MinistryPositionScalarWhereWithAggregatesInput[]
    NOT?: MinistryPositionScalarWhereWithAggregatesInput | MinistryPositionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistryPosition"> | string
    ministryId?: StringWithAggregatesFilter<"MinistryPosition"> | string
    name?: StringWithAggregatesFilter<"MinistryPosition"> | string
    description?: StringNullableWithAggregatesFilter<"MinistryPosition"> | string | null
    maxMembers?: IntNullableWithAggregatesFilter<"MinistryPosition"> | number | null
  }

  export type MinistryFileWhereInput = {
    AND?: MinistryFileWhereInput | MinistryFileWhereInput[]
    OR?: MinistryFileWhereInput[]
    NOT?: MinistryFileWhereInput | MinistryFileWhereInput[]
    id?: StringFilter<"MinistryFile"> | string
    name?: StringFilter<"MinistryFile"> | string
    url?: StringFilter<"MinistryFile"> | string
    type?: StringFilter<"MinistryFile"> | string
    size?: IntFilter<"MinistryFile"> | number
    createdAt?: DateTimeFilter<"MinistryFile"> | Date | string
    ministryId?: StringFilter<"MinistryFile"> | string
    uploadedById?: StringFilter<"MinistryFile"> | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MinistryFileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    ministryId?: SortOrder
    uploadedById?: SortOrder
    ministry?: MinistryOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type MinistryFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MinistryFileWhereInput | MinistryFileWhereInput[]
    OR?: MinistryFileWhereInput[]
    NOT?: MinistryFileWhereInput | MinistryFileWhereInput[]
    name?: StringFilter<"MinistryFile"> | string
    url?: StringFilter<"MinistryFile"> | string
    type?: StringFilter<"MinistryFile"> | string
    size?: IntFilter<"MinistryFile"> | number
    createdAt?: DateTimeFilter<"MinistryFile"> | Date | string
    ministryId?: StringFilter<"MinistryFile"> | string
    uploadedById?: StringFilter<"MinistryFile"> | string
    ministry?: XOR<MinistryScalarRelationFilter, MinistryWhereInput>
    uploadedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MinistryFileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    ministryId?: SortOrder
    uploadedById?: SortOrder
    _count?: MinistryFileCountOrderByAggregateInput
    _avg?: MinistryFileAvgOrderByAggregateInput
    _max?: MinistryFileMaxOrderByAggregateInput
    _min?: MinistryFileMinOrderByAggregateInput
    _sum?: MinistryFileSumOrderByAggregateInput
  }

  export type MinistryFileScalarWhereWithAggregatesInput = {
    AND?: MinistryFileScalarWhereWithAggregatesInput | MinistryFileScalarWhereWithAggregatesInput[]
    OR?: MinistryFileScalarWhereWithAggregatesInput[]
    NOT?: MinistryFileScalarWhereWithAggregatesInput | MinistryFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MinistryFile"> | string
    name?: StringWithAggregatesFilter<"MinistryFile"> | string
    url?: StringWithAggregatesFilter<"MinistryFile"> | string
    type?: StringWithAggregatesFilter<"MinistryFile"> | string
    size?: IntWithAggregatesFilter<"MinistryFile"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MinistryFile"> | Date | string
    ministryId?: StringWithAggregatesFilter<"MinistryFile"> | string
    uploadedById?: StringWithAggregatesFilter<"MinistryFile"> | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthenticatorCreateInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
    user: UserCreateNestedOneWithoutAuthenticatorInput
  }

  export type AuthenticatorUncheckedCreateInput = {
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorUpdateInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAuthenticatorNestedInput
  }

  export type AuthenticatorUncheckedUpdateInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorCreateManyInput = {
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorUpdateManyMutationInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorUncheckedUpdateManyInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChurchCreateInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberCreateNestedManyWithoutChurchInput
    ministries?: MinistryCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedCreateNestedManyWithoutChurchInput
  }

  export type ChurchUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberUncheckedCreateNestedManyWithoutChurchInput
    ministries?: MinistryUncheckedCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeUncheckedCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutChurchInput
  }

  export type ChurchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUpdateManyWithoutChurchNestedInput
    ministries?: MinistryUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUpdateManyWithoutChurchNestedInput
  }

  export type ChurchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUncheckedUpdateManyWithoutChurchNestedInput
    ministries?: MinistryUncheckedUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUncheckedUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutChurchNestedInput
  }

  export type ChurchCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchMemberCreateInput = {
    id?: string
    role?: $Enums.ChurchRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChurchesInput
    church: ChurchCreateNestedOneWithoutMembersInput
  }

  export type ChurchMemberUncheckedCreateInput = {
    id?: string
    role?: $Enums.ChurchRole
    userId: string
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChurchesNestedInput
    church?: ChurchUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ChurchMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    userId?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchMemberCreateManyInput = {
    id?: string
    role?: $Enums.ChurchRole
    userId: string
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    userId?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberCreateInput = {
    id?: string
    role?: $Enums.MinistryRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMinistriesInput
    ministry: MinistryCreateNestedOneWithoutMembersInput
  }

  export type MinistryMemberUncheckedCreateInput = {
    id?: string
    role?: $Enums.MinistryRole
    userId: string
    ministryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMinistriesNestedInput
    ministry?: MinistryUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MinistryMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    userId?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberCreateManyInput = {
    id?: string
    role?: $Enums.MinistryRole
    userId: string
    ministryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    userId?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchNoticeCreateInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutNoticesInput
  }

  export type ChurchNoticeUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchNoticeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutNoticesNestedInput
  }

  export type ChurchNoticeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchNoticeCreateManyInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchNoticeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchNoticeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryNoticeCreateInput = {
    id?: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutNoticesInput
    user: UserCreateNestedOneWithoutMinistryNoticesInput
    events?: MinistryEventCreateNestedManyWithoutNoticeInput
  }

  export type MinistryNoticeUncheckedCreateInput = {
    id?: string
    ministryId: string
    userId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: MinistryEventUncheckedCreateNestedManyWithoutNoticeInput
  }

  export type MinistryNoticeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutNoticesNestedInput
    user?: UserUpdateOneRequiredWithoutMinistryNoticesNestedInput
    events?: MinistryEventUpdateManyWithoutNoticeNestedInput
  }

  export type MinistryNoticeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: MinistryEventUncheckedUpdateManyWithoutNoticeNestedInput
  }

  export type MinistryNoticeCreateManyInput = {
    id?: string
    ministryId: string
    userId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryNoticeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryNoticeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryEventCreateInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    eventDate: Date | string
    startTime: Date | string
    endTime: Date | string
    maxAttendees?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notice: MinistryNoticeCreateNestedOneWithoutEventsInput
  }

  export type MinistryEventUncheckedCreateInput = {
    id?: string
    noticeId: string
    title: string
    description?: string | null
    location?: string | null
    eventDate: Date | string
    startTime: Date | string
    endTime: Date | string
    maxAttendees?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notice?: MinistryNoticeUpdateOneRequiredWithoutEventsNestedInput
  }

  export type MinistryEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    noticeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryEventCreateManyInput = {
    id?: string
    noticeId: string
    title: string
    description?: string | null
    location?: string | null
    eventDate: Date | string
    startTime: Date | string
    endTime: Date | string
    maxAttendees?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    noticeId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryAnnouncementCreateInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutAnnouncementsInput
  }

  export type MinistryAnnouncementUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    ministryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryAnnouncementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutAnnouncementsNestedInput
  }

  export type MinistryAnnouncementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    ministryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryAnnouncementCreateManyInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    ministryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryAnnouncementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryAnnouncementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    ministryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryScheduleCreateInput = {
    id?: string
    date: Date | string
    status?: string
    ministry: MinistryCreateNestedOneWithoutSchedulesInput
    position: MinistryPositionCreateNestedOneWithoutSchedulesInput
    user: UserCreateNestedOneWithoutSchedulesInput
  }

  export type MinistryScheduleUncheckedCreateInput = {
    id?: string
    ministryId: string
    positionId: string
    userId: string
    date: Date | string
    status?: string
  }

  export type MinistryScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    ministry?: MinistryUpdateOneRequiredWithoutSchedulesNestedInput
    position?: MinistryPositionUpdateOneRequiredWithoutSchedulesNestedInput
    user?: UserUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type MinistryScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    positionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryScheduleCreateManyInput = {
    id?: string
    ministryId: string
    positionId: string
    userId: string
    date: Date | string
    status?: string
  }

  export type MinistryScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    positionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ChurchFeedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutFeedsInput
    author: UserCreateNestedOneWithoutFeedsInput
    images?: FeedImageCreateNestedManyWithoutFeedInput
    likes?: FeedLikeCreateNestedManyWithoutFeedInput
    comments?: FeedCommentCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUncheckedCreateInput = {
    id?: string
    content: string
    churchId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: FeedImageUncheckedCreateNestedManyWithoutFeedInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutFeedInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutFeedsNestedInput
    author?: UserUpdateOneRequiredWithoutFeedsNestedInput
    images?: FeedImageUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: FeedImageUncheckedUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedCreateManyInput = {
    id?: string
    content: string
    churchId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchFeedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchFeedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedImageCreateInput = {
    id?: string
    url: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feed: ChurchFeedCreateNestedOneWithoutImagesInput
  }

  export type FeedImageUncheckedCreateInput = {
    id?: string
    url: string
    order: number
    feedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feed?: ChurchFeedUpdateOneRequiredWithoutImagesNestedInput
  }

  export type FeedImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    feedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedImageCreateManyInput = {
    id?: string
    url: string
    order: number
    feedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    feedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feed: ChurchFeedCreateNestedOneWithoutLikesInput
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type FeedLikeUncheckedCreateInput = {
    id?: string
    feedId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLikeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feed?: ChurchFeedUpdateOneRequiredWithoutLikesNestedInput
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type FeedLikeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeCreateManyInput = {
    id?: string
    feedId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLikeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feed: ChurchFeedCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type FeedCommentUncheckedCreateInput = {
    id?: string
    content: string
    feedId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feed?: ChurchFeedUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type FeedCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentCreateManyInput = {
    id?: string
    content: string
    feedId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryPositionCreateInput = {
    id?: string
    name: string
    description?: string | null
    maxMembers?: number | null
    ministry: MinistryCreateNestedOneWithoutPositionsInput
    schedules?: MinistryScheduleCreateNestedManyWithoutPositionInput
  }

  export type MinistryPositionUncheckedCreateInput = {
    id?: string
    ministryId: string
    name: string
    description?: string | null
    maxMembers?: number | null
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutPositionInput
  }

  export type MinistryPositionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    ministry?: MinistryUpdateOneRequiredWithoutPositionsNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutPositionNestedInput
  }

  export type MinistryPositionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type MinistryPositionCreateManyInput = {
    id?: string
    ministryId: string
    name: string
    description?: string | null
    maxMembers?: number | null
  }

  export type MinistryPositionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MinistryPositionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MinistryFileCreateInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutFilesInput
    uploadedBy: UserCreateNestedOneWithoutUploadedFilesInput
  }

  export type MinistryFileUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    ministryId: string
    uploadedById: string
  }

  export type MinistryFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutFilesNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
  }

  export type MinistryFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministryId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryFileCreateManyInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    ministryId: string
    uploadedById: string
  }

  export type MinistryFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministryId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AuthenticatorListRelationFilter = {
    every?: AuthenticatorWhereInput
    some?: AuthenticatorWhereInput
    none?: AuthenticatorWhereInput
  }

  export type ChurchMemberListRelationFilter = {
    every?: ChurchMemberWhereInput
    some?: ChurchMemberWhereInput
    none?: ChurchMemberWhereInput
  }

  export type MinistryMemberListRelationFilter = {
    every?: MinistryMemberWhereInput
    some?: MinistryMemberWhereInput
    none?: MinistryMemberWhereInput
  }

  export type MinistryScheduleListRelationFilter = {
    every?: MinistryScheduleWhereInput
    some?: MinistryScheduleWhereInput
    none?: MinistryScheduleWhereInput
  }

  export type MinistryNoticeListRelationFilter = {
    every?: MinistryNoticeWhereInput
    some?: MinistryNoticeWhereInput
    none?: MinistryNoticeWhereInput
  }

  export type ChurchFeedListRelationFilter = {
    every?: ChurchFeedWhereInput
    some?: ChurchFeedWhereInput
    none?: ChurchFeedWhereInput
  }

  export type FeedLikeListRelationFilter = {
    every?: FeedLikeWhereInput
    some?: FeedLikeWhereInput
    none?: FeedLikeWhereInput
  }

  export type FeedCommentListRelationFilter = {
    every?: FeedCommentWhereInput
    some?: FeedCommentWhereInput
    none?: FeedCommentWhereInput
  }

  export type MinistryFileListRelationFilter = {
    every?: MinistryFileWhereInput
    some?: MinistryFileWhereInput
    none?: MinistryFileWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthenticatorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryNoticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchFeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AuthenticatorUserIdCredentialIDCompoundUniqueInput = {
    userId: string
    credentialID: string
  }

  export type AuthenticatorCountOrderByAggregateInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrder
  }

  export type AuthenticatorAvgOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type AuthenticatorMaxOrderByAggregateInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrder
  }

  export type AuthenticatorMinOrderByAggregateInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrder
  }

  export type AuthenticatorSumOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MinistryListRelationFilter = {
    every?: MinistryWhereInput
    some?: MinistryWhereInput
    none?: MinistryWhereInput
  }

  export type ChurchNoticeListRelationFilter = {
    every?: ChurchNoticeWhereInput
    some?: ChurchNoticeWhereInput
    none?: ChurchNoticeWhereInput
  }

  export type MinistryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchNoticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    instagram?: SortOrder
    youtube?: SortOrder
    homepage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    instagram?: SortOrder
    youtube?: SortOrder
    homepage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    instagram?: SortOrder
    youtube?: SortOrder
    homepage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumChurchRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChurchRole | EnumChurchRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChurchRoleFilter<$PrismaModel> | $Enums.ChurchRole
  }

  export type ChurchScalarRelationFilter = {
    is?: ChurchWhereInput
    isNot?: ChurchWhereInput
  }

  export type ChurchMemberUserIdChurchIdCompoundUniqueInput = {
    userId: string
    churchId: string
  }

  export type ChurchMemberCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchMemberMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumChurchRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChurchRole | EnumChurchRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChurchRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChurchRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChurchRoleFilter<$PrismaModel>
    _max?: NestedEnumChurchRoleFilter<$PrismaModel>
  }

  export type MinistryAnnouncementListRelationFilter = {
    every?: MinistryAnnouncementWhereInput
    some?: MinistryAnnouncementWhereInput
    none?: MinistryAnnouncementWhereInput
  }

  export type MinistryPositionListRelationFilter = {
    every?: MinistryPositionWhereInput
    some?: MinistryPositionWhereInput
    none?: MinistryPositionWhereInput
  }

  export type MinistryAnnouncementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryPositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMinistryRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.MinistryRole | EnumMinistryRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMinistryRoleFilter<$PrismaModel> | $Enums.MinistryRole
  }

  export type MinistryScalarRelationFilter = {
    is?: MinistryWhereInput
    isNot?: MinistryWhereInput
  }

  export type MinistryMemberUserIdMinistryIdCompoundUniqueInput = {
    userId: string
    ministryId: string
  }

  export type MinistryMemberCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryMemberMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    userId?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMinistryRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MinistryRole | EnumMinistryRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMinistryRoleWithAggregatesFilter<$PrismaModel> | $Enums.MinistryRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMinistryRoleFilter<$PrismaModel>
    _max?: NestedEnumMinistryRoleFilter<$PrismaModel>
  }

  export type ChurchNoticeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchNoticeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchNoticeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    churchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryEventListRelationFilter = {
    every?: MinistryEventWhereInput
    some?: MinistryEventWhereInput
    none?: MinistryEventWhereInput
  }

  export type MinistryEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MinistryNoticeCountOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryNoticeMaxOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryNoticeMinOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryNoticeScalarRelationFilter = {
    is?: MinistryNoticeWhereInput
    isNot?: MinistryNoticeWhereInput
  }

  export type MinistryEventCountOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    eventDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxAttendees?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryEventAvgOrderByAggregateInput = {
    maxAttendees?: SortOrder
  }

  export type MinistryEventMaxOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    eventDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxAttendees?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryEventMinOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    eventDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    maxAttendees?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryEventSumOrderByAggregateInput = {
    maxAttendees?: SortOrder
  }

  export type MinistryAnnouncementCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryAnnouncementMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryAnnouncementMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    isImportant?: SortOrder
    ministryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryPositionScalarRelationFilter = {
    is?: MinistryPositionWhereInput
    isNot?: MinistryPositionWhereInput
  }

  export type MinistryScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    positionId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type MinistryScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    positionId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type MinistryScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    positionId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type FeedImageListRelationFilter = {
    every?: FeedImageWhereInput
    some?: FeedImageWhereInput
    none?: FeedImageWhereInput
  }

  export type FeedImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChurchFeedCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    churchId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchFeedMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    churchId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchFeedMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    churchId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChurchFeedScalarRelationFilter = {
    is?: ChurchFeedWhereInput
    isNot?: ChurchFeedWhereInput
  }

  export type FeedImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    order?: SortOrder
    feedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedImageAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FeedImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    order?: SortOrder
    feedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    order?: SortOrder
    feedId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedImageSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FeedLikeFeedIdUserIdCompoundUniqueInput = {
    feedId: string
    userId: string
  }

  export type FeedLikeCountOrderByAggregateInput = {
    id?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedLikeMinOrderByAggregateInput = {
    id?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    feedId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MinistryPositionCountOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxMembers?: SortOrder
  }

  export type MinistryPositionAvgOrderByAggregateInput = {
    maxMembers?: SortOrder
  }

  export type MinistryPositionMaxOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxMembers?: SortOrder
  }

  export type MinistryPositionMinOrderByAggregateInput = {
    id?: SortOrder
    ministryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    maxMembers?: SortOrder
  }

  export type MinistryPositionSumOrderByAggregateInput = {
    maxMembers?: SortOrder
  }

  export type MinistryFileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    ministryId?: SortOrder
    uploadedById?: SortOrder
  }

  export type MinistryFileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type MinistryFileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    ministryId?: SortOrder
    uploadedById?: SortOrder
  }

  export type MinistryFileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    ministryId?: SortOrder
    uploadedById?: SortOrder
  }

  export type MinistryFileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuthenticatorCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
  }

  export type ChurchMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<ChurchMemberCreateWithoutUserInput, ChurchMemberUncheckedCreateWithoutUserInput> | ChurchMemberCreateWithoutUserInput[] | ChurchMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutUserInput | ChurchMemberCreateOrConnectWithoutUserInput[]
    createMany?: ChurchMemberCreateManyUserInputEnvelope
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
  }

  export type MinistryMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<MinistryMemberCreateWithoutUserInput, MinistryMemberUncheckedCreateWithoutUserInput> | MinistryMemberCreateWithoutUserInput[] | MinistryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutUserInput | MinistryMemberCreateOrConnectWithoutUserInput[]
    createMany?: MinistryMemberCreateManyUserInputEnvelope
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
  }

  export type MinistryScheduleCreateNestedManyWithoutUserInput = {
    create?: XOR<MinistryScheduleCreateWithoutUserInput, MinistryScheduleUncheckedCreateWithoutUserInput> | MinistryScheduleCreateWithoutUserInput[] | MinistryScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutUserInput | MinistryScheduleCreateOrConnectWithoutUserInput[]
    createMany?: MinistryScheduleCreateManyUserInputEnvelope
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
  }

  export type MinistryNoticeCreateNestedManyWithoutUserInput = {
    create?: XOR<MinistryNoticeCreateWithoutUserInput, MinistryNoticeUncheckedCreateWithoutUserInput> | MinistryNoticeCreateWithoutUserInput[] | MinistryNoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutUserInput | MinistryNoticeCreateOrConnectWithoutUserInput[]
    createMany?: MinistryNoticeCreateManyUserInputEnvelope
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
  }

  export type ChurchFeedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ChurchFeedCreateWithoutAuthorInput, ChurchFeedUncheckedCreateWithoutAuthorInput> | ChurchFeedCreateWithoutAuthorInput[] | ChurchFeedUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutAuthorInput | ChurchFeedCreateOrConnectWithoutAuthorInput[]
    createMany?: ChurchFeedCreateManyAuthorInputEnvelope
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
  }

  export type FeedLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedLikeCreateWithoutUserInput, FeedLikeUncheckedCreateWithoutUserInput> | FeedLikeCreateWithoutUserInput[] | FeedLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutUserInput | FeedLikeCreateOrConnectWithoutUserInput[]
    createMany?: FeedLikeCreateManyUserInputEnvelope
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
  }

  export type FeedCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedCommentCreateWithoutUserInput, FeedCommentUncheckedCreateWithoutUserInput> | FeedCommentCreateWithoutUserInput[] | FeedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutUserInput | FeedCommentCreateOrConnectWithoutUserInput[]
    createMany?: FeedCommentCreateManyUserInputEnvelope
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
  }

  export type MinistryFileCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<MinistryFileCreateWithoutUploadedByInput, MinistryFileUncheckedCreateWithoutUploadedByInput> | MinistryFileCreateWithoutUploadedByInput[] | MinistryFileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutUploadedByInput | MinistryFileCreateOrConnectWithoutUploadedByInput[]
    createMany?: MinistryFileCreateManyUploadedByInputEnvelope
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuthenticatorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
  }

  export type ChurchMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChurchMemberCreateWithoutUserInput, ChurchMemberUncheckedCreateWithoutUserInput> | ChurchMemberCreateWithoutUserInput[] | ChurchMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutUserInput | ChurchMemberCreateOrConnectWithoutUserInput[]
    createMany?: ChurchMemberCreateManyUserInputEnvelope
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
  }

  export type MinistryMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MinistryMemberCreateWithoutUserInput, MinistryMemberUncheckedCreateWithoutUserInput> | MinistryMemberCreateWithoutUserInput[] | MinistryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutUserInput | MinistryMemberCreateOrConnectWithoutUserInput[]
    createMany?: MinistryMemberCreateManyUserInputEnvelope
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
  }

  export type MinistryScheduleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MinistryScheduleCreateWithoutUserInput, MinistryScheduleUncheckedCreateWithoutUserInput> | MinistryScheduleCreateWithoutUserInput[] | MinistryScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutUserInput | MinistryScheduleCreateOrConnectWithoutUserInput[]
    createMany?: MinistryScheduleCreateManyUserInputEnvelope
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
  }

  export type MinistryNoticeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MinistryNoticeCreateWithoutUserInput, MinistryNoticeUncheckedCreateWithoutUserInput> | MinistryNoticeCreateWithoutUserInput[] | MinistryNoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutUserInput | MinistryNoticeCreateOrConnectWithoutUserInput[]
    createMany?: MinistryNoticeCreateManyUserInputEnvelope
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
  }

  export type ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ChurchFeedCreateWithoutAuthorInput, ChurchFeedUncheckedCreateWithoutAuthorInput> | ChurchFeedCreateWithoutAuthorInput[] | ChurchFeedUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutAuthorInput | ChurchFeedCreateOrConnectWithoutAuthorInput[]
    createMany?: ChurchFeedCreateManyAuthorInputEnvelope
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
  }

  export type FeedLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedLikeCreateWithoutUserInput, FeedLikeUncheckedCreateWithoutUserInput> | FeedLikeCreateWithoutUserInput[] | FeedLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutUserInput | FeedLikeCreateOrConnectWithoutUserInput[]
    createMany?: FeedLikeCreateManyUserInputEnvelope
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
  }

  export type FeedCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedCommentCreateWithoutUserInput, FeedCommentUncheckedCreateWithoutUserInput> | FeedCommentCreateWithoutUserInput[] | FeedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutUserInput | FeedCommentCreateOrConnectWithoutUserInput[]
    createMany?: FeedCommentCreateManyUserInputEnvelope
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
  }

  export type MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<MinistryFileCreateWithoutUploadedByInput, MinistryFileUncheckedCreateWithoutUploadedByInput> | MinistryFileCreateWithoutUploadedByInput[] | MinistryFileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutUploadedByInput | MinistryFileCreateOrConnectWithoutUploadedByInput[]
    createMany?: MinistryFileCreateManyUploadedByInputEnvelope
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuthenticatorUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    upsert?: AuthenticatorUpsertWithWhereUniqueWithoutUserInput | AuthenticatorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    set?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    disconnect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    delete?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    update?: AuthenticatorUpdateWithWhereUniqueWithoutUserInput | AuthenticatorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthenticatorUpdateManyWithWhereWithoutUserInput | AuthenticatorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
  }

  export type ChurchMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChurchMemberCreateWithoutUserInput, ChurchMemberUncheckedCreateWithoutUserInput> | ChurchMemberCreateWithoutUserInput[] | ChurchMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutUserInput | ChurchMemberCreateOrConnectWithoutUserInput[]
    upsert?: ChurchMemberUpsertWithWhereUniqueWithoutUserInput | ChurchMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChurchMemberCreateManyUserInputEnvelope
    set?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    disconnect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    delete?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    update?: ChurchMemberUpdateWithWhereUniqueWithoutUserInput | ChurchMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChurchMemberUpdateManyWithWhereWithoutUserInput | ChurchMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChurchMemberScalarWhereInput | ChurchMemberScalarWhereInput[]
  }

  export type MinistryMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<MinistryMemberCreateWithoutUserInput, MinistryMemberUncheckedCreateWithoutUserInput> | MinistryMemberCreateWithoutUserInput[] | MinistryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutUserInput | MinistryMemberCreateOrConnectWithoutUserInput[]
    upsert?: MinistryMemberUpsertWithWhereUniqueWithoutUserInput | MinistryMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MinistryMemberCreateManyUserInputEnvelope
    set?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    disconnect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    delete?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    update?: MinistryMemberUpdateWithWhereUniqueWithoutUserInput | MinistryMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MinistryMemberUpdateManyWithWhereWithoutUserInput | MinistryMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MinistryMemberScalarWhereInput | MinistryMemberScalarWhereInput[]
  }

  export type MinistryScheduleUpdateManyWithoutUserNestedInput = {
    create?: XOR<MinistryScheduleCreateWithoutUserInput, MinistryScheduleUncheckedCreateWithoutUserInput> | MinistryScheduleCreateWithoutUserInput[] | MinistryScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutUserInput | MinistryScheduleCreateOrConnectWithoutUserInput[]
    upsert?: MinistryScheduleUpsertWithWhereUniqueWithoutUserInput | MinistryScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MinistryScheduleCreateManyUserInputEnvelope
    set?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    disconnect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    delete?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    update?: MinistryScheduleUpdateWithWhereUniqueWithoutUserInput | MinistryScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MinistryScheduleUpdateManyWithWhereWithoutUserInput | MinistryScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
  }

  export type MinistryNoticeUpdateManyWithoutUserNestedInput = {
    create?: XOR<MinistryNoticeCreateWithoutUserInput, MinistryNoticeUncheckedCreateWithoutUserInput> | MinistryNoticeCreateWithoutUserInput[] | MinistryNoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutUserInput | MinistryNoticeCreateOrConnectWithoutUserInput[]
    upsert?: MinistryNoticeUpsertWithWhereUniqueWithoutUserInput | MinistryNoticeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MinistryNoticeCreateManyUserInputEnvelope
    set?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    disconnect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    delete?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    update?: MinistryNoticeUpdateWithWhereUniqueWithoutUserInput | MinistryNoticeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MinistryNoticeUpdateManyWithWhereWithoutUserInput | MinistryNoticeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MinistryNoticeScalarWhereInput | MinistryNoticeScalarWhereInput[]
  }

  export type ChurchFeedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutAuthorInput, ChurchFeedUncheckedCreateWithoutAuthorInput> | ChurchFeedCreateWithoutAuthorInput[] | ChurchFeedUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutAuthorInput | ChurchFeedCreateOrConnectWithoutAuthorInput[]
    upsert?: ChurchFeedUpsertWithWhereUniqueWithoutAuthorInput | ChurchFeedUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ChurchFeedCreateManyAuthorInputEnvelope
    set?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    disconnect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    delete?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    update?: ChurchFeedUpdateWithWhereUniqueWithoutAuthorInput | ChurchFeedUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ChurchFeedUpdateManyWithWhereWithoutAuthorInput | ChurchFeedUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ChurchFeedScalarWhereInput | ChurchFeedScalarWhereInput[]
  }

  export type FeedLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedLikeCreateWithoutUserInput, FeedLikeUncheckedCreateWithoutUserInput> | FeedLikeCreateWithoutUserInput[] | FeedLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutUserInput | FeedLikeCreateOrConnectWithoutUserInput[]
    upsert?: FeedLikeUpsertWithWhereUniqueWithoutUserInput | FeedLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedLikeCreateManyUserInputEnvelope
    set?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    disconnect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    delete?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    update?: FeedLikeUpdateWithWhereUniqueWithoutUserInput | FeedLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedLikeUpdateManyWithWhereWithoutUserInput | FeedLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedLikeScalarWhereInput | FeedLikeScalarWhereInput[]
  }

  export type FeedCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedCommentCreateWithoutUserInput, FeedCommentUncheckedCreateWithoutUserInput> | FeedCommentCreateWithoutUserInput[] | FeedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutUserInput | FeedCommentCreateOrConnectWithoutUserInput[]
    upsert?: FeedCommentUpsertWithWhereUniqueWithoutUserInput | FeedCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedCommentCreateManyUserInputEnvelope
    set?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    disconnect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    delete?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    update?: FeedCommentUpdateWithWhereUniqueWithoutUserInput | FeedCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedCommentUpdateManyWithWhereWithoutUserInput | FeedCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedCommentScalarWhereInput | FeedCommentScalarWhereInput[]
  }

  export type MinistryFileUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<MinistryFileCreateWithoutUploadedByInput, MinistryFileUncheckedCreateWithoutUploadedByInput> | MinistryFileCreateWithoutUploadedByInput[] | MinistryFileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutUploadedByInput | MinistryFileCreateOrConnectWithoutUploadedByInput[]
    upsert?: MinistryFileUpsertWithWhereUniqueWithoutUploadedByInput | MinistryFileUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: MinistryFileCreateManyUploadedByInputEnvelope
    set?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    disconnect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    delete?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    update?: MinistryFileUpdateWithWhereUniqueWithoutUploadedByInput | MinistryFileUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: MinistryFileUpdateManyWithWhereWithoutUploadedByInput | MinistryFileUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: MinistryFileScalarWhereInput | MinistryFileScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuthenticatorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    upsert?: AuthenticatorUpsertWithWhereUniqueWithoutUserInput | AuthenticatorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    set?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    disconnect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    delete?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    update?: AuthenticatorUpdateWithWhereUniqueWithoutUserInput | AuthenticatorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthenticatorUpdateManyWithWhereWithoutUserInput | AuthenticatorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
  }

  export type ChurchMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChurchMemberCreateWithoutUserInput, ChurchMemberUncheckedCreateWithoutUserInput> | ChurchMemberCreateWithoutUserInput[] | ChurchMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutUserInput | ChurchMemberCreateOrConnectWithoutUserInput[]
    upsert?: ChurchMemberUpsertWithWhereUniqueWithoutUserInput | ChurchMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChurchMemberCreateManyUserInputEnvelope
    set?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    disconnect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    delete?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    update?: ChurchMemberUpdateWithWhereUniqueWithoutUserInput | ChurchMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChurchMemberUpdateManyWithWhereWithoutUserInput | ChurchMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChurchMemberScalarWhereInput | ChurchMemberScalarWhereInput[]
  }

  export type MinistryMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MinistryMemberCreateWithoutUserInput, MinistryMemberUncheckedCreateWithoutUserInput> | MinistryMemberCreateWithoutUserInput[] | MinistryMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutUserInput | MinistryMemberCreateOrConnectWithoutUserInput[]
    upsert?: MinistryMemberUpsertWithWhereUniqueWithoutUserInput | MinistryMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MinistryMemberCreateManyUserInputEnvelope
    set?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    disconnect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    delete?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    update?: MinistryMemberUpdateWithWhereUniqueWithoutUserInput | MinistryMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MinistryMemberUpdateManyWithWhereWithoutUserInput | MinistryMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MinistryMemberScalarWhereInput | MinistryMemberScalarWhereInput[]
  }

  export type MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MinistryScheduleCreateWithoutUserInput, MinistryScheduleUncheckedCreateWithoutUserInput> | MinistryScheduleCreateWithoutUserInput[] | MinistryScheduleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutUserInput | MinistryScheduleCreateOrConnectWithoutUserInput[]
    upsert?: MinistryScheduleUpsertWithWhereUniqueWithoutUserInput | MinistryScheduleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MinistryScheduleCreateManyUserInputEnvelope
    set?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    disconnect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    delete?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    update?: MinistryScheduleUpdateWithWhereUniqueWithoutUserInput | MinistryScheduleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MinistryScheduleUpdateManyWithWhereWithoutUserInput | MinistryScheduleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
  }

  export type MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MinistryNoticeCreateWithoutUserInput, MinistryNoticeUncheckedCreateWithoutUserInput> | MinistryNoticeCreateWithoutUserInput[] | MinistryNoticeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutUserInput | MinistryNoticeCreateOrConnectWithoutUserInput[]
    upsert?: MinistryNoticeUpsertWithWhereUniqueWithoutUserInput | MinistryNoticeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MinistryNoticeCreateManyUserInputEnvelope
    set?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    disconnect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    delete?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    update?: MinistryNoticeUpdateWithWhereUniqueWithoutUserInput | MinistryNoticeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MinistryNoticeUpdateManyWithWhereWithoutUserInput | MinistryNoticeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MinistryNoticeScalarWhereInput | MinistryNoticeScalarWhereInput[]
  }

  export type ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutAuthorInput, ChurchFeedUncheckedCreateWithoutAuthorInput> | ChurchFeedCreateWithoutAuthorInput[] | ChurchFeedUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutAuthorInput | ChurchFeedCreateOrConnectWithoutAuthorInput[]
    upsert?: ChurchFeedUpsertWithWhereUniqueWithoutAuthorInput | ChurchFeedUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ChurchFeedCreateManyAuthorInputEnvelope
    set?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    disconnect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    delete?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    update?: ChurchFeedUpdateWithWhereUniqueWithoutAuthorInput | ChurchFeedUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ChurchFeedUpdateManyWithWhereWithoutAuthorInput | ChurchFeedUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ChurchFeedScalarWhereInput | ChurchFeedScalarWhereInput[]
  }

  export type FeedLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedLikeCreateWithoutUserInput, FeedLikeUncheckedCreateWithoutUserInput> | FeedLikeCreateWithoutUserInput[] | FeedLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutUserInput | FeedLikeCreateOrConnectWithoutUserInput[]
    upsert?: FeedLikeUpsertWithWhereUniqueWithoutUserInput | FeedLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedLikeCreateManyUserInputEnvelope
    set?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    disconnect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    delete?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    update?: FeedLikeUpdateWithWhereUniqueWithoutUserInput | FeedLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedLikeUpdateManyWithWhereWithoutUserInput | FeedLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedLikeScalarWhereInput | FeedLikeScalarWhereInput[]
  }

  export type FeedCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedCommentCreateWithoutUserInput, FeedCommentUncheckedCreateWithoutUserInput> | FeedCommentCreateWithoutUserInput[] | FeedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutUserInput | FeedCommentCreateOrConnectWithoutUserInput[]
    upsert?: FeedCommentUpsertWithWhereUniqueWithoutUserInput | FeedCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedCommentCreateManyUserInputEnvelope
    set?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    disconnect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    delete?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    update?: FeedCommentUpdateWithWhereUniqueWithoutUserInput | FeedCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedCommentUpdateManyWithWhereWithoutUserInput | FeedCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedCommentScalarWhereInput | FeedCommentScalarWhereInput[]
  }

  export type MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<MinistryFileCreateWithoutUploadedByInput, MinistryFileUncheckedCreateWithoutUploadedByInput> | MinistryFileCreateWithoutUploadedByInput[] | MinistryFileUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutUploadedByInput | MinistryFileCreateOrConnectWithoutUploadedByInput[]
    upsert?: MinistryFileUpsertWithWhereUniqueWithoutUploadedByInput | MinistryFileUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: MinistryFileCreateManyUploadedByInputEnvelope
    set?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    disconnect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    delete?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    update?: MinistryFileUpdateWithWhereUniqueWithoutUploadedByInput | MinistryFileUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: MinistryFileUpdateManyWithWhereWithoutUploadedByInput | MinistryFileUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: MinistryFileScalarWhereInput | MinistryFileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAuthenticatorInput = {
    create?: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthenticatorInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutAuthenticatorNestedInput = {
    create?: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthenticatorInput
    upsert?: UserUpsertWithoutAuthenticatorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthenticatorInput, UserUpdateWithoutAuthenticatorInput>, UserUncheckedUpdateWithoutAuthenticatorInput>
  }

  export type ChurchMemberCreateNestedManyWithoutChurchInput = {
    create?: XOR<ChurchMemberCreateWithoutChurchInput, ChurchMemberUncheckedCreateWithoutChurchInput> | ChurchMemberCreateWithoutChurchInput[] | ChurchMemberUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutChurchInput | ChurchMemberCreateOrConnectWithoutChurchInput[]
    createMany?: ChurchMemberCreateManyChurchInputEnvelope
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
  }

  export type MinistryCreateNestedManyWithoutChurchInput = {
    create?: XOR<MinistryCreateWithoutChurchInput, MinistryUncheckedCreateWithoutChurchInput> | MinistryCreateWithoutChurchInput[] | MinistryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MinistryCreateOrConnectWithoutChurchInput | MinistryCreateOrConnectWithoutChurchInput[]
    createMany?: MinistryCreateManyChurchInputEnvelope
    connect?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
  }

  export type ChurchNoticeCreateNestedManyWithoutChurchInput = {
    create?: XOR<ChurchNoticeCreateWithoutChurchInput, ChurchNoticeUncheckedCreateWithoutChurchInput> | ChurchNoticeCreateWithoutChurchInput[] | ChurchNoticeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchNoticeCreateOrConnectWithoutChurchInput | ChurchNoticeCreateOrConnectWithoutChurchInput[]
    createMany?: ChurchNoticeCreateManyChurchInputEnvelope
    connect?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
  }

  export type ChurchFeedCreateNestedManyWithoutChurchInput = {
    create?: XOR<ChurchFeedCreateWithoutChurchInput, ChurchFeedUncheckedCreateWithoutChurchInput> | ChurchFeedCreateWithoutChurchInput[] | ChurchFeedUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutChurchInput | ChurchFeedCreateOrConnectWithoutChurchInput[]
    createMany?: ChurchFeedCreateManyChurchInputEnvelope
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
  }

  export type ChurchMemberUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<ChurchMemberCreateWithoutChurchInput, ChurchMemberUncheckedCreateWithoutChurchInput> | ChurchMemberCreateWithoutChurchInput[] | ChurchMemberUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutChurchInput | ChurchMemberCreateOrConnectWithoutChurchInput[]
    createMany?: ChurchMemberCreateManyChurchInputEnvelope
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
  }

  export type MinistryUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<MinistryCreateWithoutChurchInput, MinistryUncheckedCreateWithoutChurchInput> | MinistryCreateWithoutChurchInput[] | MinistryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MinistryCreateOrConnectWithoutChurchInput | MinistryCreateOrConnectWithoutChurchInput[]
    createMany?: MinistryCreateManyChurchInputEnvelope
    connect?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
  }

  export type ChurchNoticeUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<ChurchNoticeCreateWithoutChurchInput, ChurchNoticeUncheckedCreateWithoutChurchInput> | ChurchNoticeCreateWithoutChurchInput[] | ChurchNoticeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchNoticeCreateOrConnectWithoutChurchInput | ChurchNoticeCreateOrConnectWithoutChurchInput[]
    createMany?: ChurchNoticeCreateManyChurchInputEnvelope
    connect?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
  }

  export type ChurchFeedUncheckedCreateNestedManyWithoutChurchInput = {
    create?: XOR<ChurchFeedCreateWithoutChurchInput, ChurchFeedUncheckedCreateWithoutChurchInput> | ChurchFeedCreateWithoutChurchInput[] | ChurchFeedUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutChurchInput | ChurchFeedCreateOrConnectWithoutChurchInput[]
    createMany?: ChurchFeedCreateManyChurchInputEnvelope
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
  }

  export type ChurchMemberUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ChurchMemberCreateWithoutChurchInput, ChurchMemberUncheckedCreateWithoutChurchInput> | ChurchMemberCreateWithoutChurchInput[] | ChurchMemberUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutChurchInput | ChurchMemberCreateOrConnectWithoutChurchInput[]
    upsert?: ChurchMemberUpsertWithWhereUniqueWithoutChurchInput | ChurchMemberUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ChurchMemberCreateManyChurchInputEnvelope
    set?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    disconnect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    delete?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    update?: ChurchMemberUpdateWithWhereUniqueWithoutChurchInput | ChurchMemberUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ChurchMemberUpdateManyWithWhereWithoutChurchInput | ChurchMemberUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ChurchMemberScalarWhereInput | ChurchMemberScalarWhereInput[]
  }

  export type MinistryUpdateManyWithoutChurchNestedInput = {
    create?: XOR<MinistryCreateWithoutChurchInput, MinistryUncheckedCreateWithoutChurchInput> | MinistryCreateWithoutChurchInput[] | MinistryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MinistryCreateOrConnectWithoutChurchInput | MinistryCreateOrConnectWithoutChurchInput[]
    upsert?: MinistryUpsertWithWhereUniqueWithoutChurchInput | MinistryUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: MinistryCreateManyChurchInputEnvelope
    set?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    disconnect?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    delete?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    connect?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    update?: MinistryUpdateWithWhereUniqueWithoutChurchInput | MinistryUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: MinistryUpdateManyWithWhereWithoutChurchInput | MinistryUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: MinistryScalarWhereInput | MinistryScalarWhereInput[]
  }

  export type ChurchNoticeUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ChurchNoticeCreateWithoutChurchInput, ChurchNoticeUncheckedCreateWithoutChurchInput> | ChurchNoticeCreateWithoutChurchInput[] | ChurchNoticeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchNoticeCreateOrConnectWithoutChurchInput | ChurchNoticeCreateOrConnectWithoutChurchInput[]
    upsert?: ChurchNoticeUpsertWithWhereUniqueWithoutChurchInput | ChurchNoticeUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ChurchNoticeCreateManyChurchInputEnvelope
    set?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    disconnect?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    delete?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    connect?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    update?: ChurchNoticeUpdateWithWhereUniqueWithoutChurchInput | ChurchNoticeUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ChurchNoticeUpdateManyWithWhereWithoutChurchInput | ChurchNoticeUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ChurchNoticeScalarWhereInput | ChurchNoticeScalarWhereInput[]
  }

  export type ChurchFeedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutChurchInput, ChurchFeedUncheckedCreateWithoutChurchInput> | ChurchFeedCreateWithoutChurchInput[] | ChurchFeedUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutChurchInput | ChurchFeedCreateOrConnectWithoutChurchInput[]
    upsert?: ChurchFeedUpsertWithWhereUniqueWithoutChurchInput | ChurchFeedUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ChurchFeedCreateManyChurchInputEnvelope
    set?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    disconnect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    delete?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    update?: ChurchFeedUpdateWithWhereUniqueWithoutChurchInput | ChurchFeedUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ChurchFeedUpdateManyWithWhereWithoutChurchInput | ChurchFeedUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ChurchFeedScalarWhereInput | ChurchFeedScalarWhereInput[]
  }

  export type ChurchMemberUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ChurchMemberCreateWithoutChurchInput, ChurchMemberUncheckedCreateWithoutChurchInput> | ChurchMemberCreateWithoutChurchInput[] | ChurchMemberUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchMemberCreateOrConnectWithoutChurchInput | ChurchMemberCreateOrConnectWithoutChurchInput[]
    upsert?: ChurchMemberUpsertWithWhereUniqueWithoutChurchInput | ChurchMemberUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ChurchMemberCreateManyChurchInputEnvelope
    set?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    disconnect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    delete?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    connect?: ChurchMemberWhereUniqueInput | ChurchMemberWhereUniqueInput[]
    update?: ChurchMemberUpdateWithWhereUniqueWithoutChurchInput | ChurchMemberUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ChurchMemberUpdateManyWithWhereWithoutChurchInput | ChurchMemberUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ChurchMemberScalarWhereInput | ChurchMemberScalarWhereInput[]
  }

  export type MinistryUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<MinistryCreateWithoutChurchInput, MinistryUncheckedCreateWithoutChurchInput> | MinistryCreateWithoutChurchInput[] | MinistryUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: MinistryCreateOrConnectWithoutChurchInput | MinistryCreateOrConnectWithoutChurchInput[]
    upsert?: MinistryUpsertWithWhereUniqueWithoutChurchInput | MinistryUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: MinistryCreateManyChurchInputEnvelope
    set?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    disconnect?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    delete?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    connect?: MinistryWhereUniqueInput | MinistryWhereUniqueInput[]
    update?: MinistryUpdateWithWhereUniqueWithoutChurchInput | MinistryUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: MinistryUpdateManyWithWhereWithoutChurchInput | MinistryUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: MinistryScalarWhereInput | MinistryScalarWhereInput[]
  }

  export type ChurchNoticeUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ChurchNoticeCreateWithoutChurchInput, ChurchNoticeUncheckedCreateWithoutChurchInput> | ChurchNoticeCreateWithoutChurchInput[] | ChurchNoticeUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchNoticeCreateOrConnectWithoutChurchInput | ChurchNoticeCreateOrConnectWithoutChurchInput[]
    upsert?: ChurchNoticeUpsertWithWhereUniqueWithoutChurchInput | ChurchNoticeUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ChurchNoticeCreateManyChurchInputEnvelope
    set?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    disconnect?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    delete?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    connect?: ChurchNoticeWhereUniqueInput | ChurchNoticeWhereUniqueInput[]
    update?: ChurchNoticeUpdateWithWhereUniqueWithoutChurchInput | ChurchNoticeUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ChurchNoticeUpdateManyWithWhereWithoutChurchInput | ChurchNoticeUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ChurchNoticeScalarWhereInput | ChurchNoticeScalarWhereInput[]
  }

  export type ChurchFeedUncheckedUpdateManyWithoutChurchNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutChurchInput, ChurchFeedUncheckedCreateWithoutChurchInput> | ChurchFeedCreateWithoutChurchInput[] | ChurchFeedUncheckedCreateWithoutChurchInput[]
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutChurchInput | ChurchFeedCreateOrConnectWithoutChurchInput[]
    upsert?: ChurchFeedUpsertWithWhereUniqueWithoutChurchInput | ChurchFeedUpsertWithWhereUniqueWithoutChurchInput[]
    createMany?: ChurchFeedCreateManyChurchInputEnvelope
    set?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    disconnect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    delete?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    connect?: ChurchFeedWhereUniqueInput | ChurchFeedWhereUniqueInput[]
    update?: ChurchFeedUpdateWithWhereUniqueWithoutChurchInput | ChurchFeedUpdateWithWhereUniqueWithoutChurchInput[]
    updateMany?: ChurchFeedUpdateManyWithWhereWithoutChurchInput | ChurchFeedUpdateManyWithWhereWithoutChurchInput[]
    deleteMany?: ChurchFeedScalarWhereInput | ChurchFeedScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChurchesInput = {
    create?: XOR<UserCreateWithoutChurchesInput, UserUncheckedCreateWithoutChurchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchesInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchCreateNestedOneWithoutMembersInput = {
    create?: XOR<ChurchCreateWithoutMembersInput, ChurchUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMembersInput
    connect?: ChurchWhereUniqueInput
  }

  export type EnumChurchRoleFieldUpdateOperationsInput = {
    set?: $Enums.ChurchRole
  }

  export type UserUpdateOneRequiredWithoutChurchesNestedInput = {
    create?: XOR<UserCreateWithoutChurchesInput, UserUncheckedCreateWithoutChurchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChurchesInput
    upsert?: UserUpsertWithoutChurchesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChurchesInput, UserUpdateWithoutChurchesInput>, UserUncheckedUpdateWithoutChurchesInput>
  }

  export type ChurchUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ChurchCreateWithoutMembersInput, ChurchUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMembersInput
    upsert?: ChurchUpsertWithoutMembersInput
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutMembersInput, ChurchUpdateWithoutMembersInput>, ChurchUncheckedUpdateWithoutMembersInput>
  }

  export type ChurchCreateNestedOneWithoutMinistriesInput = {
    create?: XOR<ChurchCreateWithoutMinistriesInput, ChurchUncheckedCreateWithoutMinistriesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMinistriesInput
    connect?: ChurchWhereUniqueInput
  }

  export type MinistryMemberCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryMemberCreateWithoutMinistryInput, MinistryMemberUncheckedCreateWithoutMinistryInput> | MinistryMemberCreateWithoutMinistryInput[] | MinistryMemberUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutMinistryInput | MinistryMemberCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryMemberCreateManyMinistryInputEnvelope
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
  }

  export type MinistryNoticeCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryNoticeCreateWithoutMinistryInput, MinistryNoticeUncheckedCreateWithoutMinistryInput> | MinistryNoticeCreateWithoutMinistryInput[] | MinistryNoticeUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutMinistryInput | MinistryNoticeCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryNoticeCreateManyMinistryInputEnvelope
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
  }

  export type MinistryScheduleCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryScheduleCreateWithoutMinistryInput, MinistryScheduleUncheckedCreateWithoutMinistryInput> | MinistryScheduleCreateWithoutMinistryInput[] | MinistryScheduleUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutMinistryInput | MinistryScheduleCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryScheduleCreateManyMinistryInputEnvelope
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
  }

  export type MinistryAnnouncementCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryAnnouncementCreateWithoutMinistryInput, MinistryAnnouncementUncheckedCreateWithoutMinistryInput> | MinistryAnnouncementCreateWithoutMinistryInput[] | MinistryAnnouncementUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryAnnouncementCreateOrConnectWithoutMinistryInput | MinistryAnnouncementCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryAnnouncementCreateManyMinistryInputEnvelope
    connect?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
  }

  export type MinistryPositionCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryPositionCreateWithoutMinistryInput, MinistryPositionUncheckedCreateWithoutMinistryInput> | MinistryPositionCreateWithoutMinistryInput[] | MinistryPositionUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryPositionCreateOrConnectWithoutMinistryInput | MinistryPositionCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryPositionCreateManyMinistryInputEnvelope
    connect?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
  }

  export type MinistryFileCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryFileCreateWithoutMinistryInput, MinistryFileUncheckedCreateWithoutMinistryInput> | MinistryFileCreateWithoutMinistryInput[] | MinistryFileUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutMinistryInput | MinistryFileCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryFileCreateManyMinistryInputEnvelope
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
  }

  export type MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryMemberCreateWithoutMinistryInput, MinistryMemberUncheckedCreateWithoutMinistryInput> | MinistryMemberCreateWithoutMinistryInput[] | MinistryMemberUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutMinistryInput | MinistryMemberCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryMemberCreateManyMinistryInputEnvelope
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
  }

  export type MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryNoticeCreateWithoutMinistryInput, MinistryNoticeUncheckedCreateWithoutMinistryInput> | MinistryNoticeCreateWithoutMinistryInput[] | MinistryNoticeUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutMinistryInput | MinistryNoticeCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryNoticeCreateManyMinistryInputEnvelope
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
  }

  export type MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryScheduleCreateWithoutMinistryInput, MinistryScheduleUncheckedCreateWithoutMinistryInput> | MinistryScheduleCreateWithoutMinistryInput[] | MinistryScheduleUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutMinistryInput | MinistryScheduleCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryScheduleCreateManyMinistryInputEnvelope
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
  }

  export type MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryAnnouncementCreateWithoutMinistryInput, MinistryAnnouncementUncheckedCreateWithoutMinistryInput> | MinistryAnnouncementCreateWithoutMinistryInput[] | MinistryAnnouncementUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryAnnouncementCreateOrConnectWithoutMinistryInput | MinistryAnnouncementCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryAnnouncementCreateManyMinistryInputEnvelope
    connect?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
  }

  export type MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryPositionCreateWithoutMinistryInput, MinistryPositionUncheckedCreateWithoutMinistryInput> | MinistryPositionCreateWithoutMinistryInput[] | MinistryPositionUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryPositionCreateOrConnectWithoutMinistryInput | MinistryPositionCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryPositionCreateManyMinistryInputEnvelope
    connect?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
  }

  export type MinistryFileUncheckedCreateNestedManyWithoutMinistryInput = {
    create?: XOR<MinistryFileCreateWithoutMinistryInput, MinistryFileUncheckedCreateWithoutMinistryInput> | MinistryFileCreateWithoutMinistryInput[] | MinistryFileUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutMinistryInput | MinistryFileCreateOrConnectWithoutMinistryInput[]
    createMany?: MinistryFileCreateManyMinistryInputEnvelope
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
  }

  export type ChurchUpdateOneRequiredWithoutMinistriesNestedInput = {
    create?: XOR<ChurchCreateWithoutMinistriesInput, ChurchUncheckedCreateWithoutMinistriesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutMinistriesInput
    upsert?: ChurchUpsertWithoutMinistriesInput
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutMinistriesInput, ChurchUpdateWithoutMinistriesInput>, ChurchUncheckedUpdateWithoutMinistriesInput>
  }

  export type MinistryMemberUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryMemberCreateWithoutMinistryInput, MinistryMemberUncheckedCreateWithoutMinistryInput> | MinistryMemberCreateWithoutMinistryInput[] | MinistryMemberUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutMinistryInput | MinistryMemberCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryMemberUpsertWithWhereUniqueWithoutMinistryInput | MinistryMemberUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryMemberCreateManyMinistryInputEnvelope
    set?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    disconnect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    delete?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    update?: MinistryMemberUpdateWithWhereUniqueWithoutMinistryInput | MinistryMemberUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryMemberUpdateManyWithWhereWithoutMinistryInput | MinistryMemberUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryMemberScalarWhereInput | MinistryMemberScalarWhereInput[]
  }

  export type MinistryNoticeUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryNoticeCreateWithoutMinistryInput, MinistryNoticeUncheckedCreateWithoutMinistryInput> | MinistryNoticeCreateWithoutMinistryInput[] | MinistryNoticeUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutMinistryInput | MinistryNoticeCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryNoticeUpsertWithWhereUniqueWithoutMinistryInput | MinistryNoticeUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryNoticeCreateManyMinistryInputEnvelope
    set?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    disconnect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    delete?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    update?: MinistryNoticeUpdateWithWhereUniqueWithoutMinistryInput | MinistryNoticeUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryNoticeUpdateManyWithWhereWithoutMinistryInput | MinistryNoticeUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryNoticeScalarWhereInput | MinistryNoticeScalarWhereInput[]
  }

  export type MinistryScheduleUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryScheduleCreateWithoutMinistryInput, MinistryScheduleUncheckedCreateWithoutMinistryInput> | MinistryScheduleCreateWithoutMinistryInput[] | MinistryScheduleUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutMinistryInput | MinistryScheduleCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryScheduleUpsertWithWhereUniqueWithoutMinistryInput | MinistryScheduleUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryScheduleCreateManyMinistryInputEnvelope
    set?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    disconnect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    delete?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    update?: MinistryScheduleUpdateWithWhereUniqueWithoutMinistryInput | MinistryScheduleUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryScheduleUpdateManyWithWhereWithoutMinistryInput | MinistryScheduleUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
  }

  export type MinistryAnnouncementUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryAnnouncementCreateWithoutMinistryInput, MinistryAnnouncementUncheckedCreateWithoutMinistryInput> | MinistryAnnouncementCreateWithoutMinistryInput[] | MinistryAnnouncementUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryAnnouncementCreateOrConnectWithoutMinistryInput | MinistryAnnouncementCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryAnnouncementUpsertWithWhereUniqueWithoutMinistryInput | MinistryAnnouncementUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryAnnouncementCreateManyMinistryInputEnvelope
    set?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    disconnect?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    delete?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    connect?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    update?: MinistryAnnouncementUpdateWithWhereUniqueWithoutMinistryInput | MinistryAnnouncementUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryAnnouncementUpdateManyWithWhereWithoutMinistryInput | MinistryAnnouncementUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryAnnouncementScalarWhereInput | MinistryAnnouncementScalarWhereInput[]
  }

  export type MinistryPositionUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryPositionCreateWithoutMinistryInput, MinistryPositionUncheckedCreateWithoutMinistryInput> | MinistryPositionCreateWithoutMinistryInput[] | MinistryPositionUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryPositionCreateOrConnectWithoutMinistryInput | MinistryPositionCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryPositionUpsertWithWhereUniqueWithoutMinistryInput | MinistryPositionUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryPositionCreateManyMinistryInputEnvelope
    set?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    disconnect?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    delete?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    connect?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    update?: MinistryPositionUpdateWithWhereUniqueWithoutMinistryInput | MinistryPositionUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryPositionUpdateManyWithWhereWithoutMinistryInput | MinistryPositionUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryPositionScalarWhereInput | MinistryPositionScalarWhereInput[]
  }

  export type MinistryFileUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryFileCreateWithoutMinistryInput, MinistryFileUncheckedCreateWithoutMinistryInput> | MinistryFileCreateWithoutMinistryInput[] | MinistryFileUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutMinistryInput | MinistryFileCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryFileUpsertWithWhereUniqueWithoutMinistryInput | MinistryFileUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryFileCreateManyMinistryInputEnvelope
    set?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    disconnect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    delete?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    update?: MinistryFileUpdateWithWhereUniqueWithoutMinistryInput | MinistryFileUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryFileUpdateManyWithWhereWithoutMinistryInput | MinistryFileUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryFileScalarWhereInput | MinistryFileScalarWhereInput[]
  }

  export type MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryMemberCreateWithoutMinistryInput, MinistryMemberUncheckedCreateWithoutMinistryInput> | MinistryMemberCreateWithoutMinistryInput[] | MinistryMemberUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryMemberCreateOrConnectWithoutMinistryInput | MinistryMemberCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryMemberUpsertWithWhereUniqueWithoutMinistryInput | MinistryMemberUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryMemberCreateManyMinistryInputEnvelope
    set?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    disconnect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    delete?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    connect?: MinistryMemberWhereUniqueInput | MinistryMemberWhereUniqueInput[]
    update?: MinistryMemberUpdateWithWhereUniqueWithoutMinistryInput | MinistryMemberUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryMemberUpdateManyWithWhereWithoutMinistryInput | MinistryMemberUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryMemberScalarWhereInput | MinistryMemberScalarWhereInput[]
  }

  export type MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryNoticeCreateWithoutMinistryInput, MinistryNoticeUncheckedCreateWithoutMinistryInput> | MinistryNoticeCreateWithoutMinistryInput[] | MinistryNoticeUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutMinistryInput | MinistryNoticeCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryNoticeUpsertWithWhereUniqueWithoutMinistryInput | MinistryNoticeUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryNoticeCreateManyMinistryInputEnvelope
    set?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    disconnect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    delete?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    connect?: MinistryNoticeWhereUniqueInput | MinistryNoticeWhereUniqueInput[]
    update?: MinistryNoticeUpdateWithWhereUniqueWithoutMinistryInput | MinistryNoticeUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryNoticeUpdateManyWithWhereWithoutMinistryInput | MinistryNoticeUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryNoticeScalarWhereInput | MinistryNoticeScalarWhereInput[]
  }

  export type MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryScheduleCreateWithoutMinistryInput, MinistryScheduleUncheckedCreateWithoutMinistryInput> | MinistryScheduleCreateWithoutMinistryInput[] | MinistryScheduleUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutMinistryInput | MinistryScheduleCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryScheduleUpsertWithWhereUniqueWithoutMinistryInput | MinistryScheduleUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryScheduleCreateManyMinistryInputEnvelope
    set?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    disconnect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    delete?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    update?: MinistryScheduleUpdateWithWhereUniqueWithoutMinistryInput | MinistryScheduleUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryScheduleUpdateManyWithWhereWithoutMinistryInput | MinistryScheduleUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
  }

  export type MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryAnnouncementCreateWithoutMinistryInput, MinistryAnnouncementUncheckedCreateWithoutMinistryInput> | MinistryAnnouncementCreateWithoutMinistryInput[] | MinistryAnnouncementUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryAnnouncementCreateOrConnectWithoutMinistryInput | MinistryAnnouncementCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryAnnouncementUpsertWithWhereUniqueWithoutMinistryInput | MinistryAnnouncementUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryAnnouncementCreateManyMinistryInputEnvelope
    set?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    disconnect?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    delete?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    connect?: MinistryAnnouncementWhereUniqueInput | MinistryAnnouncementWhereUniqueInput[]
    update?: MinistryAnnouncementUpdateWithWhereUniqueWithoutMinistryInput | MinistryAnnouncementUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryAnnouncementUpdateManyWithWhereWithoutMinistryInput | MinistryAnnouncementUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryAnnouncementScalarWhereInput | MinistryAnnouncementScalarWhereInput[]
  }

  export type MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryPositionCreateWithoutMinistryInput, MinistryPositionUncheckedCreateWithoutMinistryInput> | MinistryPositionCreateWithoutMinistryInput[] | MinistryPositionUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryPositionCreateOrConnectWithoutMinistryInput | MinistryPositionCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryPositionUpsertWithWhereUniqueWithoutMinistryInput | MinistryPositionUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryPositionCreateManyMinistryInputEnvelope
    set?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    disconnect?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    delete?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    connect?: MinistryPositionWhereUniqueInput | MinistryPositionWhereUniqueInput[]
    update?: MinistryPositionUpdateWithWhereUniqueWithoutMinistryInput | MinistryPositionUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryPositionUpdateManyWithWhereWithoutMinistryInput | MinistryPositionUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryPositionScalarWhereInput | MinistryPositionScalarWhereInput[]
  }

  export type MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput = {
    create?: XOR<MinistryFileCreateWithoutMinistryInput, MinistryFileUncheckedCreateWithoutMinistryInput> | MinistryFileCreateWithoutMinistryInput[] | MinistryFileUncheckedCreateWithoutMinistryInput[]
    connectOrCreate?: MinistryFileCreateOrConnectWithoutMinistryInput | MinistryFileCreateOrConnectWithoutMinistryInput[]
    upsert?: MinistryFileUpsertWithWhereUniqueWithoutMinistryInput | MinistryFileUpsertWithWhereUniqueWithoutMinistryInput[]
    createMany?: MinistryFileCreateManyMinistryInputEnvelope
    set?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    disconnect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    delete?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    connect?: MinistryFileWhereUniqueInput | MinistryFileWhereUniqueInput[]
    update?: MinistryFileUpdateWithWhereUniqueWithoutMinistryInput | MinistryFileUpdateWithWhereUniqueWithoutMinistryInput[]
    updateMany?: MinistryFileUpdateManyWithWhereWithoutMinistryInput | MinistryFileUpdateManyWithWhereWithoutMinistryInput[]
    deleteMany?: MinistryFileScalarWhereInput | MinistryFileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMinistriesInput = {
    create?: XOR<UserCreateWithoutMinistriesInput, UserUncheckedCreateWithoutMinistriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMinistriesInput
    connect?: UserWhereUniqueInput
  }

  export type MinistryCreateNestedOneWithoutMembersInput = {
    create?: XOR<MinistryCreateWithoutMembersInput, MinistryUncheckedCreateWithoutMembersInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutMembersInput
    connect?: MinistryWhereUniqueInput
  }

  export type EnumMinistryRoleFieldUpdateOperationsInput = {
    set?: $Enums.MinistryRole
  }

  export type UserUpdateOneRequiredWithoutMinistriesNestedInput = {
    create?: XOR<UserCreateWithoutMinistriesInput, UserUncheckedCreateWithoutMinistriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMinistriesInput
    upsert?: UserUpsertWithoutMinistriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMinistriesInput, UserUpdateWithoutMinistriesInput>, UserUncheckedUpdateWithoutMinistriesInput>
  }

  export type MinistryUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<MinistryCreateWithoutMembersInput, MinistryUncheckedCreateWithoutMembersInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutMembersInput
    upsert?: MinistryUpsertWithoutMembersInput
    connect?: MinistryWhereUniqueInput
    update?: XOR<XOR<MinistryUpdateToOneWithWhereWithoutMembersInput, MinistryUpdateWithoutMembersInput>, MinistryUncheckedUpdateWithoutMembersInput>
  }

  export type ChurchCreateNestedOneWithoutNoticesInput = {
    create?: XOR<ChurchCreateWithoutNoticesInput, ChurchUncheckedCreateWithoutNoticesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutNoticesInput
    connect?: ChurchWhereUniqueInput
  }

  export type ChurchUpdateOneRequiredWithoutNoticesNestedInput = {
    create?: XOR<ChurchCreateWithoutNoticesInput, ChurchUncheckedCreateWithoutNoticesInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutNoticesInput
    upsert?: ChurchUpsertWithoutNoticesInput
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutNoticesInput, ChurchUpdateWithoutNoticesInput>, ChurchUncheckedUpdateWithoutNoticesInput>
  }

  export type MinistryCreateNestedOneWithoutNoticesInput = {
    create?: XOR<MinistryCreateWithoutNoticesInput, MinistryUncheckedCreateWithoutNoticesInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutNoticesInput
    connect?: MinistryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMinistryNoticesInput = {
    create?: XOR<UserCreateWithoutMinistryNoticesInput, UserUncheckedCreateWithoutMinistryNoticesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMinistryNoticesInput
    connect?: UserWhereUniqueInput
  }

  export type MinistryEventCreateNestedManyWithoutNoticeInput = {
    create?: XOR<MinistryEventCreateWithoutNoticeInput, MinistryEventUncheckedCreateWithoutNoticeInput> | MinistryEventCreateWithoutNoticeInput[] | MinistryEventUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: MinistryEventCreateOrConnectWithoutNoticeInput | MinistryEventCreateOrConnectWithoutNoticeInput[]
    createMany?: MinistryEventCreateManyNoticeInputEnvelope
    connect?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
  }

  export type MinistryEventUncheckedCreateNestedManyWithoutNoticeInput = {
    create?: XOR<MinistryEventCreateWithoutNoticeInput, MinistryEventUncheckedCreateWithoutNoticeInput> | MinistryEventCreateWithoutNoticeInput[] | MinistryEventUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: MinistryEventCreateOrConnectWithoutNoticeInput | MinistryEventCreateOrConnectWithoutNoticeInput[]
    createMany?: MinistryEventCreateManyNoticeInputEnvelope
    connect?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
  }

  export type MinistryUpdateOneRequiredWithoutNoticesNestedInput = {
    create?: XOR<MinistryCreateWithoutNoticesInput, MinistryUncheckedCreateWithoutNoticesInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutNoticesInput
    upsert?: MinistryUpsertWithoutNoticesInput
    connect?: MinistryWhereUniqueInput
    update?: XOR<XOR<MinistryUpdateToOneWithWhereWithoutNoticesInput, MinistryUpdateWithoutNoticesInput>, MinistryUncheckedUpdateWithoutNoticesInput>
  }

  export type UserUpdateOneRequiredWithoutMinistryNoticesNestedInput = {
    create?: XOR<UserCreateWithoutMinistryNoticesInput, UserUncheckedCreateWithoutMinistryNoticesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMinistryNoticesInput
    upsert?: UserUpsertWithoutMinistryNoticesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMinistryNoticesInput, UserUpdateWithoutMinistryNoticesInput>, UserUncheckedUpdateWithoutMinistryNoticesInput>
  }

  export type MinistryEventUpdateManyWithoutNoticeNestedInput = {
    create?: XOR<MinistryEventCreateWithoutNoticeInput, MinistryEventUncheckedCreateWithoutNoticeInput> | MinistryEventCreateWithoutNoticeInput[] | MinistryEventUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: MinistryEventCreateOrConnectWithoutNoticeInput | MinistryEventCreateOrConnectWithoutNoticeInput[]
    upsert?: MinistryEventUpsertWithWhereUniqueWithoutNoticeInput | MinistryEventUpsertWithWhereUniqueWithoutNoticeInput[]
    createMany?: MinistryEventCreateManyNoticeInputEnvelope
    set?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    disconnect?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    delete?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    connect?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    update?: MinistryEventUpdateWithWhereUniqueWithoutNoticeInput | MinistryEventUpdateWithWhereUniqueWithoutNoticeInput[]
    updateMany?: MinistryEventUpdateManyWithWhereWithoutNoticeInput | MinistryEventUpdateManyWithWhereWithoutNoticeInput[]
    deleteMany?: MinistryEventScalarWhereInput | MinistryEventScalarWhereInput[]
  }

  export type MinistryEventUncheckedUpdateManyWithoutNoticeNestedInput = {
    create?: XOR<MinistryEventCreateWithoutNoticeInput, MinistryEventUncheckedCreateWithoutNoticeInput> | MinistryEventCreateWithoutNoticeInput[] | MinistryEventUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: MinistryEventCreateOrConnectWithoutNoticeInput | MinistryEventCreateOrConnectWithoutNoticeInput[]
    upsert?: MinistryEventUpsertWithWhereUniqueWithoutNoticeInput | MinistryEventUpsertWithWhereUniqueWithoutNoticeInput[]
    createMany?: MinistryEventCreateManyNoticeInputEnvelope
    set?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    disconnect?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    delete?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    connect?: MinistryEventWhereUniqueInput | MinistryEventWhereUniqueInput[]
    update?: MinistryEventUpdateWithWhereUniqueWithoutNoticeInput | MinistryEventUpdateWithWhereUniqueWithoutNoticeInput[]
    updateMany?: MinistryEventUpdateManyWithWhereWithoutNoticeInput | MinistryEventUpdateManyWithWhereWithoutNoticeInput[]
    deleteMany?: MinistryEventScalarWhereInput | MinistryEventScalarWhereInput[]
  }

  export type MinistryNoticeCreateNestedOneWithoutEventsInput = {
    create?: XOR<MinistryNoticeCreateWithoutEventsInput, MinistryNoticeUncheckedCreateWithoutEventsInput>
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutEventsInput
    connect?: MinistryNoticeWhereUniqueInput
  }

  export type MinistryNoticeUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<MinistryNoticeCreateWithoutEventsInput, MinistryNoticeUncheckedCreateWithoutEventsInput>
    connectOrCreate?: MinistryNoticeCreateOrConnectWithoutEventsInput
    upsert?: MinistryNoticeUpsertWithoutEventsInput
    connect?: MinistryNoticeWhereUniqueInput
    update?: XOR<XOR<MinistryNoticeUpdateToOneWithWhereWithoutEventsInput, MinistryNoticeUpdateWithoutEventsInput>, MinistryNoticeUncheckedUpdateWithoutEventsInput>
  }

  export type MinistryCreateNestedOneWithoutAnnouncementsInput = {
    create?: XOR<MinistryCreateWithoutAnnouncementsInput, MinistryUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutAnnouncementsInput
    connect?: MinistryWhereUniqueInput
  }

  export type MinistryUpdateOneRequiredWithoutAnnouncementsNestedInput = {
    create?: XOR<MinistryCreateWithoutAnnouncementsInput, MinistryUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutAnnouncementsInput
    upsert?: MinistryUpsertWithoutAnnouncementsInput
    connect?: MinistryWhereUniqueInput
    update?: XOR<XOR<MinistryUpdateToOneWithWhereWithoutAnnouncementsInput, MinistryUpdateWithoutAnnouncementsInput>, MinistryUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type MinistryCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<MinistryCreateWithoutSchedulesInput, MinistryUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutSchedulesInput
    connect?: MinistryWhereUniqueInput
  }

  export type MinistryPositionCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<MinistryPositionCreateWithoutSchedulesInput, MinistryPositionUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MinistryPositionCreateOrConnectWithoutSchedulesInput
    connect?: MinistryPositionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type MinistryUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<MinistryCreateWithoutSchedulesInput, MinistryUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutSchedulesInput
    upsert?: MinistryUpsertWithoutSchedulesInput
    connect?: MinistryWhereUniqueInput
    update?: XOR<XOR<MinistryUpdateToOneWithWhereWithoutSchedulesInput, MinistryUpdateWithoutSchedulesInput>, MinistryUncheckedUpdateWithoutSchedulesInput>
  }

  export type MinistryPositionUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<MinistryPositionCreateWithoutSchedulesInput, MinistryPositionUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MinistryPositionCreateOrConnectWithoutSchedulesInput
    upsert?: MinistryPositionUpsertWithoutSchedulesInput
    connect?: MinistryPositionWhereUniqueInput
    update?: XOR<XOR<MinistryPositionUpdateToOneWithWhereWithoutSchedulesInput, MinistryPositionUpdateWithoutSchedulesInput>, MinistryPositionUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchedulesInput
    upsert?: UserUpsertWithoutSchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSchedulesInput, UserUpdateWithoutSchedulesInput>, UserUncheckedUpdateWithoutSchedulesInput>
  }

  export type ChurchCreateNestedOneWithoutFeedsInput = {
    create?: XOR<ChurchCreateWithoutFeedsInput, ChurchUncheckedCreateWithoutFeedsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFeedsInput
    connect?: ChurchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedsInput = {
    create?: XOR<UserCreateWithoutFeedsInput, UserUncheckedCreateWithoutFeedsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedsInput
    connect?: UserWhereUniqueInput
  }

  export type FeedImageCreateNestedManyWithoutFeedInput = {
    create?: XOR<FeedImageCreateWithoutFeedInput, FeedImageUncheckedCreateWithoutFeedInput> | FeedImageCreateWithoutFeedInput[] | FeedImageUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedImageCreateOrConnectWithoutFeedInput | FeedImageCreateOrConnectWithoutFeedInput[]
    createMany?: FeedImageCreateManyFeedInputEnvelope
    connect?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
  }

  export type FeedLikeCreateNestedManyWithoutFeedInput = {
    create?: XOR<FeedLikeCreateWithoutFeedInput, FeedLikeUncheckedCreateWithoutFeedInput> | FeedLikeCreateWithoutFeedInput[] | FeedLikeUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutFeedInput | FeedLikeCreateOrConnectWithoutFeedInput[]
    createMany?: FeedLikeCreateManyFeedInputEnvelope
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
  }

  export type FeedCommentCreateNestedManyWithoutFeedInput = {
    create?: XOR<FeedCommentCreateWithoutFeedInput, FeedCommentUncheckedCreateWithoutFeedInput> | FeedCommentCreateWithoutFeedInput[] | FeedCommentUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutFeedInput | FeedCommentCreateOrConnectWithoutFeedInput[]
    createMany?: FeedCommentCreateManyFeedInputEnvelope
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
  }

  export type FeedImageUncheckedCreateNestedManyWithoutFeedInput = {
    create?: XOR<FeedImageCreateWithoutFeedInput, FeedImageUncheckedCreateWithoutFeedInput> | FeedImageCreateWithoutFeedInput[] | FeedImageUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedImageCreateOrConnectWithoutFeedInput | FeedImageCreateOrConnectWithoutFeedInput[]
    createMany?: FeedImageCreateManyFeedInputEnvelope
    connect?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
  }

  export type FeedLikeUncheckedCreateNestedManyWithoutFeedInput = {
    create?: XOR<FeedLikeCreateWithoutFeedInput, FeedLikeUncheckedCreateWithoutFeedInput> | FeedLikeCreateWithoutFeedInput[] | FeedLikeUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutFeedInput | FeedLikeCreateOrConnectWithoutFeedInput[]
    createMany?: FeedLikeCreateManyFeedInputEnvelope
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
  }

  export type FeedCommentUncheckedCreateNestedManyWithoutFeedInput = {
    create?: XOR<FeedCommentCreateWithoutFeedInput, FeedCommentUncheckedCreateWithoutFeedInput> | FeedCommentCreateWithoutFeedInput[] | FeedCommentUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutFeedInput | FeedCommentCreateOrConnectWithoutFeedInput[]
    createMany?: FeedCommentCreateManyFeedInputEnvelope
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
  }

  export type ChurchUpdateOneRequiredWithoutFeedsNestedInput = {
    create?: XOR<ChurchCreateWithoutFeedsInput, ChurchUncheckedCreateWithoutFeedsInput>
    connectOrCreate?: ChurchCreateOrConnectWithoutFeedsInput
    upsert?: ChurchUpsertWithoutFeedsInput
    connect?: ChurchWhereUniqueInput
    update?: XOR<XOR<ChurchUpdateToOneWithWhereWithoutFeedsInput, ChurchUpdateWithoutFeedsInput>, ChurchUncheckedUpdateWithoutFeedsInput>
  }

  export type UserUpdateOneRequiredWithoutFeedsNestedInput = {
    create?: XOR<UserCreateWithoutFeedsInput, UserUncheckedCreateWithoutFeedsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedsInput
    upsert?: UserUpsertWithoutFeedsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedsInput, UserUpdateWithoutFeedsInput>, UserUncheckedUpdateWithoutFeedsInput>
  }

  export type FeedImageUpdateManyWithoutFeedNestedInput = {
    create?: XOR<FeedImageCreateWithoutFeedInput, FeedImageUncheckedCreateWithoutFeedInput> | FeedImageCreateWithoutFeedInput[] | FeedImageUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedImageCreateOrConnectWithoutFeedInput | FeedImageCreateOrConnectWithoutFeedInput[]
    upsert?: FeedImageUpsertWithWhereUniqueWithoutFeedInput | FeedImageUpsertWithWhereUniqueWithoutFeedInput[]
    createMany?: FeedImageCreateManyFeedInputEnvelope
    set?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    disconnect?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    delete?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    connect?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    update?: FeedImageUpdateWithWhereUniqueWithoutFeedInput | FeedImageUpdateWithWhereUniqueWithoutFeedInput[]
    updateMany?: FeedImageUpdateManyWithWhereWithoutFeedInput | FeedImageUpdateManyWithWhereWithoutFeedInput[]
    deleteMany?: FeedImageScalarWhereInput | FeedImageScalarWhereInput[]
  }

  export type FeedLikeUpdateManyWithoutFeedNestedInput = {
    create?: XOR<FeedLikeCreateWithoutFeedInput, FeedLikeUncheckedCreateWithoutFeedInput> | FeedLikeCreateWithoutFeedInput[] | FeedLikeUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutFeedInput | FeedLikeCreateOrConnectWithoutFeedInput[]
    upsert?: FeedLikeUpsertWithWhereUniqueWithoutFeedInput | FeedLikeUpsertWithWhereUniqueWithoutFeedInput[]
    createMany?: FeedLikeCreateManyFeedInputEnvelope
    set?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    disconnect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    delete?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    update?: FeedLikeUpdateWithWhereUniqueWithoutFeedInput | FeedLikeUpdateWithWhereUniqueWithoutFeedInput[]
    updateMany?: FeedLikeUpdateManyWithWhereWithoutFeedInput | FeedLikeUpdateManyWithWhereWithoutFeedInput[]
    deleteMany?: FeedLikeScalarWhereInput | FeedLikeScalarWhereInput[]
  }

  export type FeedCommentUpdateManyWithoutFeedNestedInput = {
    create?: XOR<FeedCommentCreateWithoutFeedInput, FeedCommentUncheckedCreateWithoutFeedInput> | FeedCommentCreateWithoutFeedInput[] | FeedCommentUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutFeedInput | FeedCommentCreateOrConnectWithoutFeedInput[]
    upsert?: FeedCommentUpsertWithWhereUniqueWithoutFeedInput | FeedCommentUpsertWithWhereUniqueWithoutFeedInput[]
    createMany?: FeedCommentCreateManyFeedInputEnvelope
    set?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    disconnect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    delete?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    update?: FeedCommentUpdateWithWhereUniqueWithoutFeedInput | FeedCommentUpdateWithWhereUniqueWithoutFeedInput[]
    updateMany?: FeedCommentUpdateManyWithWhereWithoutFeedInput | FeedCommentUpdateManyWithWhereWithoutFeedInput[]
    deleteMany?: FeedCommentScalarWhereInput | FeedCommentScalarWhereInput[]
  }

  export type FeedImageUncheckedUpdateManyWithoutFeedNestedInput = {
    create?: XOR<FeedImageCreateWithoutFeedInput, FeedImageUncheckedCreateWithoutFeedInput> | FeedImageCreateWithoutFeedInput[] | FeedImageUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedImageCreateOrConnectWithoutFeedInput | FeedImageCreateOrConnectWithoutFeedInput[]
    upsert?: FeedImageUpsertWithWhereUniqueWithoutFeedInput | FeedImageUpsertWithWhereUniqueWithoutFeedInput[]
    createMany?: FeedImageCreateManyFeedInputEnvelope
    set?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    disconnect?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    delete?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    connect?: FeedImageWhereUniqueInput | FeedImageWhereUniqueInput[]
    update?: FeedImageUpdateWithWhereUniqueWithoutFeedInput | FeedImageUpdateWithWhereUniqueWithoutFeedInput[]
    updateMany?: FeedImageUpdateManyWithWhereWithoutFeedInput | FeedImageUpdateManyWithWhereWithoutFeedInput[]
    deleteMany?: FeedImageScalarWhereInput | FeedImageScalarWhereInput[]
  }

  export type FeedLikeUncheckedUpdateManyWithoutFeedNestedInput = {
    create?: XOR<FeedLikeCreateWithoutFeedInput, FeedLikeUncheckedCreateWithoutFeedInput> | FeedLikeCreateWithoutFeedInput[] | FeedLikeUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedLikeCreateOrConnectWithoutFeedInput | FeedLikeCreateOrConnectWithoutFeedInput[]
    upsert?: FeedLikeUpsertWithWhereUniqueWithoutFeedInput | FeedLikeUpsertWithWhereUniqueWithoutFeedInput[]
    createMany?: FeedLikeCreateManyFeedInputEnvelope
    set?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    disconnect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    delete?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    connect?: FeedLikeWhereUniqueInput | FeedLikeWhereUniqueInput[]
    update?: FeedLikeUpdateWithWhereUniqueWithoutFeedInput | FeedLikeUpdateWithWhereUniqueWithoutFeedInput[]
    updateMany?: FeedLikeUpdateManyWithWhereWithoutFeedInput | FeedLikeUpdateManyWithWhereWithoutFeedInput[]
    deleteMany?: FeedLikeScalarWhereInput | FeedLikeScalarWhereInput[]
  }

  export type FeedCommentUncheckedUpdateManyWithoutFeedNestedInput = {
    create?: XOR<FeedCommentCreateWithoutFeedInput, FeedCommentUncheckedCreateWithoutFeedInput> | FeedCommentCreateWithoutFeedInput[] | FeedCommentUncheckedCreateWithoutFeedInput[]
    connectOrCreate?: FeedCommentCreateOrConnectWithoutFeedInput | FeedCommentCreateOrConnectWithoutFeedInput[]
    upsert?: FeedCommentUpsertWithWhereUniqueWithoutFeedInput | FeedCommentUpsertWithWhereUniqueWithoutFeedInput[]
    createMany?: FeedCommentCreateManyFeedInputEnvelope
    set?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    disconnect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    delete?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    connect?: FeedCommentWhereUniqueInput | FeedCommentWhereUniqueInput[]
    update?: FeedCommentUpdateWithWhereUniqueWithoutFeedInput | FeedCommentUpdateWithWhereUniqueWithoutFeedInput[]
    updateMany?: FeedCommentUpdateManyWithWhereWithoutFeedInput | FeedCommentUpdateManyWithWhereWithoutFeedInput[]
    deleteMany?: FeedCommentScalarWhereInput | FeedCommentScalarWhereInput[]
  }

  export type ChurchFeedCreateNestedOneWithoutImagesInput = {
    create?: XOR<ChurchFeedCreateWithoutImagesInput, ChurchFeedUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutImagesInput
    connect?: ChurchFeedWhereUniqueInput
  }

  export type ChurchFeedUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutImagesInput, ChurchFeedUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutImagesInput
    upsert?: ChurchFeedUpsertWithoutImagesInput
    connect?: ChurchFeedWhereUniqueInput
    update?: XOR<XOR<ChurchFeedUpdateToOneWithWhereWithoutImagesInput, ChurchFeedUpdateWithoutImagesInput>, ChurchFeedUncheckedUpdateWithoutImagesInput>
  }

  export type ChurchFeedCreateNestedOneWithoutLikesInput = {
    create?: XOR<ChurchFeedCreateWithoutLikesInput, ChurchFeedUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutLikesInput
    connect?: ChurchFeedWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLikesInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchFeedUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutLikesInput, ChurchFeedUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutLikesInput
    upsert?: ChurchFeedUpsertWithoutLikesInput
    connect?: ChurchFeedWhereUniqueInput
    update?: XOR<XOR<ChurchFeedUpdateToOneWithWhereWithoutLikesInput, ChurchFeedUpdateWithoutLikesInput>, ChurchFeedUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikesInput, UserUpdateWithoutLikesInput>, UserUncheckedUpdateWithoutLikesInput>
  }

  export type ChurchFeedCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ChurchFeedCreateWithoutCommentsInput, ChurchFeedUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutCommentsInput
    connect?: ChurchFeedWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ChurchFeedUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ChurchFeedCreateWithoutCommentsInput, ChurchFeedUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ChurchFeedCreateOrConnectWithoutCommentsInput
    upsert?: ChurchFeedUpsertWithoutCommentsInput
    connect?: ChurchFeedWhereUniqueInput
    update?: XOR<XOR<ChurchFeedUpdateToOneWithWhereWithoutCommentsInput, ChurchFeedUpdateWithoutCommentsInput>, ChurchFeedUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type MinistryCreateNestedOneWithoutPositionsInput = {
    create?: XOR<MinistryCreateWithoutPositionsInput, MinistryUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutPositionsInput
    connect?: MinistryWhereUniqueInput
  }

  export type MinistryScheduleCreateNestedManyWithoutPositionInput = {
    create?: XOR<MinistryScheduleCreateWithoutPositionInput, MinistryScheduleUncheckedCreateWithoutPositionInput> | MinistryScheduleCreateWithoutPositionInput[] | MinistryScheduleUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutPositionInput | MinistryScheduleCreateOrConnectWithoutPositionInput[]
    createMany?: MinistryScheduleCreateManyPositionInputEnvelope
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
  }

  export type MinistryScheduleUncheckedCreateNestedManyWithoutPositionInput = {
    create?: XOR<MinistryScheduleCreateWithoutPositionInput, MinistryScheduleUncheckedCreateWithoutPositionInput> | MinistryScheduleCreateWithoutPositionInput[] | MinistryScheduleUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutPositionInput | MinistryScheduleCreateOrConnectWithoutPositionInput[]
    createMany?: MinistryScheduleCreateManyPositionInputEnvelope
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
  }

  export type MinistryUpdateOneRequiredWithoutPositionsNestedInput = {
    create?: XOR<MinistryCreateWithoutPositionsInput, MinistryUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutPositionsInput
    upsert?: MinistryUpsertWithoutPositionsInput
    connect?: MinistryWhereUniqueInput
    update?: XOR<XOR<MinistryUpdateToOneWithWhereWithoutPositionsInput, MinistryUpdateWithoutPositionsInput>, MinistryUncheckedUpdateWithoutPositionsInput>
  }

  export type MinistryScheduleUpdateManyWithoutPositionNestedInput = {
    create?: XOR<MinistryScheduleCreateWithoutPositionInput, MinistryScheduleUncheckedCreateWithoutPositionInput> | MinistryScheduleCreateWithoutPositionInput[] | MinistryScheduleUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutPositionInput | MinistryScheduleCreateOrConnectWithoutPositionInput[]
    upsert?: MinistryScheduleUpsertWithWhereUniqueWithoutPositionInput | MinistryScheduleUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: MinistryScheduleCreateManyPositionInputEnvelope
    set?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    disconnect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    delete?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    update?: MinistryScheduleUpdateWithWhereUniqueWithoutPositionInput | MinistryScheduleUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: MinistryScheduleUpdateManyWithWhereWithoutPositionInput | MinistryScheduleUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
  }

  export type MinistryScheduleUncheckedUpdateManyWithoutPositionNestedInput = {
    create?: XOR<MinistryScheduleCreateWithoutPositionInput, MinistryScheduleUncheckedCreateWithoutPositionInput> | MinistryScheduleCreateWithoutPositionInput[] | MinistryScheduleUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: MinistryScheduleCreateOrConnectWithoutPositionInput | MinistryScheduleCreateOrConnectWithoutPositionInput[]
    upsert?: MinistryScheduleUpsertWithWhereUniqueWithoutPositionInput | MinistryScheduleUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: MinistryScheduleCreateManyPositionInputEnvelope
    set?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    disconnect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    delete?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    connect?: MinistryScheduleWhereUniqueInput | MinistryScheduleWhereUniqueInput[]
    update?: MinistryScheduleUpdateWithWhereUniqueWithoutPositionInput | MinistryScheduleUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: MinistryScheduleUpdateManyWithWhereWithoutPositionInput | MinistryScheduleUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
  }

  export type MinistryCreateNestedOneWithoutFilesInput = {
    create?: XOR<MinistryCreateWithoutFilesInput, MinistryUncheckedCreateWithoutFilesInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutFilesInput
    connect?: MinistryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedFilesInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
  }

  export type MinistryUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<MinistryCreateWithoutFilesInput, MinistryUncheckedCreateWithoutFilesInput>
    connectOrCreate?: MinistryCreateOrConnectWithoutFilesInput
    upsert?: MinistryUpsertWithoutFilesInput
    connect?: MinistryWhereUniqueInput
    update?: XOR<XOR<MinistryUpdateToOneWithWhereWithoutFilesInput, MinistryUpdateWithoutFilesInput>, MinistryUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedFilesNestedInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    upsert?: UserUpsertWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedFilesInput, UserUpdateWithoutUploadedFilesInput>, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumChurchRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChurchRole | EnumChurchRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChurchRoleFilter<$PrismaModel> | $Enums.ChurchRole
  }

  export type NestedEnumChurchRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChurchRole | EnumChurchRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChurchRole[] | ListEnumChurchRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChurchRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChurchRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChurchRoleFilter<$PrismaModel>
    _max?: NestedEnumChurchRoleFilter<$PrismaModel>
  }

  export type NestedEnumMinistryRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.MinistryRole | EnumMinistryRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMinistryRoleFilter<$PrismaModel> | $Enums.MinistryRole
  }

  export type NestedEnumMinistryRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MinistryRole | EnumMinistryRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MinistryRole[] | ListEnumMinistryRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMinistryRoleWithAggregatesFilter<$PrismaModel> | $Enums.MinistryRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMinistryRoleFilter<$PrismaModel>
    _max?: NestedEnumMinistryRoleFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuthenticatorCreateWithoutUserInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorUncheckedCreateWithoutUserInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorCreateOrConnectWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput
    create: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput>
  }

  export type AuthenticatorCreateManyUserInputEnvelope = {
    data: AuthenticatorCreateManyUserInput | AuthenticatorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChurchMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ChurchRole
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMembersInput
  }

  export type ChurchMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ChurchRole
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchMemberCreateOrConnectWithoutUserInput = {
    where: ChurchMemberWhereUniqueInput
    create: XOR<ChurchMemberCreateWithoutUserInput, ChurchMemberUncheckedCreateWithoutUserInput>
  }

  export type ChurchMemberCreateManyUserInputEnvelope = {
    data: ChurchMemberCreateManyUserInput | ChurchMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MinistryMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.MinistryRole
    createdAt?: Date | string
    updatedAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutMembersInput
  }

  export type MinistryMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.MinistryRole
    ministryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryMemberCreateOrConnectWithoutUserInput = {
    where: MinistryMemberWhereUniqueInput
    create: XOR<MinistryMemberCreateWithoutUserInput, MinistryMemberUncheckedCreateWithoutUserInput>
  }

  export type MinistryMemberCreateManyUserInputEnvelope = {
    data: MinistryMemberCreateManyUserInput | MinistryMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MinistryScheduleCreateWithoutUserInput = {
    id?: string
    date: Date | string
    status?: string
    ministry: MinistryCreateNestedOneWithoutSchedulesInput
    position: MinistryPositionCreateNestedOneWithoutSchedulesInput
  }

  export type MinistryScheduleUncheckedCreateWithoutUserInput = {
    id?: string
    ministryId: string
    positionId: string
    date: Date | string
    status?: string
  }

  export type MinistryScheduleCreateOrConnectWithoutUserInput = {
    where: MinistryScheduleWhereUniqueInput
    create: XOR<MinistryScheduleCreateWithoutUserInput, MinistryScheduleUncheckedCreateWithoutUserInput>
  }

  export type MinistryScheduleCreateManyUserInputEnvelope = {
    data: MinistryScheduleCreateManyUserInput | MinistryScheduleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MinistryNoticeCreateWithoutUserInput = {
    id?: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutNoticesInput
    events?: MinistryEventCreateNestedManyWithoutNoticeInput
  }

  export type MinistryNoticeUncheckedCreateWithoutUserInput = {
    id?: string
    ministryId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: MinistryEventUncheckedCreateNestedManyWithoutNoticeInput
  }

  export type MinistryNoticeCreateOrConnectWithoutUserInput = {
    where: MinistryNoticeWhereUniqueInput
    create: XOR<MinistryNoticeCreateWithoutUserInput, MinistryNoticeUncheckedCreateWithoutUserInput>
  }

  export type MinistryNoticeCreateManyUserInputEnvelope = {
    data: MinistryNoticeCreateManyUserInput | MinistryNoticeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChurchFeedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutFeedsInput
    images?: FeedImageCreateNestedManyWithoutFeedInput
    likes?: FeedLikeCreateNestedManyWithoutFeedInput
    comments?: FeedCommentCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: FeedImageUncheckedCreateNestedManyWithoutFeedInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutFeedInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedCreateOrConnectWithoutAuthorInput = {
    where: ChurchFeedWhereUniqueInput
    create: XOR<ChurchFeedCreateWithoutAuthorInput, ChurchFeedUncheckedCreateWithoutAuthorInput>
  }

  export type ChurchFeedCreateManyAuthorInputEnvelope = {
    data: ChurchFeedCreateManyAuthorInput | ChurchFeedCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type FeedLikeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feed: ChurchFeedCreateNestedOneWithoutLikesInput
  }

  export type FeedLikeUncheckedCreateWithoutUserInput = {
    id?: string
    feedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLikeCreateOrConnectWithoutUserInput = {
    where: FeedLikeWhereUniqueInput
    create: XOR<FeedLikeCreateWithoutUserInput, FeedLikeUncheckedCreateWithoutUserInput>
  }

  export type FeedLikeCreateManyUserInputEnvelope = {
    data: FeedLikeCreateManyUserInput | FeedLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedCommentCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    feed: ChurchFeedCreateNestedOneWithoutCommentsInput
  }

  export type FeedCommentUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    feedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedCommentCreateOrConnectWithoutUserInput = {
    where: FeedCommentWhereUniqueInput
    create: XOR<FeedCommentCreateWithoutUserInput, FeedCommentUncheckedCreateWithoutUserInput>
  }

  export type FeedCommentCreateManyUserInputEnvelope = {
    data: FeedCommentCreateManyUserInput | FeedCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MinistryFileCreateWithoutUploadedByInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutFilesInput
  }

  export type MinistryFileUncheckedCreateWithoutUploadedByInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    ministryId: string
  }

  export type MinistryFileCreateOrConnectWithoutUploadedByInput = {
    where: MinistryFileWhereUniqueInput
    create: XOR<MinistryFileCreateWithoutUploadedByInput, MinistryFileUncheckedCreateWithoutUploadedByInput>
  }

  export type MinistryFileCreateManyUploadedByInputEnvelope = {
    data: MinistryFileCreateManyUploadedByInput | MinistryFileCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type AuthenticatorUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput
    update: XOR<AuthenticatorUpdateWithoutUserInput, AuthenticatorUncheckedUpdateWithoutUserInput>
    create: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput>
  }

  export type AuthenticatorUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput
    data: XOR<AuthenticatorUpdateWithoutUserInput, AuthenticatorUncheckedUpdateWithoutUserInput>
  }

  export type AuthenticatorUpdateManyWithWhereWithoutUserInput = {
    where: AuthenticatorScalarWhereInput
    data: XOR<AuthenticatorUpdateManyMutationInput, AuthenticatorUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthenticatorScalarWhereInput = {
    AND?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
    OR?: AuthenticatorScalarWhereInput[]
    NOT?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
    credentialID?: StringFilter<"Authenticator"> | string
    userId?: StringFilter<"Authenticator"> | string
    providerAccountId?: StringFilter<"Authenticator"> | string
    credentialPublicKey?: StringFilter<"Authenticator"> | string
    counter?: IntFilter<"Authenticator"> | number
    credentialDeviceType?: StringFilter<"Authenticator"> | string
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean
    transports?: StringNullableFilter<"Authenticator"> | string | null
  }

  export type ChurchMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: ChurchMemberWhereUniqueInput
    update: XOR<ChurchMemberUpdateWithoutUserInput, ChurchMemberUncheckedUpdateWithoutUserInput>
    create: XOR<ChurchMemberCreateWithoutUserInput, ChurchMemberUncheckedCreateWithoutUserInput>
  }

  export type ChurchMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: ChurchMemberWhereUniqueInput
    data: XOR<ChurchMemberUpdateWithoutUserInput, ChurchMemberUncheckedUpdateWithoutUserInput>
  }

  export type ChurchMemberUpdateManyWithWhereWithoutUserInput = {
    where: ChurchMemberScalarWhereInput
    data: XOR<ChurchMemberUpdateManyMutationInput, ChurchMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type ChurchMemberScalarWhereInput = {
    AND?: ChurchMemberScalarWhereInput | ChurchMemberScalarWhereInput[]
    OR?: ChurchMemberScalarWhereInput[]
    NOT?: ChurchMemberScalarWhereInput | ChurchMemberScalarWhereInput[]
    id?: StringFilter<"ChurchMember"> | string
    role?: EnumChurchRoleFilter<"ChurchMember"> | $Enums.ChurchRole
    userId?: StringFilter<"ChurchMember"> | string
    churchId?: StringFilter<"ChurchMember"> | string
    createdAt?: DateTimeFilter<"ChurchMember"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchMember"> | Date | string
  }

  export type MinistryMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: MinistryMemberWhereUniqueInput
    update: XOR<MinistryMemberUpdateWithoutUserInput, MinistryMemberUncheckedUpdateWithoutUserInput>
    create: XOR<MinistryMemberCreateWithoutUserInput, MinistryMemberUncheckedCreateWithoutUserInput>
  }

  export type MinistryMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: MinistryMemberWhereUniqueInput
    data: XOR<MinistryMemberUpdateWithoutUserInput, MinistryMemberUncheckedUpdateWithoutUserInput>
  }

  export type MinistryMemberUpdateManyWithWhereWithoutUserInput = {
    where: MinistryMemberScalarWhereInput
    data: XOR<MinistryMemberUpdateManyMutationInput, MinistryMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type MinistryMemberScalarWhereInput = {
    AND?: MinistryMemberScalarWhereInput | MinistryMemberScalarWhereInput[]
    OR?: MinistryMemberScalarWhereInput[]
    NOT?: MinistryMemberScalarWhereInput | MinistryMemberScalarWhereInput[]
    id?: StringFilter<"MinistryMember"> | string
    role?: EnumMinistryRoleFilter<"MinistryMember"> | $Enums.MinistryRole
    userId?: StringFilter<"MinistryMember"> | string
    ministryId?: StringFilter<"MinistryMember"> | string
    createdAt?: DateTimeFilter<"MinistryMember"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryMember"> | Date | string
  }

  export type MinistryScheduleUpsertWithWhereUniqueWithoutUserInput = {
    where: MinistryScheduleWhereUniqueInput
    update: XOR<MinistryScheduleUpdateWithoutUserInput, MinistryScheduleUncheckedUpdateWithoutUserInput>
    create: XOR<MinistryScheduleCreateWithoutUserInput, MinistryScheduleUncheckedCreateWithoutUserInput>
  }

  export type MinistryScheduleUpdateWithWhereUniqueWithoutUserInput = {
    where: MinistryScheduleWhereUniqueInput
    data: XOR<MinistryScheduleUpdateWithoutUserInput, MinistryScheduleUncheckedUpdateWithoutUserInput>
  }

  export type MinistryScheduleUpdateManyWithWhereWithoutUserInput = {
    where: MinistryScheduleScalarWhereInput
    data: XOR<MinistryScheduleUpdateManyMutationInput, MinistryScheduleUncheckedUpdateManyWithoutUserInput>
  }

  export type MinistryScheduleScalarWhereInput = {
    AND?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
    OR?: MinistryScheduleScalarWhereInput[]
    NOT?: MinistryScheduleScalarWhereInput | MinistryScheduleScalarWhereInput[]
    id?: StringFilter<"MinistrySchedule"> | string
    ministryId?: StringFilter<"MinistrySchedule"> | string
    positionId?: StringFilter<"MinistrySchedule"> | string
    userId?: StringFilter<"MinistrySchedule"> | string
    date?: DateTimeFilter<"MinistrySchedule"> | Date | string
    status?: StringFilter<"MinistrySchedule"> | string
  }

  export type MinistryNoticeUpsertWithWhereUniqueWithoutUserInput = {
    where: MinistryNoticeWhereUniqueInput
    update: XOR<MinistryNoticeUpdateWithoutUserInput, MinistryNoticeUncheckedUpdateWithoutUserInput>
    create: XOR<MinistryNoticeCreateWithoutUserInput, MinistryNoticeUncheckedCreateWithoutUserInput>
  }

  export type MinistryNoticeUpdateWithWhereUniqueWithoutUserInput = {
    where: MinistryNoticeWhereUniqueInput
    data: XOR<MinistryNoticeUpdateWithoutUserInput, MinistryNoticeUncheckedUpdateWithoutUserInput>
  }

  export type MinistryNoticeUpdateManyWithWhereWithoutUserInput = {
    where: MinistryNoticeScalarWhereInput
    data: XOR<MinistryNoticeUpdateManyMutationInput, MinistryNoticeUncheckedUpdateManyWithoutUserInput>
  }

  export type MinistryNoticeScalarWhereInput = {
    AND?: MinistryNoticeScalarWhereInput | MinistryNoticeScalarWhereInput[]
    OR?: MinistryNoticeScalarWhereInput[]
    NOT?: MinistryNoticeScalarWhereInput | MinistryNoticeScalarWhereInput[]
    id?: StringFilter<"MinistryNotice"> | string
    ministryId?: StringFilter<"MinistryNotice"> | string
    userId?: StringFilter<"MinistryNotice"> | string
    title?: StringFilter<"MinistryNotice"> | string
    content?: StringFilter<"MinistryNotice"> | string
    startDate?: DateTimeFilter<"MinistryNotice"> | Date | string
    endDate?: DateTimeFilter<"MinistryNotice"> | Date | string
    createdAt?: DateTimeFilter<"MinistryNotice"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryNotice"> | Date | string
  }

  export type ChurchFeedUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ChurchFeedWhereUniqueInput
    update: XOR<ChurchFeedUpdateWithoutAuthorInput, ChurchFeedUncheckedUpdateWithoutAuthorInput>
    create: XOR<ChurchFeedCreateWithoutAuthorInput, ChurchFeedUncheckedCreateWithoutAuthorInput>
  }

  export type ChurchFeedUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ChurchFeedWhereUniqueInput
    data: XOR<ChurchFeedUpdateWithoutAuthorInput, ChurchFeedUncheckedUpdateWithoutAuthorInput>
  }

  export type ChurchFeedUpdateManyWithWhereWithoutAuthorInput = {
    where: ChurchFeedScalarWhereInput
    data: XOR<ChurchFeedUpdateManyMutationInput, ChurchFeedUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ChurchFeedScalarWhereInput = {
    AND?: ChurchFeedScalarWhereInput | ChurchFeedScalarWhereInput[]
    OR?: ChurchFeedScalarWhereInput[]
    NOT?: ChurchFeedScalarWhereInput | ChurchFeedScalarWhereInput[]
    id?: StringFilter<"ChurchFeed"> | string
    content?: StringFilter<"ChurchFeed"> | string
    churchId?: StringFilter<"ChurchFeed"> | string
    authorId?: StringFilter<"ChurchFeed"> | string
    createdAt?: DateTimeFilter<"ChurchFeed"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchFeed"> | Date | string
  }

  export type FeedLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedLikeWhereUniqueInput
    update: XOR<FeedLikeUpdateWithoutUserInput, FeedLikeUncheckedUpdateWithoutUserInput>
    create: XOR<FeedLikeCreateWithoutUserInput, FeedLikeUncheckedCreateWithoutUserInput>
  }

  export type FeedLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedLikeWhereUniqueInput
    data: XOR<FeedLikeUpdateWithoutUserInput, FeedLikeUncheckedUpdateWithoutUserInput>
  }

  export type FeedLikeUpdateManyWithWhereWithoutUserInput = {
    where: FeedLikeScalarWhereInput
    data: XOR<FeedLikeUpdateManyMutationInput, FeedLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedLikeScalarWhereInput = {
    AND?: FeedLikeScalarWhereInput | FeedLikeScalarWhereInput[]
    OR?: FeedLikeScalarWhereInput[]
    NOT?: FeedLikeScalarWhereInput | FeedLikeScalarWhereInput[]
    id?: StringFilter<"FeedLike"> | string
    feedId?: StringFilter<"FeedLike"> | string
    userId?: StringFilter<"FeedLike"> | string
    createdAt?: DateTimeFilter<"FeedLike"> | Date | string
    updatedAt?: DateTimeFilter<"FeedLike"> | Date | string
  }

  export type FeedCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedCommentWhereUniqueInput
    update: XOR<FeedCommentUpdateWithoutUserInput, FeedCommentUncheckedUpdateWithoutUserInput>
    create: XOR<FeedCommentCreateWithoutUserInput, FeedCommentUncheckedCreateWithoutUserInput>
  }

  export type FeedCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedCommentWhereUniqueInput
    data: XOR<FeedCommentUpdateWithoutUserInput, FeedCommentUncheckedUpdateWithoutUserInput>
  }

  export type FeedCommentUpdateManyWithWhereWithoutUserInput = {
    where: FeedCommentScalarWhereInput
    data: XOR<FeedCommentUpdateManyMutationInput, FeedCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedCommentScalarWhereInput = {
    AND?: FeedCommentScalarWhereInput | FeedCommentScalarWhereInput[]
    OR?: FeedCommentScalarWhereInput[]
    NOT?: FeedCommentScalarWhereInput | FeedCommentScalarWhereInput[]
    id?: StringFilter<"FeedComment"> | string
    content?: StringFilter<"FeedComment"> | string
    feedId?: StringFilter<"FeedComment"> | string
    userId?: StringFilter<"FeedComment"> | string
    createdAt?: DateTimeFilter<"FeedComment"> | Date | string
    updatedAt?: DateTimeFilter<"FeedComment"> | Date | string
  }

  export type MinistryFileUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: MinistryFileWhereUniqueInput
    update: XOR<MinistryFileUpdateWithoutUploadedByInput, MinistryFileUncheckedUpdateWithoutUploadedByInput>
    create: XOR<MinistryFileCreateWithoutUploadedByInput, MinistryFileUncheckedCreateWithoutUploadedByInput>
  }

  export type MinistryFileUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: MinistryFileWhereUniqueInput
    data: XOR<MinistryFileUpdateWithoutUploadedByInput, MinistryFileUncheckedUpdateWithoutUploadedByInput>
  }

  export type MinistryFileUpdateManyWithWhereWithoutUploadedByInput = {
    where: MinistryFileScalarWhereInput
    data: XOR<MinistryFileUpdateManyMutationInput, MinistryFileUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type MinistryFileScalarWhereInput = {
    AND?: MinistryFileScalarWhereInput | MinistryFileScalarWhereInput[]
    OR?: MinistryFileScalarWhereInput[]
    NOT?: MinistryFileScalarWhereInput | MinistryFileScalarWhereInput[]
    id?: StringFilter<"MinistryFile"> | string
    name?: StringFilter<"MinistryFile"> | string
    url?: StringFilter<"MinistryFile"> | string
    type?: StringFilter<"MinistryFile"> | string
    size?: IntFilter<"MinistryFile"> | number
    createdAt?: DateTimeFilter<"MinistryFile"> | Date | string
    ministryId?: StringFilter<"MinistryFile"> | string
    uploadedById?: StringFilter<"MinistryFile"> | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type UserCreateWithoutAuthenticatorInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutAuthenticatorInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutAuthenticatorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
  }

  export type UserUpsertWithoutAuthenticatorInput = {
    update: XOR<UserUpdateWithoutAuthenticatorInput, UserUncheckedUpdateWithoutAuthenticatorInput>
    create: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthenticatorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthenticatorInput, UserUncheckedUpdateWithoutAuthenticatorInput>
  }

  export type UserUpdateWithoutAuthenticatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthenticatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type ChurchMemberCreateWithoutChurchInput = {
    id?: string
    role?: $Enums.ChurchRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChurchesInput
  }

  export type ChurchMemberUncheckedCreateWithoutChurchInput = {
    id?: string
    role?: $Enums.ChurchRole
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchMemberCreateOrConnectWithoutChurchInput = {
    where: ChurchMemberWhereUniqueInput
    create: XOR<ChurchMemberCreateWithoutChurchInput, ChurchMemberUncheckedCreateWithoutChurchInput>
  }

  export type ChurchMemberCreateManyChurchInputEnvelope = {
    data: ChurchMemberCreateManyChurchInput | ChurchMemberCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type MinistryCreateWithoutChurchInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutChurchInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutChurchInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutChurchInput, MinistryUncheckedCreateWithoutChurchInput>
  }

  export type MinistryCreateManyChurchInputEnvelope = {
    data: MinistryCreateManyChurchInput | MinistryCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type ChurchNoticeCreateWithoutChurchInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchNoticeUncheckedCreateWithoutChurchInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchNoticeCreateOrConnectWithoutChurchInput = {
    where: ChurchNoticeWhereUniqueInput
    create: XOR<ChurchNoticeCreateWithoutChurchInput, ChurchNoticeUncheckedCreateWithoutChurchInput>
  }

  export type ChurchNoticeCreateManyChurchInputEnvelope = {
    data: ChurchNoticeCreateManyChurchInput | ChurchNoticeCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type ChurchFeedCreateWithoutChurchInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutFeedsInput
    images?: FeedImageCreateNestedManyWithoutFeedInput
    likes?: FeedLikeCreateNestedManyWithoutFeedInput
    comments?: FeedCommentCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUncheckedCreateWithoutChurchInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: FeedImageUncheckedCreateNestedManyWithoutFeedInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutFeedInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedCreateOrConnectWithoutChurchInput = {
    where: ChurchFeedWhereUniqueInput
    create: XOR<ChurchFeedCreateWithoutChurchInput, ChurchFeedUncheckedCreateWithoutChurchInput>
  }

  export type ChurchFeedCreateManyChurchInputEnvelope = {
    data: ChurchFeedCreateManyChurchInput | ChurchFeedCreateManyChurchInput[]
    skipDuplicates?: boolean
  }

  export type ChurchMemberUpsertWithWhereUniqueWithoutChurchInput = {
    where: ChurchMemberWhereUniqueInput
    update: XOR<ChurchMemberUpdateWithoutChurchInput, ChurchMemberUncheckedUpdateWithoutChurchInput>
    create: XOR<ChurchMemberCreateWithoutChurchInput, ChurchMemberUncheckedCreateWithoutChurchInput>
  }

  export type ChurchMemberUpdateWithWhereUniqueWithoutChurchInput = {
    where: ChurchMemberWhereUniqueInput
    data: XOR<ChurchMemberUpdateWithoutChurchInput, ChurchMemberUncheckedUpdateWithoutChurchInput>
  }

  export type ChurchMemberUpdateManyWithWhereWithoutChurchInput = {
    where: ChurchMemberScalarWhereInput
    data: XOR<ChurchMemberUpdateManyMutationInput, ChurchMemberUncheckedUpdateManyWithoutChurchInput>
  }

  export type MinistryUpsertWithWhereUniqueWithoutChurchInput = {
    where: MinistryWhereUniqueInput
    update: XOR<MinistryUpdateWithoutChurchInput, MinistryUncheckedUpdateWithoutChurchInput>
    create: XOR<MinistryCreateWithoutChurchInput, MinistryUncheckedCreateWithoutChurchInput>
  }

  export type MinistryUpdateWithWhereUniqueWithoutChurchInput = {
    where: MinistryWhereUniqueInput
    data: XOR<MinistryUpdateWithoutChurchInput, MinistryUncheckedUpdateWithoutChurchInput>
  }

  export type MinistryUpdateManyWithWhereWithoutChurchInput = {
    where: MinistryScalarWhereInput
    data: XOR<MinistryUpdateManyMutationInput, MinistryUncheckedUpdateManyWithoutChurchInput>
  }

  export type MinistryScalarWhereInput = {
    AND?: MinistryScalarWhereInput | MinistryScalarWhereInput[]
    OR?: MinistryScalarWhereInput[]
    NOT?: MinistryScalarWhereInput | MinistryScalarWhereInput[]
    id?: StringFilter<"Ministry"> | string
    name?: StringFilter<"Ministry"> | string
    description?: StringNullableFilter<"Ministry"> | string | null
    churchId?: StringFilter<"Ministry"> | string
    createdAt?: DateTimeFilter<"Ministry"> | Date | string
    updatedAt?: DateTimeFilter<"Ministry"> | Date | string
  }

  export type ChurchNoticeUpsertWithWhereUniqueWithoutChurchInput = {
    where: ChurchNoticeWhereUniqueInput
    update: XOR<ChurchNoticeUpdateWithoutChurchInput, ChurchNoticeUncheckedUpdateWithoutChurchInput>
    create: XOR<ChurchNoticeCreateWithoutChurchInput, ChurchNoticeUncheckedCreateWithoutChurchInput>
  }

  export type ChurchNoticeUpdateWithWhereUniqueWithoutChurchInput = {
    where: ChurchNoticeWhereUniqueInput
    data: XOR<ChurchNoticeUpdateWithoutChurchInput, ChurchNoticeUncheckedUpdateWithoutChurchInput>
  }

  export type ChurchNoticeUpdateManyWithWhereWithoutChurchInput = {
    where: ChurchNoticeScalarWhereInput
    data: XOR<ChurchNoticeUpdateManyMutationInput, ChurchNoticeUncheckedUpdateManyWithoutChurchInput>
  }

  export type ChurchNoticeScalarWhereInput = {
    AND?: ChurchNoticeScalarWhereInput | ChurchNoticeScalarWhereInput[]
    OR?: ChurchNoticeScalarWhereInput[]
    NOT?: ChurchNoticeScalarWhereInput | ChurchNoticeScalarWhereInput[]
    id?: StringFilter<"ChurchNotice"> | string
    title?: StringFilter<"ChurchNotice"> | string
    content?: StringFilter<"ChurchNotice"> | string
    isImportant?: BoolFilter<"ChurchNotice"> | boolean
    churchId?: StringFilter<"ChurchNotice"> | string
    createdAt?: DateTimeFilter<"ChurchNotice"> | Date | string
    updatedAt?: DateTimeFilter<"ChurchNotice"> | Date | string
  }

  export type ChurchFeedUpsertWithWhereUniqueWithoutChurchInput = {
    where: ChurchFeedWhereUniqueInput
    update: XOR<ChurchFeedUpdateWithoutChurchInput, ChurchFeedUncheckedUpdateWithoutChurchInput>
    create: XOR<ChurchFeedCreateWithoutChurchInput, ChurchFeedUncheckedCreateWithoutChurchInput>
  }

  export type ChurchFeedUpdateWithWhereUniqueWithoutChurchInput = {
    where: ChurchFeedWhereUniqueInput
    data: XOR<ChurchFeedUpdateWithoutChurchInput, ChurchFeedUncheckedUpdateWithoutChurchInput>
  }

  export type ChurchFeedUpdateManyWithWhereWithoutChurchInput = {
    where: ChurchFeedScalarWhereInput
    data: XOR<ChurchFeedUpdateManyMutationInput, ChurchFeedUncheckedUpdateManyWithoutChurchInput>
  }

  export type UserCreateWithoutChurchesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutChurchesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutChurchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChurchesInput, UserUncheckedCreateWithoutChurchesInput>
  }

  export type ChurchCreateWithoutMembersInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ministries?: MinistryCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedCreateNestedManyWithoutChurchInput
  }

  export type ChurchUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ministries?: MinistryUncheckedCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeUncheckedCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutChurchInput
  }

  export type ChurchCreateOrConnectWithoutMembersInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutMembersInput, ChurchUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutChurchesInput = {
    update: XOR<UserUpdateWithoutChurchesInput, UserUncheckedUpdateWithoutChurchesInput>
    create: XOR<UserCreateWithoutChurchesInput, UserUncheckedCreateWithoutChurchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChurchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChurchesInput, UserUncheckedUpdateWithoutChurchesInput>
  }

  export type UserUpdateWithoutChurchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutChurchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type ChurchUpsertWithoutMembersInput = {
    update: XOR<ChurchUpdateWithoutMembersInput, ChurchUncheckedUpdateWithoutMembersInput>
    create: XOR<ChurchCreateWithoutMembersInput, ChurchUncheckedCreateWithoutMembersInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutMembersInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutMembersInput, ChurchUncheckedUpdateWithoutMembersInput>
  }

  export type ChurchUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministries?: MinistryUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUpdateManyWithoutChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministries?: MinistryUncheckedUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUncheckedUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutChurchNestedInput
  }

  export type ChurchCreateWithoutMinistriesInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedCreateNestedManyWithoutChurchInput
  }

  export type ChurchUncheckedCreateWithoutMinistriesInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberUncheckedCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeUncheckedCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutChurchInput
  }

  export type ChurchCreateOrConnectWithoutMinistriesInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutMinistriesInput, ChurchUncheckedCreateWithoutMinistriesInput>
  }

  export type MinistryMemberCreateWithoutMinistryInput = {
    id?: string
    role?: $Enums.MinistryRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMinistriesInput
  }

  export type MinistryMemberUncheckedCreateWithoutMinistryInput = {
    id?: string
    role?: $Enums.MinistryRole
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryMemberCreateOrConnectWithoutMinistryInput = {
    where: MinistryMemberWhereUniqueInput
    create: XOR<MinistryMemberCreateWithoutMinistryInput, MinistryMemberUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryMemberCreateManyMinistryInputEnvelope = {
    data: MinistryMemberCreateManyMinistryInput | MinistryMemberCreateManyMinistryInput[]
    skipDuplicates?: boolean
  }

  export type MinistryNoticeCreateWithoutMinistryInput = {
    id?: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMinistryNoticesInput
    events?: MinistryEventCreateNestedManyWithoutNoticeInput
  }

  export type MinistryNoticeUncheckedCreateWithoutMinistryInput = {
    id?: string
    userId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: MinistryEventUncheckedCreateNestedManyWithoutNoticeInput
  }

  export type MinistryNoticeCreateOrConnectWithoutMinistryInput = {
    where: MinistryNoticeWhereUniqueInput
    create: XOR<MinistryNoticeCreateWithoutMinistryInput, MinistryNoticeUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryNoticeCreateManyMinistryInputEnvelope = {
    data: MinistryNoticeCreateManyMinistryInput | MinistryNoticeCreateManyMinistryInput[]
    skipDuplicates?: boolean
  }

  export type MinistryScheduleCreateWithoutMinistryInput = {
    id?: string
    date: Date | string
    status?: string
    position: MinistryPositionCreateNestedOneWithoutSchedulesInput
    user: UserCreateNestedOneWithoutSchedulesInput
  }

  export type MinistryScheduleUncheckedCreateWithoutMinistryInput = {
    id?: string
    positionId: string
    userId: string
    date: Date | string
    status?: string
  }

  export type MinistryScheduleCreateOrConnectWithoutMinistryInput = {
    where: MinistryScheduleWhereUniqueInput
    create: XOR<MinistryScheduleCreateWithoutMinistryInput, MinistryScheduleUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryScheduleCreateManyMinistryInputEnvelope = {
    data: MinistryScheduleCreateManyMinistryInput | MinistryScheduleCreateManyMinistryInput[]
    skipDuplicates?: boolean
  }

  export type MinistryAnnouncementCreateWithoutMinistryInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryAnnouncementUncheckedCreateWithoutMinistryInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryAnnouncementCreateOrConnectWithoutMinistryInput = {
    where: MinistryAnnouncementWhereUniqueInput
    create: XOR<MinistryAnnouncementCreateWithoutMinistryInput, MinistryAnnouncementUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryAnnouncementCreateManyMinistryInputEnvelope = {
    data: MinistryAnnouncementCreateManyMinistryInput | MinistryAnnouncementCreateManyMinistryInput[]
    skipDuplicates?: boolean
  }

  export type MinistryPositionCreateWithoutMinistryInput = {
    id?: string
    name: string
    description?: string | null
    maxMembers?: number | null
    schedules?: MinistryScheduleCreateNestedManyWithoutPositionInput
  }

  export type MinistryPositionUncheckedCreateWithoutMinistryInput = {
    id?: string
    name: string
    description?: string | null
    maxMembers?: number | null
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutPositionInput
  }

  export type MinistryPositionCreateOrConnectWithoutMinistryInput = {
    where: MinistryPositionWhereUniqueInput
    create: XOR<MinistryPositionCreateWithoutMinistryInput, MinistryPositionUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryPositionCreateManyMinistryInputEnvelope = {
    data: MinistryPositionCreateManyMinistryInput | MinistryPositionCreateManyMinistryInput[]
    skipDuplicates?: boolean
  }

  export type MinistryFileCreateWithoutMinistryInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedFilesInput
  }

  export type MinistryFileUncheckedCreateWithoutMinistryInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    uploadedById: string
  }

  export type MinistryFileCreateOrConnectWithoutMinistryInput = {
    where: MinistryFileWhereUniqueInput
    create: XOR<MinistryFileCreateWithoutMinistryInput, MinistryFileUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryFileCreateManyMinistryInputEnvelope = {
    data: MinistryFileCreateManyMinistryInput | MinistryFileCreateManyMinistryInput[]
    skipDuplicates?: boolean
  }

  export type ChurchUpsertWithoutMinistriesInput = {
    update: XOR<ChurchUpdateWithoutMinistriesInput, ChurchUncheckedUpdateWithoutMinistriesInput>
    create: XOR<ChurchCreateWithoutMinistriesInput, ChurchUncheckedCreateWithoutMinistriesInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutMinistriesInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutMinistriesInput, ChurchUncheckedUpdateWithoutMinistriesInput>
  }

  export type ChurchUpdateWithoutMinistriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUpdateManyWithoutChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutMinistriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUncheckedUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUncheckedUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutChurchNestedInput
  }

  export type MinistryMemberUpsertWithWhereUniqueWithoutMinistryInput = {
    where: MinistryMemberWhereUniqueInput
    update: XOR<MinistryMemberUpdateWithoutMinistryInput, MinistryMemberUncheckedUpdateWithoutMinistryInput>
    create: XOR<MinistryMemberCreateWithoutMinistryInput, MinistryMemberUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryMemberUpdateWithWhereUniqueWithoutMinistryInput = {
    where: MinistryMemberWhereUniqueInput
    data: XOR<MinistryMemberUpdateWithoutMinistryInput, MinistryMemberUncheckedUpdateWithoutMinistryInput>
  }

  export type MinistryMemberUpdateManyWithWhereWithoutMinistryInput = {
    where: MinistryMemberScalarWhereInput
    data: XOR<MinistryMemberUpdateManyMutationInput, MinistryMemberUncheckedUpdateManyWithoutMinistryInput>
  }

  export type MinistryNoticeUpsertWithWhereUniqueWithoutMinistryInput = {
    where: MinistryNoticeWhereUniqueInput
    update: XOR<MinistryNoticeUpdateWithoutMinistryInput, MinistryNoticeUncheckedUpdateWithoutMinistryInput>
    create: XOR<MinistryNoticeCreateWithoutMinistryInput, MinistryNoticeUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryNoticeUpdateWithWhereUniqueWithoutMinistryInput = {
    where: MinistryNoticeWhereUniqueInput
    data: XOR<MinistryNoticeUpdateWithoutMinistryInput, MinistryNoticeUncheckedUpdateWithoutMinistryInput>
  }

  export type MinistryNoticeUpdateManyWithWhereWithoutMinistryInput = {
    where: MinistryNoticeScalarWhereInput
    data: XOR<MinistryNoticeUpdateManyMutationInput, MinistryNoticeUncheckedUpdateManyWithoutMinistryInput>
  }

  export type MinistryScheduleUpsertWithWhereUniqueWithoutMinistryInput = {
    where: MinistryScheduleWhereUniqueInput
    update: XOR<MinistryScheduleUpdateWithoutMinistryInput, MinistryScheduleUncheckedUpdateWithoutMinistryInput>
    create: XOR<MinistryScheduleCreateWithoutMinistryInput, MinistryScheduleUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryScheduleUpdateWithWhereUniqueWithoutMinistryInput = {
    where: MinistryScheduleWhereUniqueInput
    data: XOR<MinistryScheduleUpdateWithoutMinistryInput, MinistryScheduleUncheckedUpdateWithoutMinistryInput>
  }

  export type MinistryScheduleUpdateManyWithWhereWithoutMinistryInput = {
    where: MinistryScheduleScalarWhereInput
    data: XOR<MinistryScheduleUpdateManyMutationInput, MinistryScheduleUncheckedUpdateManyWithoutMinistryInput>
  }

  export type MinistryAnnouncementUpsertWithWhereUniqueWithoutMinistryInput = {
    where: MinistryAnnouncementWhereUniqueInput
    update: XOR<MinistryAnnouncementUpdateWithoutMinistryInput, MinistryAnnouncementUncheckedUpdateWithoutMinistryInput>
    create: XOR<MinistryAnnouncementCreateWithoutMinistryInput, MinistryAnnouncementUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryAnnouncementUpdateWithWhereUniqueWithoutMinistryInput = {
    where: MinistryAnnouncementWhereUniqueInput
    data: XOR<MinistryAnnouncementUpdateWithoutMinistryInput, MinistryAnnouncementUncheckedUpdateWithoutMinistryInput>
  }

  export type MinistryAnnouncementUpdateManyWithWhereWithoutMinistryInput = {
    where: MinistryAnnouncementScalarWhereInput
    data: XOR<MinistryAnnouncementUpdateManyMutationInput, MinistryAnnouncementUncheckedUpdateManyWithoutMinistryInput>
  }

  export type MinistryAnnouncementScalarWhereInput = {
    AND?: MinistryAnnouncementScalarWhereInput | MinistryAnnouncementScalarWhereInput[]
    OR?: MinistryAnnouncementScalarWhereInput[]
    NOT?: MinistryAnnouncementScalarWhereInput | MinistryAnnouncementScalarWhereInput[]
    id?: StringFilter<"MinistryAnnouncement"> | string
    title?: StringFilter<"MinistryAnnouncement"> | string
    content?: StringFilter<"MinistryAnnouncement"> | string
    isImportant?: BoolFilter<"MinistryAnnouncement"> | boolean
    ministryId?: StringFilter<"MinistryAnnouncement"> | string
    createdAt?: DateTimeFilter<"MinistryAnnouncement"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryAnnouncement"> | Date | string
  }

  export type MinistryPositionUpsertWithWhereUniqueWithoutMinistryInput = {
    where: MinistryPositionWhereUniqueInput
    update: XOR<MinistryPositionUpdateWithoutMinistryInput, MinistryPositionUncheckedUpdateWithoutMinistryInput>
    create: XOR<MinistryPositionCreateWithoutMinistryInput, MinistryPositionUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryPositionUpdateWithWhereUniqueWithoutMinistryInput = {
    where: MinistryPositionWhereUniqueInput
    data: XOR<MinistryPositionUpdateWithoutMinistryInput, MinistryPositionUncheckedUpdateWithoutMinistryInput>
  }

  export type MinistryPositionUpdateManyWithWhereWithoutMinistryInput = {
    where: MinistryPositionScalarWhereInput
    data: XOR<MinistryPositionUpdateManyMutationInput, MinistryPositionUncheckedUpdateManyWithoutMinistryInput>
  }

  export type MinistryPositionScalarWhereInput = {
    AND?: MinistryPositionScalarWhereInput | MinistryPositionScalarWhereInput[]
    OR?: MinistryPositionScalarWhereInput[]
    NOT?: MinistryPositionScalarWhereInput | MinistryPositionScalarWhereInput[]
    id?: StringFilter<"MinistryPosition"> | string
    ministryId?: StringFilter<"MinistryPosition"> | string
    name?: StringFilter<"MinistryPosition"> | string
    description?: StringNullableFilter<"MinistryPosition"> | string | null
    maxMembers?: IntNullableFilter<"MinistryPosition"> | number | null
  }

  export type MinistryFileUpsertWithWhereUniqueWithoutMinistryInput = {
    where: MinistryFileWhereUniqueInput
    update: XOR<MinistryFileUpdateWithoutMinistryInput, MinistryFileUncheckedUpdateWithoutMinistryInput>
    create: XOR<MinistryFileCreateWithoutMinistryInput, MinistryFileUncheckedCreateWithoutMinistryInput>
  }

  export type MinistryFileUpdateWithWhereUniqueWithoutMinistryInput = {
    where: MinistryFileWhereUniqueInput
    data: XOR<MinistryFileUpdateWithoutMinistryInput, MinistryFileUncheckedUpdateWithoutMinistryInput>
  }

  export type MinistryFileUpdateManyWithWhereWithoutMinistryInput = {
    where: MinistryFileScalarWhereInput
    data: XOR<MinistryFileUpdateManyMutationInput, MinistryFileUncheckedUpdateManyWithoutMinistryInput>
  }

  export type UserCreateWithoutMinistriesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutMinistriesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutMinistriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMinistriesInput, UserUncheckedCreateWithoutMinistriesInput>
  }

  export type MinistryCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutMembersInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutMembersInput, MinistryUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutMinistriesInput = {
    update: XOR<UserUpdateWithoutMinistriesInput, UserUncheckedUpdateWithoutMinistriesInput>
    create: XOR<UserCreateWithoutMinistriesInput, UserUncheckedCreateWithoutMinistriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMinistriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMinistriesInput, UserUncheckedUpdateWithoutMinistriesInput>
  }

  export type UserUpdateWithoutMinistriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMinistriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type MinistryUpsertWithoutMembersInput = {
    update: XOR<MinistryUpdateWithoutMembersInput, MinistryUncheckedUpdateWithoutMembersInput>
    create: XOR<MinistryCreateWithoutMembersInput, MinistryUncheckedCreateWithoutMembersInput>
    where?: MinistryWhereInput
  }

  export type MinistryUpdateToOneWithWhereWithoutMembersInput = {
    where?: MinistryWhereInput
    data: XOR<MinistryUpdateWithoutMembersInput, MinistryUncheckedUpdateWithoutMembersInput>
  }

  export type MinistryUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type ChurchCreateWithoutNoticesInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberCreateNestedManyWithoutChurchInput
    ministries?: MinistryCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedCreateNestedManyWithoutChurchInput
  }

  export type ChurchUncheckedCreateWithoutNoticesInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberUncheckedCreateNestedManyWithoutChurchInput
    ministries?: MinistryUncheckedCreateNestedManyWithoutChurchInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutChurchInput
  }

  export type ChurchCreateOrConnectWithoutNoticesInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutNoticesInput, ChurchUncheckedCreateWithoutNoticesInput>
  }

  export type ChurchUpsertWithoutNoticesInput = {
    update: XOR<ChurchUpdateWithoutNoticesInput, ChurchUncheckedUpdateWithoutNoticesInput>
    create: XOR<ChurchCreateWithoutNoticesInput, ChurchUncheckedCreateWithoutNoticesInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutNoticesInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutNoticesInput, ChurchUncheckedUpdateWithoutNoticesInput>
  }

  export type ChurchUpdateWithoutNoticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUpdateManyWithoutChurchNestedInput
    ministries?: MinistryUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUpdateManyWithoutChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutNoticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUncheckedUpdateManyWithoutChurchNestedInput
    ministries?: MinistryUncheckedUpdateManyWithoutChurchNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutChurchNestedInput
  }

  export type MinistryCreateWithoutNoticesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutNoticesInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutNoticesInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutNoticesInput, MinistryUncheckedCreateWithoutNoticesInput>
  }

  export type UserCreateWithoutMinistryNoticesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutMinistryNoticesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutMinistryNoticesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMinistryNoticesInput, UserUncheckedCreateWithoutMinistryNoticesInput>
  }

  export type MinistryEventCreateWithoutNoticeInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    eventDate: Date | string
    startTime: Date | string
    endTime: Date | string
    maxAttendees?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryEventUncheckedCreateWithoutNoticeInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    eventDate: Date | string
    startTime: Date | string
    endTime: Date | string
    maxAttendees?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryEventCreateOrConnectWithoutNoticeInput = {
    where: MinistryEventWhereUniqueInput
    create: XOR<MinistryEventCreateWithoutNoticeInput, MinistryEventUncheckedCreateWithoutNoticeInput>
  }

  export type MinistryEventCreateManyNoticeInputEnvelope = {
    data: MinistryEventCreateManyNoticeInput | MinistryEventCreateManyNoticeInput[]
    skipDuplicates?: boolean
  }

  export type MinistryUpsertWithoutNoticesInput = {
    update: XOR<MinistryUpdateWithoutNoticesInput, MinistryUncheckedUpdateWithoutNoticesInput>
    create: XOR<MinistryCreateWithoutNoticesInput, MinistryUncheckedCreateWithoutNoticesInput>
    where?: MinistryWhereInput
  }

  export type MinistryUpdateToOneWithWhereWithoutNoticesInput = {
    where?: MinistryWhereInput
    data: XOR<MinistryUpdateWithoutNoticesInput, MinistryUncheckedUpdateWithoutNoticesInput>
  }

  export type MinistryUpdateWithoutNoticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutNoticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type UserUpsertWithoutMinistryNoticesInput = {
    update: XOR<UserUpdateWithoutMinistryNoticesInput, UserUncheckedUpdateWithoutMinistryNoticesInput>
    create: XOR<UserCreateWithoutMinistryNoticesInput, UserUncheckedCreateWithoutMinistryNoticesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMinistryNoticesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMinistryNoticesInput, UserUncheckedUpdateWithoutMinistryNoticesInput>
  }

  export type UserUpdateWithoutMinistryNoticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMinistryNoticesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type MinistryEventUpsertWithWhereUniqueWithoutNoticeInput = {
    where: MinistryEventWhereUniqueInput
    update: XOR<MinistryEventUpdateWithoutNoticeInput, MinistryEventUncheckedUpdateWithoutNoticeInput>
    create: XOR<MinistryEventCreateWithoutNoticeInput, MinistryEventUncheckedCreateWithoutNoticeInput>
  }

  export type MinistryEventUpdateWithWhereUniqueWithoutNoticeInput = {
    where: MinistryEventWhereUniqueInput
    data: XOR<MinistryEventUpdateWithoutNoticeInput, MinistryEventUncheckedUpdateWithoutNoticeInput>
  }

  export type MinistryEventUpdateManyWithWhereWithoutNoticeInput = {
    where: MinistryEventScalarWhereInput
    data: XOR<MinistryEventUpdateManyMutationInput, MinistryEventUncheckedUpdateManyWithoutNoticeInput>
  }

  export type MinistryEventScalarWhereInput = {
    AND?: MinistryEventScalarWhereInput | MinistryEventScalarWhereInput[]
    OR?: MinistryEventScalarWhereInput[]
    NOT?: MinistryEventScalarWhereInput | MinistryEventScalarWhereInput[]
    id?: StringFilter<"MinistryEvent"> | string
    noticeId?: StringFilter<"MinistryEvent"> | string
    title?: StringFilter<"MinistryEvent"> | string
    description?: StringNullableFilter<"MinistryEvent"> | string | null
    location?: StringNullableFilter<"MinistryEvent"> | string | null
    eventDate?: DateTimeFilter<"MinistryEvent"> | Date | string
    startTime?: DateTimeFilter<"MinistryEvent"> | Date | string
    endTime?: DateTimeFilter<"MinistryEvent"> | Date | string
    maxAttendees?: IntNullableFilter<"MinistryEvent"> | number | null
    createdAt?: DateTimeFilter<"MinistryEvent"> | Date | string
    updatedAt?: DateTimeFilter<"MinistryEvent"> | Date | string
  }

  export type MinistryNoticeCreateWithoutEventsInput = {
    id?: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    ministry: MinistryCreateNestedOneWithoutNoticesInput
    user: UserCreateNestedOneWithoutMinistryNoticesInput
  }

  export type MinistryNoticeUncheckedCreateWithoutEventsInput = {
    id?: string
    ministryId: string
    userId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryNoticeCreateOrConnectWithoutEventsInput = {
    where: MinistryNoticeWhereUniqueInput
    create: XOR<MinistryNoticeCreateWithoutEventsInput, MinistryNoticeUncheckedCreateWithoutEventsInput>
  }

  export type MinistryNoticeUpsertWithoutEventsInput = {
    update: XOR<MinistryNoticeUpdateWithoutEventsInput, MinistryNoticeUncheckedUpdateWithoutEventsInput>
    create: XOR<MinistryNoticeCreateWithoutEventsInput, MinistryNoticeUncheckedCreateWithoutEventsInput>
    where?: MinistryNoticeWhereInput
  }

  export type MinistryNoticeUpdateToOneWithWhereWithoutEventsInput = {
    where?: MinistryNoticeWhereInput
    data: XOR<MinistryNoticeUpdateWithoutEventsInput, MinistryNoticeUncheckedUpdateWithoutEventsInput>
  }

  export type MinistryNoticeUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutNoticesNestedInput
    user?: UserUpdateOneRequiredWithoutMinistryNoticesNestedInput
  }

  export type MinistryNoticeUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutAnnouncementsInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutAnnouncementsInput, MinistryUncheckedCreateWithoutAnnouncementsInput>
  }

  export type MinistryUpsertWithoutAnnouncementsInput = {
    update: XOR<MinistryUpdateWithoutAnnouncementsInput, MinistryUncheckedUpdateWithoutAnnouncementsInput>
    create: XOR<MinistryCreateWithoutAnnouncementsInput, MinistryUncheckedCreateWithoutAnnouncementsInput>
    where?: MinistryWhereInput
  }

  export type MinistryUpdateToOneWithWhereWithoutAnnouncementsInput = {
    where?: MinistryWhereInput
    data: XOR<MinistryUpdateWithoutAnnouncementsInput, MinistryUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type MinistryUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryCreateWithoutSchedulesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutSchedulesInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutSchedulesInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutSchedulesInput, MinistryUncheckedCreateWithoutSchedulesInput>
  }

  export type MinistryPositionCreateWithoutSchedulesInput = {
    id?: string
    name: string
    description?: string | null
    maxMembers?: number | null
    ministry: MinistryCreateNestedOneWithoutPositionsInput
  }

  export type MinistryPositionUncheckedCreateWithoutSchedulesInput = {
    id?: string
    ministryId: string
    name: string
    description?: string | null
    maxMembers?: number | null
  }

  export type MinistryPositionCreateOrConnectWithoutSchedulesInput = {
    where: MinistryPositionWhereUniqueInput
    create: XOR<MinistryPositionCreateWithoutSchedulesInput, MinistryPositionUncheckedCreateWithoutSchedulesInput>
  }

  export type UserCreateWithoutSchedulesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutSchedulesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutSchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
  }

  export type MinistryUpsertWithoutSchedulesInput = {
    update: XOR<MinistryUpdateWithoutSchedulesInput, MinistryUncheckedUpdateWithoutSchedulesInput>
    create: XOR<MinistryCreateWithoutSchedulesInput, MinistryUncheckedCreateWithoutSchedulesInput>
    where?: MinistryWhereInput
  }

  export type MinistryUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: MinistryWhereInput
    data: XOR<MinistryUpdateWithoutSchedulesInput, MinistryUncheckedUpdateWithoutSchedulesInput>
  }

  export type MinistryUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryPositionUpsertWithoutSchedulesInput = {
    update: XOR<MinistryPositionUpdateWithoutSchedulesInput, MinistryPositionUncheckedUpdateWithoutSchedulesInput>
    create: XOR<MinistryPositionCreateWithoutSchedulesInput, MinistryPositionUncheckedCreateWithoutSchedulesInput>
    where?: MinistryPositionWhereInput
  }

  export type MinistryPositionUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: MinistryPositionWhereInput
    data: XOR<MinistryPositionUpdateWithoutSchedulesInput, MinistryPositionUncheckedUpdateWithoutSchedulesInput>
  }

  export type MinistryPositionUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    ministry?: MinistryUpdateOneRequiredWithoutPositionsNestedInput
  }

  export type MinistryPositionUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutSchedulesInput = {
    update: XOR<UserUpdateWithoutSchedulesInput, UserUncheckedUpdateWithoutSchedulesInput>
    create: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSchedulesInput, UserUncheckedUpdateWithoutSchedulesInput>
  }

  export type UserUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type ChurchCreateWithoutFeedsInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberCreateNestedManyWithoutChurchInput
    ministries?: MinistryCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeCreateNestedManyWithoutChurchInput
  }

  export type ChurchUncheckedCreateWithoutFeedsInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    image?: string | null
    instagram?: string | null
    youtube?: string | null
    homepage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ChurchMemberUncheckedCreateNestedManyWithoutChurchInput
    ministries?: MinistryUncheckedCreateNestedManyWithoutChurchInput
    notices?: ChurchNoticeUncheckedCreateNestedManyWithoutChurchInput
  }

  export type ChurchCreateOrConnectWithoutFeedsInput = {
    where: ChurchWhereUniqueInput
    create: XOR<ChurchCreateWithoutFeedsInput, ChurchUncheckedCreateWithoutFeedsInput>
  }

  export type UserCreateWithoutFeedsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutFeedsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutFeedsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedsInput, UserUncheckedCreateWithoutFeedsInput>
  }

  export type FeedImageCreateWithoutFeedInput = {
    id?: string
    url: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedImageUncheckedCreateWithoutFeedInput = {
    id?: string
    url: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedImageCreateOrConnectWithoutFeedInput = {
    where: FeedImageWhereUniqueInput
    create: XOR<FeedImageCreateWithoutFeedInput, FeedImageUncheckedCreateWithoutFeedInput>
  }

  export type FeedImageCreateManyFeedInputEnvelope = {
    data: FeedImageCreateManyFeedInput | FeedImageCreateManyFeedInput[]
    skipDuplicates?: boolean
  }

  export type FeedLikeCreateWithoutFeedInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLikesInput
  }

  export type FeedLikeUncheckedCreateWithoutFeedInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLikeCreateOrConnectWithoutFeedInput = {
    where: FeedLikeWhereUniqueInput
    create: XOR<FeedLikeCreateWithoutFeedInput, FeedLikeUncheckedCreateWithoutFeedInput>
  }

  export type FeedLikeCreateManyFeedInputEnvelope = {
    data: FeedLikeCreateManyFeedInput | FeedLikeCreateManyFeedInput[]
    skipDuplicates?: boolean
  }

  export type FeedCommentCreateWithoutFeedInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type FeedCommentUncheckedCreateWithoutFeedInput = {
    id?: string
    content: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedCommentCreateOrConnectWithoutFeedInput = {
    where: FeedCommentWhereUniqueInput
    create: XOR<FeedCommentCreateWithoutFeedInput, FeedCommentUncheckedCreateWithoutFeedInput>
  }

  export type FeedCommentCreateManyFeedInputEnvelope = {
    data: FeedCommentCreateManyFeedInput | FeedCommentCreateManyFeedInput[]
    skipDuplicates?: boolean
  }

  export type ChurchUpsertWithoutFeedsInput = {
    update: XOR<ChurchUpdateWithoutFeedsInput, ChurchUncheckedUpdateWithoutFeedsInput>
    create: XOR<ChurchCreateWithoutFeedsInput, ChurchUncheckedCreateWithoutFeedsInput>
    where?: ChurchWhereInput
  }

  export type ChurchUpdateToOneWithWhereWithoutFeedsInput = {
    where?: ChurchWhereInput
    data: XOR<ChurchUpdateWithoutFeedsInput, ChurchUncheckedUpdateWithoutFeedsInput>
  }

  export type ChurchUpdateWithoutFeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUpdateManyWithoutChurchNestedInput
    ministries?: MinistryUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUpdateManyWithoutChurchNestedInput
  }

  export type ChurchUncheckedUpdateWithoutFeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    youtube?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ChurchMemberUncheckedUpdateManyWithoutChurchNestedInput
    ministries?: MinistryUncheckedUpdateManyWithoutChurchNestedInput
    notices?: ChurchNoticeUncheckedUpdateManyWithoutChurchNestedInput
  }

  export type UserUpsertWithoutFeedsInput = {
    update: XOR<UserUpdateWithoutFeedsInput, UserUncheckedUpdateWithoutFeedsInput>
    create: XOR<UserCreateWithoutFeedsInput, UserUncheckedCreateWithoutFeedsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedsInput, UserUncheckedUpdateWithoutFeedsInput>
  }

  export type UserUpdateWithoutFeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type FeedImageUpsertWithWhereUniqueWithoutFeedInput = {
    where: FeedImageWhereUniqueInput
    update: XOR<FeedImageUpdateWithoutFeedInput, FeedImageUncheckedUpdateWithoutFeedInput>
    create: XOR<FeedImageCreateWithoutFeedInput, FeedImageUncheckedCreateWithoutFeedInput>
  }

  export type FeedImageUpdateWithWhereUniqueWithoutFeedInput = {
    where: FeedImageWhereUniqueInput
    data: XOR<FeedImageUpdateWithoutFeedInput, FeedImageUncheckedUpdateWithoutFeedInput>
  }

  export type FeedImageUpdateManyWithWhereWithoutFeedInput = {
    where: FeedImageScalarWhereInput
    data: XOR<FeedImageUpdateManyMutationInput, FeedImageUncheckedUpdateManyWithoutFeedInput>
  }

  export type FeedImageScalarWhereInput = {
    AND?: FeedImageScalarWhereInput | FeedImageScalarWhereInput[]
    OR?: FeedImageScalarWhereInput[]
    NOT?: FeedImageScalarWhereInput | FeedImageScalarWhereInput[]
    id?: StringFilter<"FeedImage"> | string
    url?: StringFilter<"FeedImage"> | string
    order?: IntFilter<"FeedImage"> | number
    feedId?: StringFilter<"FeedImage"> | string
    createdAt?: DateTimeFilter<"FeedImage"> | Date | string
    updatedAt?: DateTimeFilter<"FeedImage"> | Date | string
  }

  export type FeedLikeUpsertWithWhereUniqueWithoutFeedInput = {
    where: FeedLikeWhereUniqueInput
    update: XOR<FeedLikeUpdateWithoutFeedInput, FeedLikeUncheckedUpdateWithoutFeedInput>
    create: XOR<FeedLikeCreateWithoutFeedInput, FeedLikeUncheckedCreateWithoutFeedInput>
  }

  export type FeedLikeUpdateWithWhereUniqueWithoutFeedInput = {
    where: FeedLikeWhereUniqueInput
    data: XOR<FeedLikeUpdateWithoutFeedInput, FeedLikeUncheckedUpdateWithoutFeedInput>
  }

  export type FeedLikeUpdateManyWithWhereWithoutFeedInput = {
    where: FeedLikeScalarWhereInput
    data: XOR<FeedLikeUpdateManyMutationInput, FeedLikeUncheckedUpdateManyWithoutFeedInput>
  }

  export type FeedCommentUpsertWithWhereUniqueWithoutFeedInput = {
    where: FeedCommentWhereUniqueInput
    update: XOR<FeedCommentUpdateWithoutFeedInput, FeedCommentUncheckedUpdateWithoutFeedInput>
    create: XOR<FeedCommentCreateWithoutFeedInput, FeedCommentUncheckedCreateWithoutFeedInput>
  }

  export type FeedCommentUpdateWithWhereUniqueWithoutFeedInput = {
    where: FeedCommentWhereUniqueInput
    data: XOR<FeedCommentUpdateWithoutFeedInput, FeedCommentUncheckedUpdateWithoutFeedInput>
  }

  export type FeedCommentUpdateManyWithWhereWithoutFeedInput = {
    where: FeedCommentScalarWhereInput
    data: XOR<FeedCommentUpdateManyMutationInput, FeedCommentUncheckedUpdateManyWithoutFeedInput>
  }

  export type ChurchFeedCreateWithoutImagesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutFeedsInput
    author: UserCreateNestedOneWithoutFeedsInput
    likes?: FeedLikeCreateNestedManyWithoutFeedInput
    comments?: FeedCommentCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUncheckedCreateWithoutImagesInput = {
    id?: string
    content: string
    churchId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: FeedLikeUncheckedCreateNestedManyWithoutFeedInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedCreateOrConnectWithoutImagesInput = {
    where: ChurchFeedWhereUniqueInput
    create: XOR<ChurchFeedCreateWithoutImagesInput, ChurchFeedUncheckedCreateWithoutImagesInput>
  }

  export type ChurchFeedUpsertWithoutImagesInput = {
    update: XOR<ChurchFeedUpdateWithoutImagesInput, ChurchFeedUncheckedUpdateWithoutImagesInput>
    create: XOR<ChurchFeedCreateWithoutImagesInput, ChurchFeedUncheckedCreateWithoutImagesInput>
    where?: ChurchFeedWhereInput
  }

  export type ChurchFeedUpdateToOneWithWhereWithoutImagesInput = {
    where?: ChurchFeedWhereInput
    data: XOR<ChurchFeedUpdateWithoutImagesInput, ChurchFeedUncheckedUpdateWithoutImagesInput>
  }

  export type ChurchFeedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutFeedsNestedInput
    author?: UserUpdateOneRequiredWithoutFeedsNestedInput
    likes?: FeedLikeUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: FeedLikeUncheckedUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedCreateWithoutLikesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutFeedsInput
    author: UserCreateNestedOneWithoutFeedsInput
    images?: FeedImageCreateNestedManyWithoutFeedInput
    comments?: FeedCommentCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUncheckedCreateWithoutLikesInput = {
    id?: string
    content: string
    churchId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: FeedImageUncheckedCreateNestedManyWithoutFeedInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedCreateOrConnectWithoutLikesInput = {
    where: ChurchFeedWhereUniqueInput
    create: XOR<ChurchFeedCreateWithoutLikesInput, ChurchFeedUncheckedCreateWithoutLikesInput>
  }

  export type UserCreateWithoutLikesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutLikesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutLikesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
  }

  export type ChurchFeedUpsertWithoutLikesInput = {
    update: XOR<ChurchFeedUpdateWithoutLikesInput, ChurchFeedUncheckedUpdateWithoutLikesInput>
    create: XOR<ChurchFeedCreateWithoutLikesInput, ChurchFeedUncheckedCreateWithoutLikesInput>
    where?: ChurchFeedWhereInput
  }

  export type ChurchFeedUpdateToOneWithWhereWithoutLikesInput = {
    where?: ChurchFeedWhereInput
    data: XOR<ChurchFeedUpdateWithoutLikesInput, ChurchFeedUncheckedUpdateWithoutLikesInput>
  }

  export type ChurchFeedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutFeedsNestedInput
    author?: UserUpdateOneRequiredWithoutFeedsNestedInput
    images?: FeedImageUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: FeedImageUncheckedUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutFeedNestedInput
  }

  export type UserUpsertWithoutLikesInput = {
    update: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
    create: XOR<UserCreateWithoutLikesInput, UserUncheckedCreateWithoutLikesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikesInput, UserUncheckedUpdateWithoutLikesInput>
  }

  export type UserUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type ChurchFeedCreateWithoutCommentsInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutFeedsInput
    author: UserCreateNestedOneWithoutFeedsInput
    images?: FeedImageCreateNestedManyWithoutFeedInput
    likes?: FeedLikeCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedUncheckedCreateWithoutCommentsInput = {
    id?: string
    content: string
    churchId: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: FeedImageUncheckedCreateNestedManyWithoutFeedInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutFeedInput
  }

  export type ChurchFeedCreateOrConnectWithoutCommentsInput = {
    where: ChurchFeedWhereUniqueInput
    create: XOR<ChurchFeedCreateWithoutCommentsInput, ChurchFeedUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileCreateNestedManyWithoutUploadedByInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: MinistryFileUncheckedCreateNestedManyWithoutUploadedByInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ChurchFeedUpsertWithoutCommentsInput = {
    update: XOR<ChurchFeedUpdateWithoutCommentsInput, ChurchFeedUncheckedUpdateWithoutCommentsInput>
    create: XOR<ChurchFeedCreateWithoutCommentsInput, ChurchFeedUncheckedCreateWithoutCommentsInput>
    where?: ChurchFeedWhereInput
  }

  export type ChurchFeedUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ChurchFeedWhereInput
    data: XOR<ChurchFeedUpdateWithoutCommentsInput, ChurchFeedUncheckedUpdateWithoutCommentsInput>
  }

  export type ChurchFeedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutFeedsNestedInput
    author?: UserUpdateOneRequiredWithoutFeedsNestedInput
    images?: FeedImageUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: FeedImageUncheckedUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutFeedNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUpdateManyWithoutUploadedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: MinistryFileUncheckedUpdateManyWithoutUploadedByNestedInput
  }

  export type MinistryCreateWithoutPositionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    files?: MinistryFileCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutPositionsInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    files?: MinistryFileUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutPositionsInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutPositionsInput, MinistryUncheckedCreateWithoutPositionsInput>
  }

  export type MinistryScheduleCreateWithoutPositionInput = {
    id?: string
    date: Date | string
    status?: string
    ministry: MinistryCreateNestedOneWithoutSchedulesInput
    user: UserCreateNestedOneWithoutSchedulesInput
  }

  export type MinistryScheduleUncheckedCreateWithoutPositionInput = {
    id?: string
    ministryId: string
    userId: string
    date: Date | string
    status?: string
  }

  export type MinistryScheduleCreateOrConnectWithoutPositionInput = {
    where: MinistryScheduleWhereUniqueInput
    create: XOR<MinistryScheduleCreateWithoutPositionInput, MinistryScheduleUncheckedCreateWithoutPositionInput>
  }

  export type MinistryScheduleCreateManyPositionInputEnvelope = {
    data: MinistryScheduleCreateManyPositionInput | MinistryScheduleCreateManyPositionInput[]
    skipDuplicates?: boolean
  }

  export type MinistryUpsertWithoutPositionsInput = {
    update: XOR<MinistryUpdateWithoutPositionsInput, MinistryUncheckedUpdateWithoutPositionsInput>
    create: XOR<MinistryCreateWithoutPositionsInput, MinistryUncheckedCreateWithoutPositionsInput>
    where?: MinistryWhereInput
  }

  export type MinistryUpdateToOneWithWhereWithoutPositionsInput = {
    where?: MinistryWhereInput
    data: XOR<MinistryUpdateWithoutPositionsInput, MinistryUncheckedUpdateWithoutPositionsInput>
  }

  export type MinistryUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryScheduleUpsertWithWhereUniqueWithoutPositionInput = {
    where: MinistryScheduleWhereUniqueInput
    update: XOR<MinistryScheduleUpdateWithoutPositionInput, MinistryScheduleUncheckedUpdateWithoutPositionInput>
    create: XOR<MinistryScheduleCreateWithoutPositionInput, MinistryScheduleUncheckedCreateWithoutPositionInput>
  }

  export type MinistryScheduleUpdateWithWhereUniqueWithoutPositionInput = {
    where: MinistryScheduleWhereUniqueInput
    data: XOR<MinistryScheduleUpdateWithoutPositionInput, MinistryScheduleUncheckedUpdateWithoutPositionInput>
  }

  export type MinistryScheduleUpdateManyWithWhereWithoutPositionInput = {
    where: MinistryScheduleScalarWhereInput
    data: XOR<MinistryScheduleUpdateManyMutationInput, MinistryScheduleUncheckedUpdateManyWithoutPositionInput>
  }

  export type MinistryCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    church: ChurchCreateNestedOneWithoutMinistriesInput
    members?: MinistryMemberCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionCreateNestedManyWithoutMinistryInput
  }

  export type MinistryUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: MinistryMemberUncheckedCreateNestedManyWithoutMinistryInput
    notices?: MinistryNoticeUncheckedCreateNestedManyWithoutMinistryInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutMinistryInput
    announcements?: MinistryAnnouncementUncheckedCreateNestedManyWithoutMinistryInput
    positions?: MinistryPositionUncheckedCreateNestedManyWithoutMinistryInput
  }

  export type MinistryCreateOrConnectWithoutFilesInput = {
    where: MinistryWhereUniqueInput
    create: XOR<MinistryCreateWithoutFilesInput, MinistryUncheckedCreateWithoutFilesInput>
  }

  export type UserCreateWithoutUploadedFilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    churches?: ChurchMemberCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeCreateNestedManyWithoutUserInput
    comments?: FeedCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadedFilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    churches?: ChurchMemberUncheckedCreateNestedManyWithoutUserInput
    ministries?: MinistryMemberUncheckedCreateNestedManyWithoutUserInput
    schedules?: MinistryScheduleUncheckedCreateNestedManyWithoutUserInput
    ministryNotices?: MinistryNoticeUncheckedCreateNestedManyWithoutUserInput
    feeds?: ChurchFeedUncheckedCreateNestedManyWithoutAuthorInput
    likes?: FeedLikeUncheckedCreateNestedManyWithoutUserInput
    comments?: FeedCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadedFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
  }

  export type MinistryUpsertWithoutFilesInput = {
    update: XOR<MinistryUpdateWithoutFilesInput, MinistryUncheckedUpdateWithoutFilesInput>
    create: XOR<MinistryCreateWithoutFilesInput, MinistryUncheckedCreateWithoutFilesInput>
    where?: MinistryWhereInput
  }

  export type MinistryUpdateToOneWithWhereWithoutFilesInput = {
    where?: MinistryWhereInput
    data: XOR<MinistryUpdateWithoutFilesInput, MinistryUncheckedUpdateWithoutFilesInput>
  }

  export type MinistryUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMinistriesNestedInput
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type UserUpsertWithoutUploadedFilesInput = {
    update: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type UserUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    churches?: ChurchMemberUncheckedUpdateManyWithoutUserNestedInput
    ministries?: MinistryMemberUncheckedUpdateManyWithoutUserNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutUserNestedInput
    ministryNotices?: MinistryNoticeUncheckedUpdateManyWithoutUserNestedInput
    feeds?: ChurchFeedUncheckedUpdateManyWithoutAuthorNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutUserNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateManyUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthenticatorCreateManyUserInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type ChurchMemberCreateManyUserInput = {
    id?: string
    role?: $Enums.ChurchRole
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryMemberCreateManyUserInput = {
    id?: string
    role?: $Enums.MinistryRole
    ministryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryScheduleCreateManyUserInput = {
    id?: string
    ministryId: string
    positionId: string
    date: Date | string
    status?: string
  }

  export type MinistryNoticeCreateManyUserInput = {
    id?: string
    ministryId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchFeedCreateManyAuthorInput = {
    id?: string
    content: string
    churchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLikeCreateManyUserInput = {
    id?: string
    feedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedCommentCreateManyUserInput = {
    id?: string
    content: string
    feedId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryFileCreateManyUploadedByInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    ministryId: string
  }

  export type AccountUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthenticatorUpdateWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorUncheckedUpdateWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorUncheckedUpdateManyWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChurchMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ChurchMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MinistryMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    ministryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    ministryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryScheduleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    ministry?: MinistryUpdateOneRequiredWithoutSchedulesNestedInput
    position?: MinistryPositionUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type MinistryScheduleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    positionId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryScheduleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    positionId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryNoticeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutNoticesNestedInput
    events?: MinistryEventUpdateManyWithoutNoticeNestedInput
  }

  export type MinistryNoticeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: MinistryEventUncheckedUpdateManyWithoutNoticeNestedInput
  }

  export type MinistryNoticeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchFeedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    church?: ChurchUpdateOneRequiredWithoutFeedsNestedInput
    images?: FeedImageUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: FeedImageUncheckedUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    churchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feed?: ChurchFeedUpdateOneRequiredWithoutLikesNestedInput
  }

  export type FeedLikeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feed?: ChurchFeedUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type FeedCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    feedId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryFileUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministry?: MinistryUpdateOneRequiredWithoutFilesNestedInput
  }

  export type MinistryFileUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministryId?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryFileUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ministryId?: StringFieldUpdateOperationsInput | string
  }

  export type ChurchMemberCreateManyChurchInput = {
    id?: string
    role?: $Enums.ChurchRole
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryCreateManyChurchInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchNoticeCreateManyChurchInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchFeedCreateManyChurchInput = {
    id?: string
    content: string
    authorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChurchMemberUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChurchesNestedInput
  }

  export type ChurchMemberUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchMemberUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChurchRoleFieldUpdateOperationsInput | $Enums.ChurchRole
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: MinistryMemberUncheckedUpdateManyWithoutMinistryNestedInput
    notices?: MinistryNoticeUncheckedUpdateManyWithoutMinistryNestedInput
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutMinistryNestedInput
    announcements?: MinistryAnnouncementUncheckedUpdateManyWithoutMinistryNestedInput
    positions?: MinistryPositionUncheckedUpdateManyWithoutMinistryNestedInput
    files?: MinistryFileUncheckedUpdateManyWithoutMinistryNestedInput
  }

  export type MinistryUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchNoticeUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchNoticeUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchNoticeUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChurchFeedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutFeedsNestedInput
    images?: FeedImageUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: FeedImageUncheckedUpdateManyWithoutFeedNestedInput
    likes?: FeedLikeUncheckedUpdateManyWithoutFeedNestedInput
    comments?: FeedCommentUncheckedUpdateManyWithoutFeedNestedInput
  }

  export type ChurchFeedUncheckedUpdateManyWithoutChurchInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberCreateManyMinistryInput = {
    id?: string
    role?: $Enums.MinistryRole
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryNoticeCreateManyMinistryInput = {
    id?: string
    userId: string
    title: string
    content: string
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryScheduleCreateManyMinistryInput = {
    id?: string
    positionId: string
    userId: string
    date: Date | string
    status?: string
  }

  export type MinistryAnnouncementCreateManyMinistryInput = {
    id?: string
    title: string
    content: string
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryPositionCreateManyMinistryInput = {
    id?: string
    name: string
    description?: string | null
    maxMembers?: number | null
  }

  export type MinistryFileCreateManyMinistryInput = {
    id?: string
    name: string
    url: string
    type: string
    size: number
    createdAt?: Date | string
    uploadedById: string
  }

  export type MinistryMemberUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMinistriesNestedInput
  }

  export type MinistryMemberUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryMemberUncheckedUpdateManyWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMinistryRoleFieldUpdateOperationsInput | $Enums.MinistryRole
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryNoticeUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMinistryNoticesNestedInput
    events?: MinistryEventUpdateManyWithoutNoticeNestedInput
  }

  export type MinistryNoticeUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: MinistryEventUncheckedUpdateManyWithoutNoticeNestedInput
  }

  export type MinistryNoticeUncheckedUpdateManyWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryScheduleUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    position?: MinistryPositionUpdateOneRequiredWithoutSchedulesNestedInput
    user?: UserUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type MinistryScheduleUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    positionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryScheduleUncheckedUpdateManyWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    positionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryAnnouncementUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryAnnouncementUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryAnnouncementUncheckedUpdateManyWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryPositionUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    schedules?: MinistryScheduleUpdateManyWithoutPositionNestedInput
  }

  export type MinistryPositionUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
    schedules?: MinistryScheduleUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type MinistryPositionUncheckedUpdateManyWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxMembers?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MinistryFileUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
  }

  export type MinistryFileUncheckedUpdateWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryFileUncheckedUpdateManyWithoutMinistryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedById?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryEventCreateManyNoticeInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    eventDate: Date | string
    startTime: Date | string
    endTime: Date | string
    maxAttendees?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MinistryEventUpdateWithoutNoticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryEventUncheckedUpdateWithoutNoticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryEventUncheckedUpdateManyWithoutNoticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    maxAttendees?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedImageCreateManyFeedInput = {
    id?: string
    url: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLikeCreateManyFeedInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedCommentCreateManyFeedInput = {
    id?: string
    content: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedImageUpdateWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedImageUncheckedUpdateWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedImageUncheckedUpdateManyWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeUpdateWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesNestedInput
  }

  export type FeedLikeUncheckedUpdateWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLikeUncheckedUpdateManyWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentUpdateWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type FeedCommentUncheckedUpdateWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedCommentUncheckedUpdateManyWithoutFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MinistryScheduleCreateManyPositionInput = {
    id?: string
    ministryId: string
    userId: string
    date: Date | string
    status?: string
  }

  export type MinistryScheduleUpdateWithoutPositionInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    ministry?: MinistryUpdateOneRequiredWithoutSchedulesNestedInput
    user?: UserUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type MinistryScheduleUncheckedUpdateWithoutPositionInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MinistryScheduleUncheckedUpdateManyWithoutPositionInput = {
    id?: StringFieldUpdateOperationsInput | string
    ministryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}